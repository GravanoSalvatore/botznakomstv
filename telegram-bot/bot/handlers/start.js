// const admin = require("firebase-admin");
// const fs = require("fs");
// const path = require("path");
// const CryptoPayHandler = require('./cryptoPay');

// module.exports = (bot, db) => {
//   // ================= 1. –ü–†–ï–î–ó–ê–ì–†–£–ó–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø =================
//   const welcomeImage = {
//     path: path.join(__dirname, "../../img/welcome.jpg"),
//     buffer: null,
//     fileId: null,
//     load: function () {
//       if (fs.existsSync(this.path)) {
//         this.buffer = fs.readFileSync(this.path);
//         console.log("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ welcome.jpg –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å");
//       }
//     },
//   };
//   welcomeImage.load();

//   const cryptoPay = new CryptoPayHandler(bot, db);

//   // ================= 2. –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –ü–û–î–ü–ò–°–ö–ò =================
//   const checkSubscription = async (userId) => {
//     try {
//       const subRef = db.collection("subscriptions").doc(userId.toString());
//       const doc = await subRef.get();

//       if (!doc.exists) {
//         return {
//           active: false,
//           message: "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
//         };
//       }

//       const subData = doc.data();
//       const isActive = subData.isActive && subData.endDate.toDate() > new Date();

//       let message = "";
//       if (isActive) {
//         const endDate = subData.endDate.toDate();
//         const daysLeft = Math.ceil((endDate - new Date()) / (1000 * 60 * 60 * 24));

//         if (subData.subscriptionType === "forever") {
//           message = "üéâ –£ –≤–∞—Å –±–µ—Å—Å—Ä–æ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!";
//         } else {
//           message = `‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: ${endDate.toLocaleDateString()} (–æ—Å—Ç–∞–ª–æ—Å—å ${daysLeft} –¥–Ω–µ–π)`;
//         }
//       } else {
//         message = "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞";
//       }

//       return {
//         active: isActive,
//         message: message,
//         subscription: subData
//       };
//     } catch (error) {
//       console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:", error);
//       return {
//         active: false,
//         message: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"
//       };
//     }
//   };

//   // ================= 3. –§–£–ù–ö–¶–ò–Ø –û–ß–ò–°–¢–ö–ò –ß–ê–¢–ê =================
//   const clearChat = async (ctx) => {
//     try {
//       const chatId = ctx.chat.id;
//       const messageId = ctx.message ? ctx.message.message_id : ctx.update.callback_query.message.message_id;

//       // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
//       await ctx.deleteMessage();

//       // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–æ 10 —à—Ç—É–∫)
//       for (let i = 1; i <= 10; i++) {
//         try {
//           await ctx.telegram.deleteMessage(chatId, messageId - i);
//         } catch (e) {
//           // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ (—Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–≥—É—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å)
//         }
//       }

//       return true;
//     } catch (error) {
//       console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —á–∞—Ç–∞:", error);
//       return false;
//     }
//   };

//   // ================= 4. –§–£–ù–ö–¶–ò–Ø –û–ß–ò–°–¢–ö–ò –≠–ö–†–ê–ù–ê =================
//   const clearScreen = async (ctx) => {
//     try {
//       await clearChat(ctx);

//       // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
//       const userId = ctx.from.id;
//       const subscription = await checkSubscription(userId);
//       const hasSub = subscription.active;

//       const baseKeyboard = [];

//       if (hasSub) {
//         baseKeyboard.push([{ text: "üåç –í—Å–µ —Å—Ç—Ä–∞–Ω—ã", callback_data: "all_countries" }]);
//       }

//       baseKeyboard.push([{ text: "üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: "choose_payment_method" }]);
//       baseKeyboard.push([{ text: "üßπ –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω", callback_data: "clear_screen" }]);

//       const welcomeText = `üëã<b> –ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}!
// –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –≠—Å–∫–æ—Ä—Çüíã –ë–ª–æ–∫–Ω–æ—Çü•ï</b>
// <em>–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å –∫–∞—Ç–∞–ª–æ–≥ –∞–Ω–∫–µ—Ç —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è, —Ñ–ª–∏—Ä—Ç–∞ –∏ —Å–µ—Ä—å—ë–∑–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π.
// üéâ –ö–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –≤—Å–µ–≥–¥–∞ —Å–≤–µ–∂–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏!
// –ù–∞—á–Ω–∏ –ø–æ–∏—Å–∫ –∏–ª–∏ —Ä–∞–∑–º–µ—Å—Ç–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —Ç–≤–æ—è –≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∫–∞ —É–∂–µ –∑–¥–µ—Å—å!</em>\n
// <a href="http://t.me/escortnotebook"><b>–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ‚ù§Ô∏è</b></a>\n`;

//       try {
//         if (welcomeImage.fileId) {
//           await ctx.replyWithPhoto(welcomeImage.fileId, {
//             caption: welcomeText,
//             parse_mode: "HTML",
//             reply_markup: { inline_keyboard: baseKeyboard },
//           });
//         } else if (welcomeImage.buffer) {
//           const msg = await ctx.replyWithPhoto(
//             { source: welcomeImage.buffer },
//             {
//               caption: welcomeText,
//               parse_mode: "HTML",
//               reply_markup: { inline_keyboard: baseKeyboard },
//             }
//           );
//           welcomeImage.fileId = msg.photo[0].file_id;
//         } else {
//           await ctx.reply(welcomeText, {
//             parse_mode: "HTML",
//             reply_markup: { inline_keyboard: baseKeyboard },
//           });
//         }
//       } catch (e) {
//         console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ welcome:", e);
//         await ctx.reply(welcomeText, {
//           parse_mode: "HTML",
//           reply_markup: { inline_keyboard: baseKeyboard },
//         });
//       }

//       if (hasSub) {
//         setTimeout(async () => {
//           try {
//             await ctx.reply(subscription.message, { parse_mode: "HTML" });
//           } catch (e) {
//             console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏:", e);
//           }
//         }, 500);
//       }

//     } catch (error) {
//       console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —ç–∫—Ä–∞–Ω–∞:", error);
//       // –ï—Å–ª–∏ –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
//       await showMainMenu(ctx);
//     }
//   };

//   // ================= 5. –§–£–ù–ö–¶–ò–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ =================
//   const showMainMenu = async (ctx) => {
//     const userId = ctx.from.id;
//     const subscription = await checkSubscription(userId);
//     const hasSub = subscription.active;

//     const baseKeyboard = [];

//     if (hasSub) {
//       baseKeyboard.push([{ text: "üåç –í—Å–µ —Å—Ç—Ä–∞–Ω—ã", callback_data: "all_countries" }]);
//     }

//     baseKeyboard.push([{ text: "üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: "choose_payment_method" }]);
//     baseKeyboard.push([{ text: "üßπ –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω", callback_data: "clear_screen" }]);

//     const welcomeText = `üëã<b> –ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}!
// –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –≠—Å–∫–æ—Ä—Çüíã –ë–ª–æ–∫–Ω–æ—Çü•ï</b>
// <em>–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è.
// üéâ –ë–∞–∑–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∏ –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –≤—Å–µ–≥–¥–∞ —Å–≤–µ–∂–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏!
// –ù–∞—á–Ω–∏ –ø–æ–∏—Å–∫ –∏–ª–∏ —Ä–∞–∑–º–µ—Å—Ç–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —Ç–≤–æ—è –≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∫–∞ —É–∂–µ –∑–¥–µ—Å—å!</em>\n
// <a href="http://t.me/escortnotebook"><b>–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ‚ù§Ô∏è</b></a>\n`;

//     try {
//       if (welcomeImage.fileId) {
//         await ctx.replyWithPhoto(welcomeImage.fileId, {
//           caption: welcomeText,
//           parse_mode: "HTML",
//           reply_markup: { inline_keyboard: baseKeyboard },
//         });
//       } else if (welcomeImage.buffer) {
//         const msg = await ctx.replyWithPhoto(
//           { source: welcomeImage.buffer },
//           {
//             caption: welcomeText,
//             parse_mode: "HTML",
//             reply_markup: { inline_keyboard: baseKeyboard },
//           }
//         );
//         welcomeImage.fileId = msg.photo[0].file_id;
//       } else {
//         await ctx.reply(welcomeText, {
//           parse_mode: "HTML",
//           reply_markup: { inline_keyboard: baseKeyboard },
//         });
//       }
//     } catch (e) {
//       console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ welcome:", e);
//       await ctx.reply(welcomeText, {
//         parse_mode: "HTML",
//         reply_markup: { inline_keyboard: baseKeyboard },
//       });
//     }

//     if (hasSub) {
//       setTimeout(async () => {
//         try {
//           await ctx.reply(subscription.message, { parse_mode: "HTML" });
//         } catch (e) {
//           console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏:", e);
//         }
//       }, 500);
//     }
//   };

//   // ================= 6. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–û–õ–õ–ï–ö–¶–ò–ô =================
//   const initCollections = async () => {
//     const collections = ["subscriptions", "transactions", "payment_logs", "cryptoPayPayments"];
//     for (const col of collections) {
//       try {
//         const ref = db.collection(col).doc("init");
//         await ref.set({ _init: true });
//         await ref.delete();
//       } catch (error) {
//         console.log(`–ö–æ–ª–ª–µ–∫—Ü–∏—è ${col} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
//       }
//     }
//   };

//   // ================= 7. –û–ë–†–ê–ë–û–¢–ß–ò–ö START =================
//   bot.start(async (ctx) => {
//     initCollections().catch((e) => console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", e));
//     await showMainMenu(ctx);
//   });

//   // ================= 8. –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–ß–ò–°–¢–ö–ò –≠–ö–†–ê–ù–ê =================
//   bot.action("clear_screen", async (ctx) => {
//     await clearScreen(ctx);
//   });

//   // ================= 9. –í–´–ë–û–† –°–ü–û–°–û–ë–ê –û–ü–õ–ê–¢–´ =================
//   bot.action("choose_payment_method", async (ctx) => {
//     const keyboard = {
//       inline_keyboard: [
//         [
//           {
//             text: "‚≠ê –û–ø–ª–∞—Ç–∞ Stars",
//             callback_data: "show_stars_plans"
//           }
//         ],
//         [
//           {
//             text: "‚Çø –û–ø–ª–∞—Ç–∞ USDT (Crypto Pay)",
//             callback_data: "show_crypto_plans"
//           }
//         ],
//         [
//           {
//             text: "üîô –ù–∞–∑–∞–¥",
//             callback_data: "back_to_main"
//           },
//           {
//             text: "üßπ –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω",
//             callback_data: "clear_screen"
//           }
//         ]
//       ]
//     };

//     await ctx.reply(
//       `üíé <b>–í–´–ë–ï–†–ò –°–ü–û–°–û–ë –û–ü–õ–ê–¢–´</b>\n\n` +
//       `‚≠ê <b>Stars</b> - –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram\n` +
//       `‚Ä¢ –ë—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ\n` +
//       `‚Ä¢ –í–Ω—É—Ç—Ä–∏ Telegram\n\n` +
//       `‚Çø <b>USDT (Crypto Pay)</b> - –æ–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π\n` +
//       `‚Ä¢ –ê–Ω–æ–Ω–∏–º–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ\n` +
//       `‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ USDT, BTC, ETH\n\n` +
//       `<b>–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>`,
//       {
//         parse_mode: "HTML",
//         reply_markup: keyboard
//       }
//     );
//   });

//   // ================= 10. –¢–ê–†–ò–§–´ –î–õ–Ø STARS =================
//   bot.action("show_stars_plans", async (ctx) => {
//     const keyboard = {
//       inline_keyboard: [
//         [
//           {
//             text: "üî• 1 –¥–µ–Ω—å (399üåü)",
//             callback_data: "buy_1day",
//           },
//         ],
//         [
//           {
//             text: "‚ù§Ô∏è 1 –º–µ—Å—è—Ü (799üåü)",
//             callback_data: "buy_1month",
//           },
//         ],
//         [
//           {
//             text: "üí´ 1 –≥–æ–¥ (3999üåü)",
//             callback_data: "buy_forever",
//           },
//         ],
//         [
//           {
//             text: "üîô –ù–∞–∑–∞–¥",
//             callback_data: "choose_payment_method",
//           },
//           {
//             text: "üßπ –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω",
//             callback_data: "clear_screen",
//           }
//         ]
//       ]
//     };

//     await ctx.reply(
//       `‚≠ê <b>–û–ü–õ–ê–¢–ê STARS</b>\n\n` +
//       `–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n` +
//       `üî• <b>1 –¥–µ–Ω—å</b> - 399 Stars\n` +
//       `‚ù§Ô∏è <b>1 –º–µ—Å—è—Ü</b> - 799 Stars\n` +
//       `üí´ <b>1 –≥–æ–¥</b> - 3999 Stars\n\n` +
//       `<b>–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ:</b>`,
//       {
//         parse_mode: "HTML",
//         reply_markup: keyboard
//       }
//     );
//   });

//   // ================= 11. –¢–ê–†–ò–§–´ –î–õ–Ø CRYPTO PAY =================
//   bot.action("show_crypto_plans", async (ctx) => {
//     const keyboard = {
//       inline_keyboard: [
//         [
//           {
//             text: "üü¢ 1 –¥–µ–Ω—å - 5 USDT",
//             callback_data: "crypto_basic"
//           }
//         ],
//         [
//           {
//             text: "üîµ 1 –º–µ—Å—è—Ü - 10 USDT",
//             callback_data: "crypto_pro"
//           }
//         ],
//         [
//           {
//             text: "üü£ 1 –≥–æ–¥ - 50 USDT",
//             callback_data: "crypto_premium"
//           }
//         ],
//         [
//           {
//             text: "üîô –ù–∞–∑–∞–¥",
//             callback_data: "choose_payment_method"
//           },
//           {
//             text: "üßπ –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω",
//             callback_data: "clear_screen"
//           }
//         ]
//       ]
//     };

//     await ctx.reply(
//       `‚Çø <b>–û–ü–õ–ê–¢–ê USDT (CRYPTO PAY)</b>\n\n` +
//       `–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n` +
//       `üü¢ <b>1 –¥–µ–Ω—å</b> - 5 USDT\n` +
//       `üîµ <b>1 –º–µ—Å—è—Ü</b> - 10 USDT\n` +
//       `üü£ <b>1 –≥–æ–¥</b> - 50 USDT\n\n` +
//       `<b>–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ:</b>`,
//       {
//         parse_mode: "HTML",
//         reply_markup: keyboard
//       }
//     );
//   });

//   // ================= 12. –û–ë–†–ê–ë–û–¢–ö–ê CRYPTO PAY –ü–õ–ê–¢–ï–ñ–ï–ô =================
//   bot.action(/crypto_(.+)/, async (ctx) => {
//     const plan = ctx.match[1];
//     let planData;

//     if (plan === 'basic') {
//       planData = { amount: 5, name: '1 –¥–µ–Ω—å', duration: 1 };
//     } else if (plan === 'pro') {
//       planData = { amount: 10, name: '1 –º–µ—Å—è—Ü', duration: 30 };
//     } else if (plan === 'premium') {
//       planData = { amount: 50, name: '1 –≥–æ–¥', duration: 365 };
//     } else {
//       await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ');
//       return;
//     }

//     try {
//       console.log(`–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –ø–ª–∞–Ω–∞: ${plan}, —Å—É–º–º–∞: ${planData.amount} USDT`);

//       const invoice = await cryptoPay.createInvoice(
//         planData.amount,
//         `–ü–æ–¥–ø–∏—Å–∫–∞: ${planData.name}`
//       );

//       if (!invoice || !invoice.invoice_id) {
//         console.error('–ò–Ω–≤–æ–π—Å –Ω–µ —Å–æ–∑–¥–∞–Ω:', invoice);
//         await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
//         return;
//       }

//       console.log('–ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:', invoice);

//       const paymentData = {
//         userId: ctx.from.id,
//         plan: plan === 'basic' ? '1day' : plan === 'pro' ? '1month' : 'forever',
//         invoiceId: invoice.invoice_id,
//         amount: planData.amount,
//         asset: 'USDT',
//         status: 'active',
//         createdAt: admin.firestore.FieldValue.serverTimestamp(),
//         expiresAt: new Date(Date.now() + 3600 * 1000)
//       };

//       const paymentRef = await db.collection('cryptoPayPayments').add(paymentData);

//       const keyboard = {
//         inline_keyboard: [
//           [{
//             text: 'üí≥ –û–ü–õ–ê–¢–ò–¢–¨ –í @CryptoBot',
//             url: `https://t.me/CryptoBot?start=${invoice.hash}`
//           }],
//           [{
//             text: '‚úÖ –Ø –û–ü–õ–ê–¢–ò–õ',
//             callback_data: `check_crypto_${paymentRef.id}`
//           }],
//           [
//             {
//               text: 'üîô –ù–ê–ó–ê–î',
//               callback_data: 'show_crypto_plans'
//             },
//             {
//               text: 'üßπ –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω',
//               callback_data: 'clear_screen'
//             }
//           ]
//         ]
//       };

//       await ctx.reply(
//         `üíé <b>${planData.name}</b>\n` +
//         `‚Çø <b>–û–ü–õ–ê–¢–ê –ß–ï–†–ï–ó CRYPTO PAY</b>\n\n` +
//         `üí∞ <b>–°—É–º–º–∞:</b> ${planData.amount} USDT\n` +
//         `‚è∞ <b>–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É:</b> 1 —á–∞—Å\n\n` +
//         `üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n` +
//         `1. –ù–∞–∂–º–∏ "–û–ü–õ–ê–¢–ò–¢–¨ –í @CryptoBot"\n` +
//         `2. –û–ø–ª–∞—Ç–∏ —Å—á–µ—Ç –≤ –±–æ—Ç–µ @CryptoBot\n` +
//         `3. –í–µ—Ä–Ω–∏—Å—å –∏ –Ω–∞–∂–º–∏ "–Ø –û–ü–õ–ê–¢–ò–õ"\n\n` +
//         `üÜî <b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>${paymentRef.id}</code>\n` +
//         `üÜî <b>ID —Å—á–µ—Ç–∞:</b> <code>${invoice.invoice_id}</code>`,
//         {
//           parse_mode: "HTML",
//           reply_markup: keyboard
//         }
//       );

//     } catch (error) {
//       console.error('Crypto Pay error:', error);
//       await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Crypto Pay.');
//     }
//   });

//   // ================= 13. –ü–†–û–í–ï–†–ö–ê CRYPTO PAY –ü–õ–ê–¢–ï–ñ–ê =================
//   bot.action(/check_crypto_(.+)/, async (ctx) => {
//     const paymentId = ctx.match[1];

//     try {
//       await ctx.answerCbQuery('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂...');

//       const paymentDoc = await db.collection('cryptoPayPayments').doc(paymentId).get();

//       if (!paymentDoc.exists) {
//         await ctx.answerCbQuery('‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω');
//         return;
//       }

//       const payment = paymentDoc.data();

//       if (payment.userId !== ctx.from.id) {
//         await ctx.answerCbQuery('‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –ø–ª–∞—Ç–µ–∂');
//         return;
//       }

//       let invoice;
//       try {
//         invoice = await cryptoPay.getInvoice(payment.invoiceId);
//       } catch (error) {
//         console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞:', error);
//         await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—á–µ—Ç–∞');
//         return;
//       }

//       if (!invoice) {
//         await ctx.answerCbQuery('‚ùå –°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫');
//         return;
//       }

//       console.log(`–°—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞ ${payment.invoiceId}:`, invoice.status);

//       if (invoice.status === 'paid') {
//         const planId = payment.plan;
//         const subRef = db.collection("subscriptions").doc(ctx.from.id.toString());
//         const subData = {
//           userId: ctx.from.id,
//           plan: planId,
//           subscriptionType: planId,
//           startDate: admin.firestore.FieldValue.serverTimestamp(),
//           status: "active",
//           isActive: true,
//           lastUpdated: admin.firestore.FieldValue.serverTimestamp(),
//           paymentMethod: 'crypto'
//         };

//         if (planId === "1day") {
//           subData.endDate = admin.firestore.Timestamp.fromDate(new Date(Date.now() + 86400000));
//         } else if (planId === "1month") {
//           subData.endDate = admin.firestore.Timestamp.fromDate(new Date(Date.now() + 2592000000));
//         } else if (planId === "forever") {
//           subData.endDate = admin.firestore.Timestamp.fromDate(new Date(Date.now() + 365 * 86400000));
//         }

//         await subRef.set(subData, { merge: true });
//         await paymentDoc.ref.update({
//           status: 'paid',
//           paidAt: admin.firestore.FieldValue.serverTimestamp()
//         });

//         const subscription = await checkSubscription(ctx.from.id);
//         const keyboard = {
//           inline_keyboard: [
//             [{ text: "üåç –í—Å–µ —Å—Ç—Ä–∞–Ω—ã", callback_data: "all_countries" }],
//             [{ text: "üßπ –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω", callback_data: "clear_screen" }]
//           ]
//         };

//         await ctx.reply(
//           `üéâ <b>–ü–õ–ê–¢–ï–ñ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù!</b>\n\n` +
//           `‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n` +
//           `${subscription.message}`,
//           {
//             parse_mode: "HTML",
//             reply_markup: keyboard,
//           }
//         );
//       } else {
//         let statusText = '–Ω–µ –æ–ø–ª–∞—á–µ–Ω';
//         if (invoice.status === 'active') statusText = '–æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã';
//         if (invoice.status === 'expired') statusText = '–∏—Å—Ç–µ–∫';

//         await ctx.answerCbQuery(`‚ùå –°—á–µ—Ç ${statusText}. –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.`);
//       }

//     } catch (error) {
//       console.error('Payment check error:', error);
//       await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞');
//     }
//   });

//   // ================= 14. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–û–î–ü–ò–°–û–ö STARS =================
//   const handleSubscriptionPurchase = async (ctx, planId, amount, duration) => {
//     try {
//       await ctx.replyWithInvoice({
//         title: `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${
//           planId === "1day"
//             ? "1 –¥–µ–Ω—å"
//             : planId === "1month"
//             ? "1 –º–µ—Å—è—Ü"
//             : "1 –≥–æ–¥"
//         }`,
//         description:
//           planId === "1day"
//             ? "–î–æ—Å—Ç—É–ø –Ω–∞ 24 —á–∞—Å–∞"
//             : planId === "1month"
//             ? "–î–æ—Å—Ç—É–ø –Ω–∞ 30 –¥–Ω–µ–π"
//             : "–î–æ—Å—Ç—É–ø –Ω–∞ 365 –¥–Ω–µ–π",
//         payload: `${planId}_${ctx.from.id}_${Date.now()}`,
//         currency: "XTR",
//         prices: [{ label: "–ü–æ–¥–ø–∏—Å–∫–∞", amount: amount }],
//         start_parameter: `${planId}_sub`,
//       });
//     } catch (error) {
//       console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞:", error);
//       await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞");
//     }
//   };

//   bot.action("buy_1day", (ctx) =>
//     handleSubscriptionPurchase(ctx, "1day", 399, 86400000)
//   );
//   bot.action("buy_1month", (ctx) =>
//     handleSubscriptionPurchase(ctx, "1month", 799, 2592000000)
//   );
//   bot.action("buy_forever", (ctx) =>
//     handleSubscriptionPurchase(ctx, "forever", 3999, 31536000000)
//   );

//   bot.on("pre_checkout_query", (ctx) => ctx.answerPreCheckoutQuery(true));

//   bot.on("successful_payment", async (ctx) => {
//     const userId = ctx.from.id;
//     const payment = ctx.message.successful_payment;
//     const [planId, _] = payment.invoice_payload.split("_");

//     try {
//       await clearChat(ctx);

//       const subRef = db.collection("subscriptions").doc(userId.toString());
//       const subData = {
//         userId,
//         plan: planId,
//         subscriptionType: planId,
//         startDate: admin.firestore.FieldValue.serverTimestamp(),
//         status: "active",
//         isActive: true,
//         lastUpdated: admin.firestore.FieldValue.serverTimestamp(),
//         paymentMethod: 'stars'
//       };

//       if (planId === "1day") {
//         subData.endDate = admin.firestore.Timestamp.fromDate(
//           new Date(Date.now() + 86400000)
//         );
//       } else if (planId === "1month") {
//         subData.endDate = admin.firestore.Timestamp.fromDate(
//           new Date(Date.now() + 2592000000)
//         );
//       } else if (planId === "forever") {
//         subData.endDate = admin.firestore.Timestamp.fromDate(
//           new Date(Date.now() + 31536000000)
//         );
//       }

//       await subRef.set(subData, { merge: true });

//       const subscription = await checkSubscription(userId);
//       const keyboard = {
//         inline_keyboard: [
//           [{ text: "üåç –í—Å–µ —Å—Ç—Ä–∞–Ω—ã", callback_data: "all_countries" }],
//           [{ text: "üßπ –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω", callback_data: "clear_screen" }]
//         ]
//       };

//       await ctx.reply(
//         `‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n${subscription.message}`,
//         {
//           parse_mode: "HTML",
//           reply_markup: keyboard,
//         }
//       );
//     } catch (error) {
//       console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞:", error);
//       await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏");
//     }
//   });

//   // ================= 15. –ù–ê–ó–ê–î –í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ =================
//   bot.action("back_to_main", async (ctx) => {
//     await showMainMenu(ctx);
//   });
// };

const admin = require("firebase-admin");
const fs = require("fs");
const path = require("path");
const CryptoPayHandler = require("./cryptoPay");

module.exports = (bot, db) => {
  // ================= 1. –ü–†–ï–î–ó–ê–ì–†–£–ó–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø =================
  const welcomeImage = {
    path: path.join(__dirname, "../../img/welcome.jpg"),
    buffer: null,
    fileId: null,
    load: function () {
      if (fs.existsSync(this.path)) {
        this.buffer = fs.readFileSync(this.path);
        console.log("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ welcome.jpg –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å");
      }
    },
  };
  welcomeImage.load();

  const cryptoPay = new CryptoPayHandler(bot, db);

  // ================= 2. –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –ü–û–î–ü–ò–°–ö–ò =================
  const checkSubscription = async (userId) => {
    try {
      const subRef = db.collection("subscriptions").doc(userId.toString());
      const doc = await subRef.get();

      if (!doc.exists) {
        return {
          active: false,
          message: "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏",
        };
      }

      const subData = doc.data();
      const isActive =
        subData.isActive && subData.endDate.toDate() > new Date();

      let message = "";
      if (isActive) {
        const endDate = subData.endDate.toDate();
        const daysLeft = Math.ceil(
          (endDate - new Date()) / (1000 * 60 * 60 * 24)
        );

        if (subData.subscriptionType === "forever") {
          message = "üéâ –£ –≤–∞—Å –±–µ—Å—Å—Ä–æ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!";
        } else {
          message = `‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: ${endDate.toLocaleDateString()} (–æ—Å—Ç–∞–ª–æ—Å—å ${daysLeft} –¥–Ω–µ–π)`;
        }
      } else {
        message = "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞";
      }

      return {
        active: isActive,
        message: message,
        subscription: subData,
      };
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:", error);
      return {
        active: false,
        message: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏",
      };
    }
  };

  // ================= 3. –§–£–ù–ö–¶–ò–Ø –û–ß–ò–°–¢–ö–ò –ß–ê–¢–ê =================
  const clearChat = async (ctx) => {
    try {
      const chatId = ctx.chat.id;
      const messageId = ctx.message
        ? ctx.message.message_id
        : ctx.update.callback_query.message.message_id;

      // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.deleteMessage();

      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–æ 10 —à—Ç—É–∫)
      for (let i = 1; i <= 10; i++) {
        try {
          await ctx.telegram.deleteMessage(chatId, messageId - i);
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ (—Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–≥—É—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å)
        }
      }

      return true;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —á–∞—Ç–∞:", error);
      return false;
    }
  };

  // ================= 4. –§–£–ù–ö–¶–ò–Ø –û–ß–ò–°–¢–ö–ò –≠–ö–†–ê–ù–ê =================
  const clearScreen = async (ctx) => {
    try {
      await clearChat(ctx);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      const userId = ctx.from.id;
      const subscription = await checkSubscription(userId);
      const hasSub = subscription.active;

      const baseKeyboard = [];

      if (hasSub) {
        baseKeyboard.push([
          { text: "üåç –í—Å–µ —Å—Ç—Ä–∞–Ω—ã", callback_data: "all_countries" },
        ]);
      }
if (!hasSub) {
baseKeyboard.push([
        { text: "üåç –í—Å–µ —Å—Ç—Ä–∞–Ω—ã", callback_data: "choose_payment_method" },
      ]);}

      baseKeyboard.push([
        { text: "üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: "choose_payment_method" },
      ]);
      baseKeyboard.push([
        { text: "üßπ –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω", callback_data: "clear_screen" },
      ]);

      const welcomeText = `üëã<b> –ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}!
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–±  ‚ú®Magic</b> 
<em>–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å –∫–∞—Ç–∞–ª–æ–≥ –∞–Ω–∫–µ—Ç —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è, —Ñ–ª–∏—Ä—Ç–∞ –∏ —Å–µ—Ä—å—ë–∑–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π.
üéâ –ö–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –≤—Å–µ–≥–¥–∞ —Å–≤–µ–∂–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏!
–ù–∞—á–Ω–∏ –ø–æ–∏—Å–∫ –∏–ª–∏ —Ä–∞–∑–º–µ—Å—Ç–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —Ç–≤–æ—è –≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∫–∞ —É–∂–µ –∑–¥–µ—Å—å!</em>\n
<a href="http://t.me/escortnotebook"><b>–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ‚ù§Ô∏è</b></a>\n`;

      try {
        if (welcomeImage.fileId) {
          await ctx.replyWithPhoto(welcomeImage.fileId, {
            caption: welcomeText,
            parse_mode: "HTML",
            reply_markup: { inline_keyboard: baseKeyboard },
          });
        } else if (welcomeImage.buffer) {
          const msg = await ctx.replyWithPhoto(
            { source: welcomeImage.buffer },
            {
              caption: welcomeText,
              parse_mode: "HTML",
              reply_markup: { inline_keyboard: baseKeyboard },
            }
          );
          welcomeImage.fileId = msg.photo[0].file_id;
        } else {
          await ctx.reply(welcomeText, {
            parse_mode: "HTML",
            reply_markup: { inline_keyboard: baseKeyboard },
          });
        }
      } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ welcome:", e);
        await ctx.reply(welcomeText, {
          parse_mode: "HTML",
          reply_markup: { inline_keyboard: baseKeyboard },
        });
      }

      if (hasSub) {
        setTimeout(async () => {
          try {
            await ctx.reply(subscription.message, { parse_mode: "HTML" });
          } catch (e) {
            console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏:", e);
          }
        }, 500);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —ç–∫—Ä–∞–Ω–∞:", error);
      // –ï—Å–ª–∏ –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      await showMainMenu(ctx);
    }
  };

  // ================= 5. –§–£–ù–ö–¶–ò–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ =================
  const showMainMenu = async (ctx) => {
    const userId = ctx.from.id;
    const subscription = await checkSubscription(userId);
    const hasSub = subscription.active;

    const baseKeyboard = [];

    if (hasSub) {
      baseKeyboard.push([
        { text: "üåç –í—Å–µ —Å—Ç—Ä–∞–Ω—ã", callback_data: "all_countries" },
      ]);
    }
    if (!hasSub) {
baseKeyboard.push([
        { text: "üåç –í—Å–µ —Å—Ç—Ä–∞–Ω—ã", callback_data: "choose_payment_method" },
      ]);}
    baseKeyboard.push([
      { text: "üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: "choose_payment_method" },
    ]);
    baseKeyboard.push([
      { text: "üßπ –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω", callback_data: "clear_screen" },
    ]);

    const welcomeText = `üëã<b> –ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}!
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–± –∑–Ω–∞–∫–æ–º—Å—Ç–≤ ‚ú®Magic!</b> 
<em>–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏ –Ω–µ —Ç–æ–ª—å–∫–æ. 
üóÑÔ∏è –ë–∞–∑–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∏ –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –≤—Å–µ–≥–¥–∞ —Å–≤–µ–∂–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏!
–ù–∞—á–Ω–∏ –ø–æ–∏—Å–∫ –∏–ª–∏ —Ä–∞–∑–º–µ—Å—Ç–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —Ç–≤–æ—è –≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∫–∞ —É–∂–µ –∑–¥–µ—Å—å!</em>\n
<a href="http://magicsuperboss"><b>–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ‚ù§Ô∏è</b></a>\n`;

    try {
      if (welcomeImage.fileId) {
        await ctx.replyWithPhoto(welcomeImage.fileId, {
          caption: welcomeText,
          parse_mode: "HTML",
          reply_markup: { inline_keyboard: baseKeyboard },
        });
      } else if (welcomeImage.buffer) {
        const msg = await ctx.replyWithPhoto(
          { source: welcomeImage.buffer },
          {
            caption: welcomeText,
            parse_mode: "HTML",
            reply_markup: { inline_keyboard: baseKeyboard },
          }
        );
        welcomeImage.fileId = msg.photo[0].file_id;
      } else {
        await ctx.reply(welcomeText, {
          parse_mode: "HTML",
          reply_markup: { inline_keyboard: baseKeyboard },
        });
      }
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ welcome:", e);
      await ctx.reply(welcomeText, {
        parse_mode: "HTML",
        reply_markup: { inline_keyboard: baseKeyboard },
      });
    }

    if (hasSub) {
      setTimeout(async () => {
        try {
          await ctx.reply(subscription.message, { parse_mode: "HTML" });
        } catch (e) {
          console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏:", e);
        }
      }, 500);
    }
  };

  // ================= 6. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–û–õ–õ–ï–ö–¶–ò–ô =================
  const initCollections = async () => {
    const collections = [
      "subscriptions",
      "transactions",
      "payment_logs",
      "cryptoPayPayments",
    ];
    for (const col of collections) {
      try {
        const ref = db.collection(col).doc("init");
        await ref.set({ _init: true });
        await ref.delete();
      } catch (error) {
        console.log(`–ö–æ–ª–ª–µ–∫—Ü–∏—è ${col} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      }
    }
  };

  // ================= 7. –û–ë–†–ê–ë–û–¢–ß–ò–ö START =================
  bot.start(async (ctx) => {
    initCollections().catch((e) => console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", e));
    await showMainMenu(ctx);
  });

  // ================= 8. –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–ß–ò–°–¢–ö–ò –≠–ö–†–ê–ù–ê =================
  bot.action("clear_screen", async (ctx) => {
    await clearScreen(ctx);
  });

  // ================= 9. –í–´–ë–û–† –°–ü–û–°–û–ë–ê –û–ü–õ–ê–¢–´ =================
  bot.action("choose_payment_method", async (ctx) => {
    const keyboard = {
      inline_keyboard: [
        [
          {
            text: "‚≠ê –û–ø–ª–∞—Ç–∞ Stars",
            callback_data: "show_stars_plans",
          },
        ],
        [
          {
            text: "üí≤ –û–ø–ª–∞—Ç–∞ USDT ",
            callback_data: "show_crypto_plans",
          },
        ],
        [
          {
            text: "üíé –û–ø–ª–∞—Ç–∞ TON",
            callback_data: "show_ton_plans",
          },
        ],
        [
          {
            text: "üîô –ù–∞–∑–∞–¥",
            callback_data: "back_to_main",
          },
          {
            text: "üßπ –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω",
            callback_data: "clear_screen",
          },
        ],
      ],
    };

    await ctx.reply(
      `üíé <b>–í–´–ë–ï–†–ò –°–ü–û–°–û–ë –û–ü–õ–ê–¢–´</b>\n\n` +
        `‚≠ê <b>Stars</b> - –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram\n` +
        `‚Ä¢ –ë—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ\n` +
        `‚Ä¢ –í–Ω—É—Ç—Ä–∏ Telegram\n\n` +
        ` üí≤ <b>USDT </b> - –æ–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π\n` +
        `‚Ä¢ –ê–Ω–æ–Ω–∏–º–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ\n` +
        `‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ USDT, BTC, ETH\n\n` +
        `üíé <b>TON</b> - –æ–ø–ª–∞—Ç–∞ –≤ Toncoin\n` +
        `‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã\n` +
        `‚Ä¢ –ù–∏–∑–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏\n\n` +
        `<b>–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>`,
      {
        parse_mode: "HTML",
        reply_markup: keyboard,
      }
    );
  });

  // ================= 10. –¢–ê–†–ò–§–´ –î–õ–Ø STARS =================
  bot.action("show_stars_plans", async (ctx) => {
    const keyboard = {
      inline_keyboard: [
        [
          {
            text: "üî• 1 –¥–µ–Ω—å (399üåü)",
            callback_data: "buy_1day",
          },
        ],
        [
          {
            text: "‚ù§Ô∏è 1 –º–µ—Å—è—Ü (799üåü)",
            callback_data: "buy_1month",
          },
        ],
        [
          {
            text: "üí´ 1 –≥–æ–¥ (3999üåü)",
            callback_data: "buy_forever",
          },
        ],
        [
          {
            text: "üîô –ù–∞–∑–∞–¥",
            callback_data: "choose_payment_method",
          },
          {
            text: "üßπ –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω",
            callback_data: "clear_screen",
          },
        ],
      ],
    };

    await ctx.reply(
      `‚≠ê <b>–û–ü–õ–ê–¢–ê STARS</b>\n\n` +
        `–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n` +
        `üî• <b>1 –¥–µ–Ω—å</b> - 399 Stars\n` +
        `‚ù§Ô∏è <b>1 –º–µ—Å—è—Ü</b> - 799 Stars\n` +
        `üí´ <b>1 –≥–æ–¥</b> - 3999 Stars\n\n` +
        `<b>–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ:</b>`,
      {
        parse_mode: "HTML",
        reply_markup: keyboard,
      }
    );
  });

  // ================= 11. –¢–ê–†–ò–§–´ –î–õ–Ø CRYPTO PAY =================
  bot.action("show_crypto_plans", async (ctx) => {
    const keyboard = {
      inline_keyboard: [
        [
          {
            text: "üü¢ 1 –¥–µ–Ω—å - 5 USDT",
            callback_data: "crypto_basic",
          },
        ],
        [
          {
            text: "üîµ 1 –º–µ—Å—è—Ü - 10 USDT",
            callback_data: "crypto_pro",
          },
        ],
        [
          {
            text: "üü£ 1 –≥–æ–¥ - 50 USDT",
            callback_data: "crypto_premium",
          },
        ],
        [
          {
            text: "üîô –ù–∞–∑–∞–¥",
            callback_data: "choose_payment_method",
          },
          {
            text: "üßπ –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω",
            callback_data: "clear_screen",
          },
        ],
      ],
    };

    await ctx.reply(
      ` <b>–û–ü–õ–ê–¢–ê USDT )</b>\n\n` +
        `–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n` +
        `üü¢ <b>1 –¥–µ–Ω—å</b> - 5 USDT\n` +
        `üîµ <b>1 –º–µ—Å—è—Ü</b> - 10 USDT\n` +
        `üü£ <b>1 –≥–æ–¥</b> - 50 USDT\n\n` +
        `<b>–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ:</b>`,
      {
        parse_mode: "HTML",
        reply_markup: keyboard,
      }
    );
  });

  // ================= 12. –¢–ê–†–ò–§–´ –î–õ–Ø TON =================
  bot.action("show_ton_plans", async (ctx) => {
    const keyboard = {
      inline_keyboard: [
        [
          {
            text: "üü° 1 –¥–µ–Ω—å - 1.5 TON",
            callback_data: "ton_basic",
          },
        ],
        [
          {
            text: "üü† 1 –º–µ—Å—è—Ü - 3.5 TON",
            callback_data: "ton_pro",
          },
        ],
        [
          {
            text: "üî¥ 1 –≥–æ–¥ - 15 TON",
            callback_data: "ton_premium",
          },
        ],
        [
          {
            text: "üîô –ù–∞–∑–∞–¥",
            callback_data: "choose_payment_method",
          },
          {
            text: "üßπ –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω",
            callback_data: "clear_screen",
          },
        ],
      ],
    };

    await ctx.reply(
      `üíé <b>–û–ü–õ–ê–¢–ê TON</b>\n\n` +
        `–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n` +
        `üü° <b>1 –¥–µ–Ω—å</b> - 1.5 TON\n` +
        `üü† <b>1 –º–µ—Å—è—Ü</b> - 3.5 TON\n` +
        `üî¥ <b>1 –≥–æ–¥</b> - 15 TON\n\n` +
        `<b>–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ:</b>`,
      {
        parse_mode: "HTML",
        reply_markup: keyboard,
      }
    );
  });

  // ================= 13. –û–ë–†–ê–ë–û–¢–ö–ê CRYPTO PAY –ü–õ–ê–¢–ï–ñ–ï–ô =================
  bot.action(/crypto_(.+)/, async (ctx) => {
    const plan = ctx.match[1];
    let planData;

    if (plan === "basic") {
      planData = { amount: 5, name: "1 –¥–µ–Ω—å", duration: 1, asset: "USDT" };
    } else if (plan === "pro") {
      planData = { amount: 10, name: "1 –º–µ—Å—è—Ü", duration: 30, asset: "USDT" };
    } else if (plan === "premium") {
      planData = { amount: 50, name: "1 –≥–æ–¥", duration: 365, asset: "USDT" };
    } else {
      await ctx.reply("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ");
      return;
    }

    try {
      console.log(
        `–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –ø–ª–∞–Ω–∞: ${plan}, —Å—É–º–º–∞: ${planData.amount} ${planData.asset}`
      );

      const invoice = await cryptoPay.createInvoice(
        planData.amount,
        `–ü–æ–¥–ø–∏—Å–∫–∞: ${planData.name}`
      );

      if (!invoice || !invoice.invoice_id) {
        console.error("–ò–Ω–≤–æ–π—Å –Ω–µ —Å–æ–∑–¥–∞–Ω:", invoice);
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.");
        return;
      }

      console.log("–ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:", invoice);

      const paymentData = {
        userId: ctx.from.id,
        plan: plan === "basic" ? "1day" : plan === "pro" ? "1month" : "forever",
        invoiceId: invoice.invoice_id,
        amount: planData.amount,
        asset: planData.asset,
        status: "active",
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        expiresAt: new Date(Date.now() + 3600 * 1000),
      };

      const paymentRef = await db
        .collection("cryptoPayPayments")
        .add(paymentData);

      const keyboard = {
        inline_keyboard: [
          [
            {
              text: "üí≥ –û–ü–õ–ê–¢–ò–¢–¨ –í @CryptoBot",
              url: `https://t.me/CryptoBot?start=${invoice.hash}`,
            },
          ],
          [
            {
              text: "‚úÖ –Ø –û–ü–õ–ê–¢–ò–õ",
              callback_data: `check_crypto_${paymentRef.id}`,
            },
          ],
          [
            {
              text: "üîô –ù–ê–ó–ê–î",
              callback_data: "show_crypto_plans",
            },
            {
              text: "üßπ –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω",
              callback_data: "clear_screen",
            },
          ],
        ],
      };

      await ctx.reply(
        `üíé <b>${planData.name}</b>\n` +
          `üí≤ <b>–û–ü–õ–ê–¢–ê –ß–ï–†–ï–ó CRYPTO PAY</b>\n\n` +
          `üí∞ <b>–°—É–º–º–∞:</b> ${planData.amount} ${planData.asset}\n` +
          `‚è∞ <b>–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É:</b> 1 —á–∞—Å\n\n` +
          `üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n` +
          `1. –ù–∞–∂–º–∏ "–û–ü–õ–ê–¢–ò–¢–¨ –í @CryptoBot"\n` +
          `2. –û–ø–ª–∞—Ç–∏ —Å—á–µ—Ç –≤ –±–æ—Ç–µ @CryptoBot\n` +
          `3. –í–µ—Ä–Ω–∏—Å—å –∏ –Ω–∞–∂–º–∏ "–Ø –û–ü–õ–ê–¢–ò–õ"\n\n` +
          `üÜî <b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>${paymentRef.id}</code>\n` +
          `üÜî <b>ID —Å—á–µ—Ç–∞:</b> <code>${invoice.invoice_id}</code>`,
        {
          parse_mode: "HTML",
          reply_markup: keyboard,
        }
      );
    } catch (error) {
      console.error("Crypto Pay error:", error);
      await ctx.reply(
        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Crypto Pay."
      );
    }
  });

  // ================= 14. –û–ë–†–ê–ë–û–¢–ö–ê TON –ü–õ–ê–¢–ï–ñ–ï–ô =================
  bot.action(/ton_(.+)/, async (ctx) => {
    const plan = ctx.match[1];
    let planData;

    if (plan === "basic") {
      planData = { amount: 1.5, name: "1 –¥–µ–Ω—å", duration: 1, asset: "TON" };
    } else if (plan === "pro") {
      planData = { amount: 3.5, name: "1 –º–µ—Å—è—Ü", duration: 30, asset: "TON" };
    } else if (plan === "premium") {
      planData = { amount: 15, name: "1 –≥–æ–¥", duration: 365, asset: "TON" };
    } else {
      await ctx.reply("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ");
      return;
    }

    try {
      console.log(
        `–°–æ–∑–¥–∞–Ω–∏–µ TON –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –ø–ª–∞–Ω–∞: ${plan}, —Å—É–º–º–∞: ${planData.amount} ${planData.asset}`
      );

      const invoice = await cryptoPay.createInvoice(
        planData.amount,
        `–ü–æ–¥–ø–∏—Å–∫–∞: ${planData.name}`,
        "TON"
      );

      if (!invoice || !invoice.invoice_id) {
        console.error("TON –∏–Ω–≤–æ–π—Å –Ω–µ —Å–æ–∑–¥–∞–Ω:", invoice);
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.");
        return;
      }

      console.log("TON –∏–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:", invoice);

      const paymentData = {
        userId: ctx.from.id,
        plan: plan === "basic" ? "1day" : plan === "pro" ? "1month" : "forever",
        invoiceId: invoice.invoice_id,
        amount: planData.amount,
        asset: planData.asset,
        status: "active",
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        expiresAt: new Date(Date.now() + 3600 * 1000),
      };

      const paymentRef = await db
        .collection("cryptoPayPayments")
        .add(paymentData);

      const keyboard = {
        inline_keyboard: [
          [
            {
              text: "üí≥ –û–ü–õ–ê–¢–ò–¢–¨ –í @CryptoBot",
              url: `https://t.me/CryptoBot?start=${invoice.hash}`,
            },
          ],
          [
            {
              text: "‚úÖ –Ø –û–ü–õ–ê–¢–ò–õ",
              callback_data: `check_crypto_${paymentRef.id}`,
            },
          ],
          [
            {
              text: "üîô –ù–ê–ó–ê–î",
              callback_data: "show_ton_plans",
            },
            {
              text: "üßπ –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω",
              callback_data: "clear_screen",
            },
          ],
        ],
      };

      await ctx.reply(
        `üíé <b>${planData.name}</b>\n` +
          `üíé <b>–û–ü–õ–ê–¢–ê TON</b>\n\n` +
          `üí∞ <b>–°—É–º–º–∞:</b> ${planData.amount} ${planData.asset}\n` +
          `‚è∞ <b>–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É:</b> 1 —á–∞—Å\n\n` +
          `üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n` +
          `1. –ù–∞–∂–º–∏ "–û–ü–õ–ê–¢–ò–¢–¨ –í @CryptoBot"\n` +
          `2. –û–ø–ª–∞—Ç–∏ —Å—á–µ—Ç –≤ –±–æ—Ç–µ @CryptoBot\n` +
          `3. –í–µ—Ä–Ω–∏—Å—å –∏ –Ω–∞–∂–º–∏ "–Ø –û–ü–õ–ê–¢–ò–õ"\n\n` +
          `üÜî <b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>${paymentRef.id}</code>\n` +
          `üÜî <b>ID —Å—á–µ—Ç–∞:</b> <code>${invoice.invoice_id}</code>`,
        {
          parse_mode: "HTML",
          reply_markup: keyboard,
        }
      );
    } catch (error) {
      console.error("TON Pay error:", error);
      await ctx.reply(
        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Crypto Pay."
      );
    }
  });

  // ================= 15. –ü–†–û–í–ï–†–ö–ê CRYPTO PAY –ü–õ–ê–¢–ï–ñ–ê =================
  bot.action(/check_crypto_(.+)/, async (ctx) => {
    const paymentId = ctx.match[1];

    try {
      await ctx.answerCbQuery("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂...");

      const paymentDoc = await db
        .collection("cryptoPayPayments")
        .doc(paymentId)
        .get();

      if (!paymentDoc.exists) {
        await ctx.answerCbQuery("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }

      const payment = paymentDoc.data();

      if (payment.userId !== ctx.from.id) {
        await ctx.answerCbQuery("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –ø–ª–∞—Ç–µ–∂");
        return;
      }

      let invoice;
      try {
        invoice = await cryptoPay.getInvoice(payment.invoiceId);
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞:", error);
        await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—á–µ—Ç–∞");
        return;
      }

      if (!invoice) {
        await ctx.answerCbQuery("‚ùå –°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫");
        return;
      }

      console.log(`–°—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞ ${payment.invoiceId}:`, invoice.status);

      if (invoice.status === "paid") {
        const planId = payment.plan;
        const subRef = db
          .collection("subscriptions")
          .doc(ctx.from.id.toString());
        const subData = {
          userId: ctx.from.id,
          plan: planId,
          subscriptionType: planId,
          startDate: admin.firestore.FieldValue.serverTimestamp(),
          status: "active",
          isActive: true,
          lastUpdated: admin.firestore.FieldValue.serverTimestamp(),
          paymentMethod: payment.asset === "TON" ? "ton" : "crypto",
        };

        if (planId === "1day") {
          subData.endDate = admin.firestore.Timestamp.fromDate(
            new Date(Date.now() + 86400000)
          );
        } else if (planId === "1month") {
          subData.endDate = admin.firestore.Timestamp.fromDate(
            new Date(Date.now() + 2592000000)
          );
        } else if (planId === "forever") {
          subData.endDate = admin.firestore.Timestamp.fromDate(
            new Date(Date.now() + 365 * 86400000)
          );
        }

        await subRef.set(subData, { merge: true });
        await paymentDoc.ref.update({
          status: "paid",
          paidAt: admin.firestore.FieldValue.serverTimestamp(),
        });

        const subscription = await checkSubscription(ctx.from.id);
        const keyboard = {
          inline_keyboard: [
            [{ text: "üåç –í—Å–µ —Å—Ç—Ä–∞–Ω—ã", callback_data: "all_countries" }],
            [{ text: "üßπ –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω", callback_data: "clear_screen" }],
          ],
        };

        await ctx.reply(
          `üéâ <b>–ü–õ–ê–¢–ï–ñ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù!</b>\n\n` +
            `‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n` +
            `${subscription.message}`,
          {
            parse_mode: "HTML",
            reply_markup: keyboard,
          }
        );
      } else {
        let statusText = "–Ω–µ –æ–ø–ª–∞—á–µ–Ω";
        if (invoice.status === "active") statusText = "–æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã";
        if (invoice.status === "expired") statusText = "–∏—Å—Ç–µ–∫";

        await ctx.answerCbQuery(
          `‚ùå –°—á–µ—Ç ${statusText}. –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.`
        );
      }
    } catch (error) {
      console.error("Payment check error:", error);
      await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞");
    }
  });

  // ================= 16. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–û–î–ü–ò–°–û–ö STARS =================
  const handleSubscriptionPurchase = async (ctx, planId, amount, duration) => {
    try {
      await ctx.replyWithInvoice({
        title: `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${
          planId === "1day"
            ? "1 –¥–µ–Ω—å"
            : planId === "1month"
            ? "1 –º–µ—Å—è—Ü"
            : "1 –≥–æ–¥"
        }`,
        description:
          planId === "1day"
            ? "–î–æ—Å—Ç—É–ø –Ω–∞ 24 —á–∞—Å–∞"
            : planId === "1month"
            ? "–î–æ—Å—Ç—É–ø –Ω–∞ 30 –¥–Ω–µ–π"
            : "–î–æ—Å—Ç—É–ø –Ω–∞ 365 –¥–Ω–µ–π",
        payload: `${planId}_${ctx.from.id}_${Date.now()}`,
        currency: "XTR",
        prices: [{ label: "–ü–æ–¥–ø–∏—Å–∫–∞", amount: amount }],
        start_parameter: `${planId}_sub`,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞:", error);
      await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞");
    }
  };

  bot.action("buy_1day", (ctx) =>
    handleSubscriptionPurchase(ctx, "1day", 399, 86400000)
  );
  bot.action("buy_1month", (ctx) =>
    handleSubscriptionPurchase(ctx, "1month", 799, 2592000000)
  );
  bot.action("buy_forever", (ctx) =>
    handleSubscriptionPurchase(ctx, "forever", 3999, 31536000000)
  );

  bot.on("pre_checkout_query", (ctx) => ctx.answerPreCheckoutQuery(true));

  bot.on("successful_payment", async (ctx) => {
    const userId = ctx.from.id;
    const payment = ctx.message.successful_payment;
    const [planId, _] = payment.invoice_payload.split("_");

    try {
      await clearChat(ctx);

      const subRef = db.collection("subscriptions").doc(userId.toString());
      const subData = {
        userId,
        plan: planId,
        subscriptionType: planId,
        startDate: admin.firestore.FieldValue.serverTimestamp(),
        status: "active",
        isActive: true,
        lastUpdated: admin.firestore.FieldValue.serverTimestamp(),
        paymentMethod: "stars",
      };

      if (planId === "1day") {
        subData.endDate = admin.firestore.Timestamp.fromDate(
          new Date(Date.now() + 86400000)
        );
      } else if (planId === "1month") {
        subData.endDate = admin.firestore.Timestamp.fromDate(
          new Date(Date.now() + 2592000000)
        );
      } else if (planId === "forever") {
        subData.endDate = admin.firestore.Timestamp.fromDate(
          new Date(Date.now() + 31536000000)
        );
      }

      await subRef.set(subData, { merge: true });

      const subscription = await checkSubscription(userId);
      const keyboard = {
        inline_keyboard: [
          [{ text: "üåç –í—Å–µ —Å—Ç—Ä–∞–Ω—ã", callback_data: "all_countries" }],
          [{ text: "üßπ –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω", callback_data: "clear_screen" }],
        ],
      };

      await ctx.reply(
        `‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n${subscription.message}`,
        {
          parse_mode: "HTML",
          reply_markup: keyboard,
        }
      );
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞:", error);
      await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏");
    }
  });

  // ================= 17. –ù–ê–ó–ê–î –í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ =================
  bot.action("back_to_main", async (ctx) => {
    await showMainMenu(ctx);
  });
};
