
// const admin = require('firebase-admin');

// module.exports = (bot, db) => {
//   // 1. –ñ–µ—Å—Ç–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π
//   const initCollections = async () => {
//     const requiredCollections = [
//       'usersPay',
//       'payments',
//       'subscriptions',
//       'payment_logs',
//       'transactions'
//     ];

//     for (const colName of requiredCollections) {
//       try {
//         // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø–æ–ø—ã—Ç–∫—É –∑–∞–ø–∏—Å–∏
//         const docRef = db.collection(colName).doc('init_check');
//         await docRef.set({
//           _init: true,
//           timestamp: admin.firestore.FieldValue.serverTimestamp()
//         });
//         await docRef.delete();
//         console.log(`[Firebase] –ö–æ–ª–ª–µ–∫—Ü–∏—è ${colName} –¥–æ—Å—Ç—É–ø–Ω–∞`);
//       } catch (error) {
//         console.error(`[Firebase] –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ ${colName}:`, error);
//         // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
//         const tempDoc = await db.collection(colName).add({
//           _created: true,
//           timestamp: admin.firestore.FieldValue.serverTimestamp()
//         });
//         await tempDoc.delete();
//         console.log(`[Firebase] –ö–æ–ª–ª–µ–∫—Ü–∏—è ${colName} —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ`);
//       }
//     }
//   };

//   // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
//   initCollections().catch(console.error);

//   // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
//   const ensureUser = async (userId) => {
//     const userRef = db.collection('usersPay').doc(userId.toString());
//     try {
//       await db.runTransaction(async (t) => {
//         const doc = await t.get(userRef);
//         if (!doc.exists) {
//           t.set(userRef, {
//             balance: 1000, // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
//             reserved: 0,
//             createdAt: admin.firestore.FieldValue.serverTimestamp(),
//             lastUpdated: admin.firestore.FieldValue.serverTimestamp()
//           });
//           console.log(`[User] –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º`);
//         }
//       });
//       return userRef;
//     } catch (error) {
//       console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
//       throw error;
//     }
//   };

//   // 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /buy
//   bot.command('buy', async (ctx) => {
//     try {
//       const userId = ctx.from.id;
//       const userRef = await ensureUser(userId);
//       const userDoc = await userRef.get();
//       const balance = userDoc.data().balance || 0;

//       const plans = [
//         { id: '1day', name: "1 –¥–µ–Ω—å", price: 1, duration: 86400000 },
//         { id: '1month', name: "1 –º–µ—Å—è—Ü", price: 2000, duration: 2592000000 }
//       ];

//       await ctx.reply(`üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å: ${balance}üåü</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:`, {
//         parse_mode: 'HTML',
//         reply_markup: {
//           inline_keyboard: plans.map(p => [
//             { 
//               text: `${p.name} - ${p.price}üåü`, 
//               callback_data: `start_pay_${p.id}`
//             }
//           ])
//         }
//       });

//     } catch (error) {
//       console.error('Buy command error:', error);
//       await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é');
//     }
//   });

//   // 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –ø–ª–∞—Ç–µ–∂–∞
//   bot.action(/start_pay_(.+)/, async (ctx) => {
//     const userId = ctx.from.id;
//     const planId = ctx.match[1];
    
//     try {
//       const plan = {
//         '1day': { price: 1, name: "1 –¥–µ–Ω—å", duration: 86400000 },
//         '1month': { price: 2000, name: "1 –º–µ—Å—è—Ü", duration: 2592000000 }
//       }[planId];

//       if (!plan) throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ');

//       const userRef = db.collection('usersPay').doc(userId.toString());
//       const txRef = db.collection('transactions').doc();

//       // –ê—Ç–æ–º–∞—Ä–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
//       await db.runTransaction(async (t) => {
//         const userDoc = await t.get(userRef);
//         const userData = userDoc.data() || {};
//         const available = (userData.balance || 0) - (userData.reserved || 0);

//         if (available < plan.price) {
//           throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –î–æ—Å—Ç—É–ø–Ω–æ: ${available}üåü`);
//         }

//         // –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
//         t.update(userRef, {
//           reserved: admin.firestore.FieldValue.increment(plan.price),
//           lastUpdated: admin.firestore.FieldValue.serverTimestamp()
//         });

//         // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
//         t.set(txRef, {
//           userId,
//           amount: plan.price,
//           plan: planId,
//           status: 'pending',
//           createdAt: admin.firestore.FieldValue.serverTimestamp()
//         });
//       });

//       await ctx.editMessageText(
//         `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É:\n\n` +
//         `üîπ ${plan.name}\n` +
//         `üîπ ${plan.price}üåü\n\n` +
//         `–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è: ${(userDoc.data().balance || 0) - plan.price}üåü`,
//         {
//           reply_markup: {
//             inline_keyboard: [
//               [{ text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `confirm_pay_${txRef.id}` }],
//               [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `cancel_pay_${txRef.id}` }]
//             ]
//           }
//         }
//       );

//     } catch (error) {
//       console.error('Payment start error:', error);
//       await ctx.reply(`‚ö†Ô∏è –û—à–∏–±–∫–∞: ${error.message}`);
//     }
//   });

//   // 6. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
//   bot.action(/confirm_pay_(.+)/, async (ctx) => {
//     const txId = ctx.match[1];
//     const userId = ctx.from.id;
    
//     try {
//       const txRef = db.collection('transactions').doc(txId);
//       const userRef = db.collection('usersPay').doc(userId.toString());
//       const subRef = db.collection('subscriptions').doc(userId.toString());

//       await db.runTransaction(async (t) => {
//         const txDoc = await t.get(txRef);
//         if (!txDoc.exists) throw new Error('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        
//         const txData = txDoc.data();
//         if (txData.status !== 'pending') throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å');

//         const plan = {
//           '1day': { name: "1 –¥–µ–Ω—å", duration: 86400000 },
//           '1month': { name: "1 –º–µ—Å—è—Ü", duration: 2592000000 }
//         }[txData.plan];

//         // –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
//         t.update(userRef, {
//           balance: admin.firestore.FieldValue.increment(-txData.amount),
//           reserved: admin.firestore.FieldValue.increment(-txData.amount),
//           lastUpdated: admin.firestore.FieldValue.serverTimestamp()
//         });

//         // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
//         t.update(txRef, {
//           status: 'completed',
//           completedAt: admin.firestore.FieldValue.serverTimestamp()
//         });

//         // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
//         const endDate = new Date(Date.now() + plan.duration);
//         t.set(subRef, {
//           userId,
//           plan: txData.plan,
//           subscriptionType: txData.plan,
//           startDate: admin.firestore.FieldValue.serverTimestamp(),
//           endDate: admin.firestore.Timestamp.fromDate(endDate),
//           status: 'active',
//           isActive: true,
//           lastUpdated: admin.firestore.FieldValue.serverTimestamp()
//         }, { merge: true });

//         // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
//         t.set(db.collection('payments').doc(), {
//           userId,
//           amount: txData.amount,
//           plan: txData.plan,
//           status: 'completed',
//           timestamp: admin.firestore.FieldValue.serverTimestamp()
//         });
//       });

//       await ctx.editMessageText('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!');

//     } catch (error) {
//       console.error('Payment confirm error:', error);
//       await ctx.reply(`‚ö†Ô∏è –û—à–∏–±–∫–∞: ${error.message}`);
//     }
//   });

//   // 7. –û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞
//   bot.action(/cancel_pay_(.+)/, async (ctx) => {
//     const txId = ctx.match[1];
//     const userId = ctx.from.id;
    
//     try {
//       await db.runTransaction(async (t) => {
//         const txRef = db.collection('transactions').doc(txId);
//         const txDoc = await t.get(txRef);
        
//         if (txDoc.exists && txDoc.data().status === 'pending') {
//           const amount = txDoc.data().amount;
          
//           t.update(db.collection('usersPay').doc(userId.toString()), {
//             reserved: admin.firestore.FieldValue.increment(-amount),
//             lastUpdated: admin.firestore.FieldValue.serverTimestamp()
//           });
          
//           t.update(txRef, {
//             status: 'cancelled',
//             cancelledAt: admin.firestore.FieldValue.serverTimestamp()
//           });
//         }
//       });
      
//       await ctx.deleteMessage();
//       await ctx.reply('‚ÑπÔ∏è –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω');

//     } catch (error) {
//       console.error('Payment cancel error:', error);
//       await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ');
//     }
//   });

//   // 8. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π
//   bot.command('fixpay', async (ctx) => {
//     const userId = ctx.from.id;
    
//     try {
//       const pendingTxs = await db.collection('transactions')
//         .where('userId', '==', userId)
//         .where('status', '==', 'pending')
//         .where('createdAt', '<', new Date(Date.now() - 300000))
//         .get();

//       if (pendingTxs.empty) return ctx.reply('‚ÑπÔ∏è –ù–µ—Ç –∑–∞–≤–∏—Å—à–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π');

//       const batch = db.batch();
//       let restored = 0;

//       pendingTxs.forEach(doc => {
//         const amount = doc.data().amount;
//         restored += amount;
        
//         batch.update(db.collection('usersPay').doc(userId.toString()), {
//           reserved: admin.firestore.FieldValue.increment(-amount)
//         });
        
//         batch.update(doc.ref, {
//           status: 'failed',
//           failedAt: admin.firestore.FieldValue.serverTimestamp()
//         });
//       });

//       await batch.commit();
//       await ctx.reply(`‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${restored}üåü`);

//     } catch (error) {
//       console.error('Fix payments error:', error);
//       await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');
//     }
//   });
// };





const admin = require('firebase-admin');

module.exports = (bot, db) => {
  // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const ensureUser = async (userId) => {
    const userRef = db.collection('usersPay').doc(userId.toString());
    try {
      const userDoc = await userRef.get();
      
      if (!userDoc.exists) {
        await userRef.set({
          balance: 1000,    // –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å 1000üåü
          reserved: 0,
          createdAt: admin.firestore.FieldValue.serverTimestamp(),
          lastUpdated: admin.firestore.FieldValue.serverTimestamp()
        });
        console.log(`[User] –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —Å –±–∞–ª–∞–Ω—Å–æ–º 1000üåü`);
      }
      
      return userRef;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  };

  // 2. –ö–æ–º–∞–Ω–¥–∞ /buy
  bot.command('buy', async (ctx) => {
    try {
      const userId = ctx.from.id;
      const userRef = await ensureUser(userId);
      const userDoc = await userRef.get();
      const balance = userDoc.data().balance || 0;

      // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã (1 –¥–µ–Ω—å —Ç–µ–ø–µ—Ä—å –∑–∞ 1üåü)
      const plans = [
        { id: '1day', name: "1 –¥–µ–Ω—å", price: 399, duration: 86400000 }, // –ò–∑–º–µ–Ω–µ–Ω–æ —Å 300 –Ω–∞ 1
        { id: '1month', name: "1 –º–µ—Å—è—Ü", price: 799, duration: 2592000000 },
        { id: 'forever', name: "–ù–∞–≤—Å–µ–≥–¥–∞", price: 3999, duration: null }
      ];

      await ctx.reply(`üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å: ${balance}üåü</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:`, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: plans.map(p => [
            { 
              text: `${p.name} - ${p.price}üåü`, 
              callback_data: `start_pay_${p.id}`
            }
          ])
        }
      });

    } catch (error) {
      console.error('Buy command error:', error);
      await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é');
    }
  });

  // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
  bot.action(/start_pay_(.+)/, async (ctx) => {
    const userId = ctx.from.id;
    const planId = ctx.match[1];
    
    try {
      // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã (1 –¥–µ–Ω—å –∑–∞ 1üåü)
      const plan = {
        '1day': { price: 399, name: "1 –¥–µ–Ω—å", duration: 86400000 }, // –ò–∑–º–µ–Ω–µ–Ω–æ —Å 300 –Ω–∞ 1
        '1month': { price: 799, name: "1 –º–µ—Å—è—Ü", duration: 2592000000 },
        'forever': { price: 3999, name: "1 –≥–æ–¥", duration: null }
      }[planId];

      if (!plan) throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ');

      const userRef = db.collection('usersPay').doc(userId.toString());
      const txRef = db.collection('transactions').doc();

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
      const userDoc = await userRef.get();
      const userData = userDoc.data() || {};
      const available = (userData.balance || 0) - (userData.reserved || 0);

      if (available < plan.price) {
        throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –î–æ—Å—Ç—É–ø–Ω–æ: ${available}üåü`);
      }

      // –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
      await userRef.update({
        reserved: admin.firestore.FieldValue.increment(plan.price),
        lastUpdated: admin.firestore.FieldValue.serverTimestamp()
      });

      // –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      await txRef.set({
        userId,
        amount: plan.price,
        plan: planId,
        status: 'pending',
        createdAt: admin.firestore.FieldValue.serverTimestamp()
      });

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
      await ctx.editMessageText(
        `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É:\n\n` +
        `üîπ ${plan.name}\n` +
        `üîπ ${plan.price}üåü\n\n` +
        `–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è: ${(userData.balance || 0) - plan.price}üåü`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `confirm_pay_${txRef.id}` }],
              [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `cancel_pay_${txRef.id}` }]
            ]
          }
        }
      );

    } catch (error) {
      console.error('Payment start error:', error);
      await ctx.reply(`‚ö†Ô∏è –û—à–∏–±–∫–∞: ${error.message}`);
    }
  });

  // 4. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
  bot.action(/confirm_pay_(.+)/, async (ctx) => {
    const txId = ctx.match[1];
    const userId = ctx.from.id;
    
    try {
      const txRef = db.collection('transactions').doc(txId);
      const userRef = db.collection('usersPay').doc(userId.toString());
      const subRef = db.collection('subscriptions').doc(userId.toString());

      await db.runTransaction(async (t) => {
        const txDoc = await t.get(txRef);
        if (!txDoc.exists) throw new Error('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        
        const txData = txDoc.data();
        if (txData.status !== 'pending') throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å');

        const plan = {
          '1day': { name: "1 –¥–µ–Ω—å", duration: 86400000 },
          '1month': { name: "1 –º–µ—Å—è—Ü", duration: 2592000000 },
          'forever': { name: "–ù–∞–≤—Å–µ–≥–¥–∞", duration: null }
        }[txData.plan];

        // –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
        t.update(userRef, {
          balance: admin.firestore.FieldValue.increment(-txData.amount),
          reserved: admin.firestore.FieldValue.increment(-txData.amount),
          lastUpdated: admin.firestore.FieldValue.serverTimestamp()
        });

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        t.update(txRef, {
          status: 'completed',
          completedAt: admin.firestore.FieldValue.serverTimestamp()
        });

        // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        const subData = {
          userId,
          plan: txData.plan,
          subscriptionType: txData.plan,
          startDate: admin.firestore.FieldValue.serverTimestamp(),
          status: 'active',
          isActive: true,
          lastUpdated: admin.firestore.FieldValue.serverTimestamp()
        };

        if (plan.duration) {
          subData.endDate = admin.firestore.Timestamp.fromDate(new Date(Date.now() + plan.duration));
        }

        t.set(subRef, subData, { merge: true });
      });

      await ctx.editMessageText('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!');

    } catch (error) {
      console.error('Payment confirm error:', error);
      await ctx.reply(`‚ö†Ô∏è –û—à–∏–±–∫–∞: ${error.message}`);
    }
  });

  // 5. –û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞
  bot.action(/cancel_pay_(.+)/, async (ctx) => {
    const txId = ctx.match[1];
    const userId = ctx.from.id;
    
    try {
      await db.runTransaction(async (t) => {
        const txRef = db.collection('transactions').doc(txId);
        const txDoc = await t.get(txRef);
        
        if (txDoc.exists && txDoc.data().status === 'pending') {
          const amount = txDoc.data().amount;
          
          t.update(db.collection('usersPay').doc(userId.toString()), {
            reserved: admin.firestore.FieldValue.increment(-amount),
            lastUpdated: admin.firestore.FieldValue.serverTimestamp()
          });
          
          t.update(txRef, {
            status: 'cancelled',
            cancelledAt: admin.firestore.FieldValue.serverTimestamp()
          });
        }
      });
      
      await ctx.deleteMessage();
      await ctx.reply('‚ÑπÔ∏è –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω');

    } catch (error) {
      console.error('Payment cancel error:', error);
      await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ');
    }
  });
};