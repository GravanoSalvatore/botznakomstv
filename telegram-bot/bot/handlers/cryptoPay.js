const fetch = require('node-fetch');



class CryptoPayHandler {
    constructor(bot, db) {
        this.bot = bot;
        this.db = db;
        this.token = process.env.CRYPTO_PAY_TOKEN;
        this.baseUrl = 'https://pay.crypt.bot/api';
        console.log('‚úÖ CryptoPayHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    async makeRequest(endpoint, method = 'GET', body = null) {
        try {
            console.log(`üì° [CRYPTO] API –∑–∞–ø—Ä–æ—Å: ${method} ${endpoint}`);
            
            const options = {
                method,
                headers: {
                    'Crypto-Pay-API-Token': this.token,
                    'Content-Type': 'application/json'
                }
            };

            if (body) {
                options.body = JSON.stringify(body);
                console.log(`üì¶ [CRYPTO] –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:`, body);
            }

            const response = await fetch(`${this.baseUrl}${endpoint}`, options);
            const data = await response.json();
            
            console.log(`üì® [CRYPTO] –û—Ç–≤–µ—Ç API:`, { 
                ok: data.ok,
                error: data.error 
            });
            
            if (data.ok) {
                console.log(`‚úÖ [CRYPTO] API –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω`);
                return data.result;
            } else {
                console.error('‚ùå [CRYPTO] API –æ—à–∏–±–∫–∞:', data.error);
                throw new Error(data.error.description || 'CryptoPay API error');
            }
        } catch (error) {
            console.error('‚ùå [CRYPTO] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
            throw error;
        }
    }

    async createInvoice(amount, description = '–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏', asset = 'USDT') {
        try {
            console.log(`üí∏ [CRYPTO] –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞: ${amount} ${asset}, "${description}"`);
            
            const result = await this.makeRequest('/createInvoice', 'POST', {
                asset: asset,
                amount: amount.toString(),
                description: description,
                paid_btn_name: 'openBot',
                paid_btn_url: `https://t.me/${process.env.BOT_USERNAME}`,
                allow_comments: false,
                allow_anonymous: false,
                expires_in: 3600
            });

            console.log(`‚úÖ [CRYPTO] –ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω:`, result);
            return result;

        } catch (error) {
            console.error('‚ùå [CRYPTO] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞:', error);
            throw error;
        }
    }

    async getInvoice(invoice_id) {
        try {
            console.log(`üîç [CRYPTO] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞: ${invoice_id}`);
            const result = await this.makeRequest(`/getInvoices?invoice_ids=${invoice_id}`);
            
            if (result.items && result.items.length > 0) {
                console.log(`‚úÖ [CRYPTO] –ò–Ω–≤–æ–π—Å –Ω–∞–π–¥–µ–Ω:`, result.items[0]);
                return result.items[0];
            } else {
                console.log(`‚ùå [CRYPTO] –ò–Ω–≤–æ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: ${invoice_id}`);
                return null;
            }
        } catch (error) {
            console.error(`‚ùå [CRYPTO] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞ ${invoice_id}:`, error.message);
            return null;
        }
    }

    async getBalance() {
        return await this.makeRequest('/getBalance');
    }
}



module.exports = CryptoPayHandler;