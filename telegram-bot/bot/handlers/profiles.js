// const RateLimiter = require('telegraf-ratelimit');
// const { default: PQueue } = require('p-queue');

// // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
// const messageQueue = new PQueue({
//   concurrency: 5,
//   interval: 1000,
//   intervalCap: 5
// });

// // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (24 —á–∞—Å–∞)
// const MESSAGE_TTL = 86400000;

// module.exports = (bot, db) => {
//   // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
//   const PROFILES_PER_PAGE = 5;
//   const MAX_CAPTION_LENGTH = 900;
//   const CACHE_TTL = 300000;
//   const AGE_RANGES = [
//     { label: '18-25', min: 18, max: 25 },
//     { label: '26-35', min: 26, max: 35 },
//     { label: '36-45', min: 36, max: 45 },
//     { label: '46+', min: 46, max: 999 }
//   ];

//   // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è rate-limiter
//   const limiter = new RateLimiter({
//     window: 1000,
//     limit: 3,
//     onLimitExceeded: (ctx) => ctx.reply('‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–¥–æ–∂–¥–∏—Ç–µ —Å–µ–∫—É–Ω–¥—É...')
//   });

//   bot.use(limiter);

//   // –°–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
//   const chatStorage = {
//     messages: new Map(),     // chatId: Set(messageIds)
//     mainMenu: new Map(),     // chatId: messageId
//     userState: new Map(),    // userId: state
//     messageTimestamps: new Map() // messageId: timestamp
//   };

//   // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
//   setInterval(() => {
//     const now = Date.now();
//     for (const [chatId, messages] of chatStorage.messages) {
//       for (const messageId of messages) {
//         if (now - (chatStorage.messageTimestamps.get(messageId) || 0) > MESSAGE_TTL) {
//           messages.delete(messageId);
//           chatStorage.messageTimestamps.delete(messageId);
//         }
//       }
//     }
//   }, 21600000);

//   // –ö—ç—à –¥–∞–Ω–Ω—ã—Ö
//   const profilesCache = {
//     data: null,
//     timestamp: 0,
//     countryFilter: null,
//     ageFilter: null,
//     clear: function() {
//       this.data = null;
//       this.timestamp = 0;
//       this.countryFilter = null;
//       this.ageFilter = null;
//     }
//   };

//   // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç
//   const getProfilesPage = async (page = 0, searchCountry = null, ageRange = null) => {
//     try {
//       const now = Date.now();
//       const cacheKey = `${searchCountry || 'all'}_${ageRange ? ageRange.label : 'all'}`;

//       if (profilesCache.data &&
//           now - profilesCache.timestamp < CACHE_TTL &&
//           profilesCache.countryFilter === (searchCountry || null) &&
//           profilesCache.ageFilter === (ageRange ? ageRange.label : null)) {
//         return profilesCache.data.slice(page * PROFILES_PER_PAGE, (page + 1) * PROFILES_PER_PAGE);
//       }

//       const snapshot = await db.collection('profiles')
//         .orderBy('createdAt', 'desc')
//         .get();

//       let profiles = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));

//       if (searchCountry) {
//         const searchTerm = searchCountry.toLowerCase().trim();
//         profiles = profiles.filter(profile => {
//           const profileCountry = profile.country?.toLowerCase() || '';
//           return profileCountry.includes(searchTerm) ||
//                  (searchTerm === '—Ä–æ—Å' && profileCountry.includes('—Ä–æ—Å—Å–∏—è'));
//         });
//       }

//       if (ageRange) {
//         profiles = profiles.filter(profile => {
//           const age = parseInt(profile.age) || 0;
//           return age >= ageRange.min && age <= ageRange.max;
//         });
//       }

//       profilesCache.data = profiles;
//       profilesCache.timestamp = now;
//       profilesCache.countryFilter = searchCountry || null;
//       profilesCache.ageFilter = ageRange ? ageRange.label : null;

//       return profiles.slice(page * PROFILES_PER_PAGE, (page + 1) * PROFILES_PER_PAGE);
//     } catch (error) {
//       console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∫–µ—Ç:', error);
//       profilesCache.clear();
//       return [];
//     }
//   };

//   // –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
//   const messageManager = {
//     track: function(chatId, messageId) {
//       if (!messageId) return;
//       if (!chatStorage.messages.has(chatId)) {
//         chatStorage.messages.set(chatId, new Set());
//       }
//       chatStorage.messages.get(chatId).add(messageId);
//       chatStorage.messageTimestamps.set(messageId, Date.now());
//     },

//     clear: async function(ctx) {
//       const chatId = ctx.chat.id;
//       if (!chatStorage.messages.has(chatId)) return;

//       const messages = [...chatStorage.messages.get(chatId)];
//       const mainMenuId = chatStorage.mainMenu.get(chatId);

//       for (const messageId of messages) {
//         if (messageId !== mainMenuId) {
//           try {
//             await ctx.telegram.deleteMessage(chatId, messageId);
//             chatStorage.messages.get(chatId).delete(messageId);
//             chatStorage.messageTimestamps.delete(messageId);
//           } catch (e) {
//             if (e.response?.error_code !== 400) { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ "message not found"
//               console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${messageId}:`, e.message);
//             }
//           }
//         }
//       }

//       chatStorage.userState.delete(ctx.from.id);
//     },

//     sendMainMenu: async function(ctx) {
//       return messageQueue.add(async () => {
//         const chatId = ctx.chat.id;
//         const self = this;

//         try {
//           // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é –µ—Å–ª–∏ –µ—Å—Ç—å
//           if (chatStorage.mainMenu.has(chatId)) {
//             try {
//               await ctx.telegram.deleteMessage(chatId, chatStorage.mainMenu.get(chatId));
//               chatStorage.messages.get(chatId)?.delete(chatStorage.mainMenu.get(chatId));
//               chatStorage.messageTimestamps.delete(chatStorage.mainMenu.get(chatId));
//             } catch (e) {
//               if (e.response?.error_code !== 400) {
//                 console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ–Ω—é:', e);
//               }
//             }
//           }

//           const menu = await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', {
//             reply_markup: {
//               inline_keyboard: [
//                 [{ text: 'üë© –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∫–µ—Ç—ã', callback_data: 'show_profiles' }],
//                 [{ text: 'üîç –ü–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä–∞–Ω–µ', callback_data: 'search_by_country' }],
//                 [{ text: 'üéÇ –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É', callback_data: 'filter_by_age' }],
//                 [{ text: '‚ùå –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω', callback_data: 'clear_screen' }]
//               ]
//             }
//           });

//           chatStorage.mainMenu.set(chatId, menu.message_id);
//           self.track(chatId, menu.message_id);
//         } catch (error) {
//           console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é:', error);
//           throw error;
//         }
//       });
//     }
//   };

//   // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
//   bot.command('start', async (ctx) => {
//     await messageQueue.add(async () => {
//       try {
//         await messageManager.clear(ctx);
//         await messageManager.sendMainMenu(ctx);
//       } catch (error) {
//         console.error('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã start:', error);
//       }
//     });
//   });

//   // –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∫–µ—Ç—ã
//   bot.action('show_profiles', async (ctx) => {
//     await messageQueue.add(async () => {
//       try {
//         ctx.session = ctx.session || {};
//         ctx.session.profilesPage = 0;
//         ctx.session.filterCountry = null;
//         ctx.session.displayCountry = null; // –î–æ–±–∞–≤–ª–µ–Ω–æ: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—É—é —Å—Ç—Ä–∞–Ω—É
//         ctx.session.ageRange = null;

//         await messageManager.clear(ctx);
//         const profiles = await getProfilesPage(0);

//         if (!profiles.length) {
//           const msg = await ctx.reply('–ê–Ω–∫–µ—Ç –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
//           messageManager.track(ctx.chat.id, msg.message_id);
//           return;
//         }

//         await Promise.all(
//           profiles.map((profile, index) =>
//             sendProfile(ctx, profile, 0, profiles.length, index === profiles.length - 1)
//           )
//         );

//         await messageManager.sendMainMenu(ctx);
//       } catch (error) {
//         console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–Ω–∫–µ—Ç:', error);
//         const msg = await ctx.reply('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∫–µ—Ç');
//         messageManager.track(ctx.chat.id, msg.message_id);
//       }
//     });
//   });

//   // –ü–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä–∞–Ω–µ
//   bot.action('search_by_country', async (ctx) => {
//     await messageQueue.add(async () => {
//       try {
//         chatStorage.userState.set(ctx.from.id, 'awaiting_country');
//         const msg = await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø–æ–∏—Å–∫–∞:');
//         messageManager.track(ctx.chat.id, msg.message_id);
//         await ctx.answerCbQuery();
//       } catch (error) {
//         console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
//       }
//     });
//   });

//   // –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
//   bot.action('filter_by_age', async (ctx) => {
//     await messageQueue.add(async () => {
//       try {
//         await messageManager.clear(ctx);

//         const keyboard = AGE_RANGES.map(range =>
//           [{ text: range.label, callback_data: `age_range_${range.label}` }]
//         );
//         keyboard.push([{ text: '‚ùå –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä', callback_data: 'age_range_reset' }]);

//         const msg = await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:', {
//           reply_markup: { inline_keyboard: keyboard }
//         });

//         messageManager.track(ctx.chat.id, msg.message_id);
//         await ctx.answerCbQuery();
//       } catch (error) {
//         console.error('–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É:', error);
//       }
//     });
//   });

//   // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
//   bot.action(/^age_range_(.+)$/, async (ctx) => {
//     await messageQueue.add(async () => {
//       try {
//         const [_, range] = ctx.match;

//         ctx.session = ctx.session || {};
//         ctx.session.profilesPage = 0;

//         if (range === 'reset') {
//           ctx.session.ageRange = null;
//         } else {
//           const selectedRange = AGE_RANGES.find(r => r.label === range);
//           if (selectedRange) {
//             ctx.session.ageRange = selectedRange;
//           }
//         }

//         await messageManager.clear(ctx);
//         const profiles = await getProfilesPage(0, ctx.session.filterCountry, ctx.session.ageRange);

//         if (!profiles.length) {
//           const msg = await ctx.reply('–ê–Ω–∫–µ—Ç –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã');
//           messageManager.track(ctx.chat.id, msg.message_id);
//           return;
//         }

//         await Promise.all(
//           profiles.map((profile, index) =>
//             sendProfile(ctx, profile, 0, profiles.length, index === profiles.length - 1)
//           )
//         );

//         await messageManager.sendMainMenu(ctx);
//       } catch (error) {
//         console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞:', error);
//       }
//     });
//   });

//   // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
//   bot.on('text', async (ctx) => {
//     const userId = ctx.from.id;
//     if (chatStorage.userState.get(userId) === 'awaiting_country') {
//       await messageQueue.add(async () => {
//         try {
//           messageManager.track(ctx.chat.id, ctx.message.message_id);
//           const countryInput = ctx.message.text.trim();

//           if (!countryInput) {
//             const msg = await ctx.reply('–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å—Ç—Ä–∞–Ω—É');
//             messageManager.track(ctx.chat.id, msg.message_id);
//             return;
//           }

//           await messageManager.clear(ctx);
//           ctx.session = ctx.session || {};
//           ctx.session.profilesPage = 0;

//           // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
//           const profiles = await getProfilesPage(0, countryInput, ctx.session.ageRange);

//           // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
//           let normalizedCountry = null;
//           if (profiles.length > 0) {
//             normalizedCountry = profiles[0].country;
//           } else if (countryInput.toLowerCase() === '—Ä–æ—Å') {
//             normalizedCountry = '–†–æ—Å—Å–∏—è';
//           } else {
//             normalizedCountry = countryInput;
//           }

//           // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
//           ctx.session.filterCountry = countryInput;
//           ctx.session.displayCountry = normalizedCountry;

//           if (profiles.length) {
//             await Promise.all(
//               profiles.map((profile, index) =>
//                 sendProfile(ctx, profile, 0, profiles.length, index === profiles.length - 1)
//               )
//             );
//           } else {
//             const msg = await ctx.reply(`–ê–Ω–∫–µ—Ç –∏–∑ "${normalizedCountry}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
//             messageManager.track(ctx.chat.id, msg.message_id);
//           }

//           await messageManager.sendMainMenu(ctx);
//         } catch (error) {
//           console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω—ã:', error);
//         }
//       });
//     }
//   });

//   // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
//   bot.action(/^page_(first|prev|next|last|\d+)_(\d+)$/, async (ctx) => {
//     await messageQueue.add(async () => {
//       try {
//         const [_, action, currentPage] = ctx.match;
//         let newPage = parseInt(currentPage);

//         if (action === 'first') newPage = 0;
//         else if (action === 'prev') newPage = Math.max(0, newPage - 1);
//         else if (action === 'next') newPage = newPage + 1;
//         else if (action === 'last') newPage = Math.ceil(profilesCache.data.length / PROFILES_PER_PAGE) - 1;
//         else newPage = parseInt(action); // –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã

//         await messageManager.clear(ctx);
//         ctx.session = ctx.session || {};

//         const profiles = await getProfilesPage(
//           newPage,
//           ctx.session.filterCountry,
//           ctx.session.ageRange
//         );

//         if (profiles.length) {
//           ctx.session.profilesPage = newPage;

//           await Promise.all(
//             profiles.map((profile, index) =>
//               sendProfile(ctx, profile, newPage, profiles.length, index === profiles.length - 1)
//             )
//           );
//         } else {
//           const msg = await ctx.reply('–ë–æ–ª—å—à–µ –∞–Ω–∫–µ—Ç –Ω–µ—Ç');
//           messageManager.track(ctx.chat.id, msg.message_id);
//         }

//         await messageManager.sendMainMenu(ctx);
//       } catch (error) {
//         console.error('–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏:', error);
//       }
//     });
//   });

//   // –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
//   bot.action('clear_screen', async (ctx) => {
//     await messageQueue.add(async () => {
//       try {
//         await messageManager.clear(ctx);
//         await ctx.answerCbQuery('–≠–∫—Ä–∞–Ω –æ—á–∏—â–µ–Ω');
//       } catch (error) {
//         console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error);
//         await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ');
//       }
//     });
//   });

//   // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç—ã
//   const sendProfile = async (ctx, profile, page, total, isLast) => {
//     return messageQueue.add(async () => {
//       try {
//         const about = profile.about?.length > MAX_CAPTION_LENGTH
//           ? profile.about.substring(0, MAX_CAPTION_LENGTH - 3) + '...'
//           : profile.about || '';

//         const formatTelegram = (username) => {
//           if (!username) return '';
//           const cleaned = decodeURIComponent(username)
//             .replace(/%2b/gi, '+')
//             .replace(/^(@?)(\+)/, '$1$2');
//           return cleaned ? `üí¨ <a href="https://t.me/${cleaned.replace(/^@/, '')}">${cleaned}</a>\n\n` : '';
//         };

//         const formatPhone = (phone) => {
//           if (!phone) return '';
//           const cleanPhone = phone.replace(/[^0-9+]/g, '');
//           return `üìû <a href="tel:${cleanPhone}">${phone}</a>\n\n`;
//         };
// // <i>${about}</i>
//         const caption = `
// üë§ <b>${profile.name}</b>, ${profile.age}\n\n
// üìç ${profile.country}\n\n
// ${profile.phone ? formatPhone(profile.phone) : ''}
// ${profile.telegram ? formatTelegram(profile.telegram) : ''}
//         `.trim();

//         // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
//         let keyboard = [];

//         if (isLast) {
//           const totalPages = Math.ceil(profilesCache.data.length / PROFILES_PER_PAGE);

//           // –°—Ç—Ä–æ–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
//           const paginationRow = [];

//           // –ö–Ω–æ–ø–∫–∞ "–í –Ω–∞—á–∞–ª–æ" –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
//           if (page > 0) {
//             paginationRow.push({ text: '‚è™', callback_data: `page_first_${page}` });
//           }

//           // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
//           if (page > 0) {
//             paginationRow.push({ text: '‚óÄÔ∏è', callback_data: `page_prev_${page}` });
//           }

//           // –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
//           paginationRow.push({
//             text: `${page + 1}/${totalPages}`,
//             callback_data: 'page_info'
//           });

//           // –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
//           if (page < totalPages - 1) {
//             paginationRow.push({ text: '‚ñ∂Ô∏è', callback_data: `page_next_${page}` });
//           }

//           // –ö–Ω–æ–ø–∫–∞ "–í –∫–æ–Ω–µ—Ü" –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
//           if (page < totalPages - 1) {
//             paginationRow.push({ text: '‚è©', callback_data: `page_last_${page}` });
//           }

//           // –ë—ã—Å—Ç—Ä—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ–ª—å—à–µ 3 —Å—Ç—Ä–∞–Ω–∏—Ü)
//           if (totalPages > 3) {
//             const quickPagesRow = [];
//             const maxQuickPages = Math.min(5, totalPages);
//             const startPage = Math.max(0, Math.min(
//               page - Math.floor(maxQuickPages / 2),
//               totalPages - maxQuickPages
//             ));

//             for (let i = 0; i < maxQuickPages; i++) {
//               const p = startPage + i;
//               if (p >= 0 && p < totalPages) {
//                 quickPagesRow.push({
//                   text: p === page ? `‚Ä¢ ${p + 1} ‚Ä¢` : `${p + 1}`,
//                   callback_data: `page_${p}_${page}`
//                 });
//               }
//             }

//             keyboard.push(quickPagesRow);
//           }

//           // –°—Ç—Ä–æ–∫–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
//           const filtersRow = [];
//           if (ctx.session?.displayCountry || ctx.session?.ageRange?.label) {
//             let filtersText = 'üîπ ';
//             if (ctx.session.displayCountry) {
//               filtersText += `–°—Ç—Ä–∞–Ω–∞: ${ctx.session.displayCountry}`;
//             }
//             if (ctx.session.ageRange?.label) {
//               if (ctx.session.displayCountry) filtersText += ', ';
//               filtersText += `–í–æ–∑—Ä–∞—Å—Ç: ${ctx.session.ageRange.label}`;
//             }
//             filtersRow.push({ text: filtersText, callback_data: 'filters_info' });
//           }

//           keyboard = filtersRow.length > 0
//             ? [paginationRow, ...keyboard, filtersRow]
//             : [paginationRow, ...keyboard];
//         }

//         try {
//           const msg = await ctx.replyWithPhoto(profile.photoUrl, {
//             caption,
//             parse_mode: 'HTML',
//             reply_markup: keyboard.length > 0 ? { inline_keyboard: keyboard } : undefined
//           });
//           messageManager.track(ctx.chat.id, msg.message_id);
//           return msg;
//         } catch (e) {
//           const msg = await ctx.reply(caption, {
//             parse_mode: 'HTML',
//             reply_markup: keyboard.length > 0 ? { inline_keyboard: keyboard } : undefined
//           });
//           messageManager.track(ctx.chat.id, msg.message_id);
//           return msg;
//         }
//       } catch (error) {
//         console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç—ã:', error);
//         return null;
//       }
//     });
//   };
// };
// const RateLimiter = require("telegraf-ratelimit");
// const { default: PQueue } = require("p-queue");

// // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
// const messageQueue = new PQueue({
//   concurrency: 5,
//   interval: 1000,
//   intervalCap: 5,
// });

// // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (24 —á–∞—Å–∞)
// const MESSAGE_TTL = 86400000;

// module.exports = (bot, db) => {
//   // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
//   const PROFILES_PER_PAGE = 5;
//   const MAX_CAPTION_LENGTH = 900;
//   const CACHE_TTL = 300000;
//   const AGE_RANGES = [
//     { label: "18-25", min: 18, max: 25 },
//     { label: "26-35", min: 26, max: 35 },
//     { label: "36-45", min: 36, max: 45 },
//     { label: "46+", min: 46, max: 999 },
//   ];

//   // –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å—Ç—Ä–∞–Ω —Å —ç–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–∞–º–∏
//   const POPULAR_COUNTRIES = [
//     { name: "–†–æ—Å—Å–∏—è", flag: "üá∑üá∫" },
//     { name: "–£–∫—Ä–∞–∏–Ω–∞", flag: "üá∫üá¶" },
//     { name: "–ë–µ–ª–∞—Ä—É—Å—å", flag: "üáßüáæ" },
//     { name: "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", flag: "üá∞üáø" },
//     { name: "–°–®–ê", flag: "üá∫üá∏" },
//     { name: "–ì–µ—Ä–º–∞–Ω–∏—è", flag: "üá©üá™" },
//     { name: "–§—Ä–∞–Ω—Ü–∏—è", flag: "üá´üá∑" },
//     { name: "–ò—Ç–∞–ª–∏—è", flag: "üáÆüáπ" },
//     { name: "–ò—Å–ø–∞–Ω–∏—è", flag: "üá™üá∏" },
//     { name: "–¢—É—Ä—Ü–∏—è", flag: "üáπüá∑" },
//     { name: "–ö–∏—Ç–∞–π", flag: "üá®üá≥" },
//     { name: "–Ø–ø–æ–Ω–∏—è", flag: "üáØüáµ" },
//     { name: "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è", flag: "üá¨üáß" },
//     { name: "–ü–æ–ª—å—à–∞", flag: "üáµüá±" },
//     { name: "–ò–∑—Ä–∞–∏–ª—å", flag: "üáÆüá±" },
//     { name: "–û–ê–≠", flag: "üá¶üá™" },
//     { name: "–¢–∞–∏–ª–∞–Ω–¥", flag: "üáπüá≠" },
//     { name: "–ò–Ω–¥–∏—è", flag: "üáÆüá≥" },
//     { name: "–ë—Ä–∞–∑–∏–ª–∏—è", flag: "üáßüá∑" },
//     { name: "–ö–∞–Ω–∞–¥–∞", flag: "üá®üá¶" },
//     // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
//     { name: "–ê–≤—Å—Ç—Ä–∞–ª–∏—è", flag: "üá¶üá∫" },
//     { name: "–ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è", flag: "üá≥üáø" },
//     { name: "–ú–µ–∫—Å–∏–∫–∞", flag: "üá≤üáΩ" },
//     { name: "–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞", flag: "üá¶üá∑" },
//     { name: "–ß–∏–ª–∏", flag: "üá®üá±" },
//     { name: "–ö–æ–ª—É–º–±–∏—è", flag: "üá®üá¥" },
//     { name: "–ü–µ—Ä—É", flag: "üáµüá™" },
//     { name: "–í–µ–Ω–µ—Å—É—ç–ª–∞", flag: "üáªüá™" },
//     { name: "–ö—É–±–∞", flag: "üá®üá∫" },
//     { name: "–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è", flag: "üá∞üá∑" },
//     { name: "–ò–Ω–¥–æ–Ω–µ–∑–∏—è", flag: "üáÆüá©" },
//     { name: "–í—å–µ—Ç–Ω–∞–º", flag: "üáªüá≥" },
//     { name: "–ú–∞–ª–∞–π–∑–∏—è", flag: "üá≤üáæ" },
//     { name: "–§–∏–ª–∏–ø–ø–∏–Ω—ã", flag: "üáµüá≠" },
//     { name: "–°–∏–Ω–≥–∞–ø—É—Ä", flag: "üá∏üá¨" },
//     { name: "–°–∞—É–¥–æ–≤—Å–∫–∞—è –ê—Ä–∞–≤–∏—è", flag: "üá∏üá¶" },
//     { name: "–ö–∞—Ç–∞—Ä", flag: "üá∂üá¶" },
//     { name: "–ö—É–≤–µ–π—Ç", flag: "üá∞üáº" },
//     { name: "–ò—Ä–∞–Ω", flag: "üáÆüá∑" },
//     { name: "–ò—Ä–∞–∫", flag: "üáÆüá∂" },
//     { name: "–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω", flag: "üá¶üáø" },
//     { name: "–ê—Ä–º–µ–Ω–∏—è", flag: "üá¶üá≤" },
//     { name: "–ì—Ä—É–∑–∏—è", flag: "üá¨üá™" },
//     { name: "–ú–æ–ª–¥–æ–≤–∞", flag: "üá≤üá©" },
//     { name: "–õ–∞—Ç–≤–∏—è", flag: "üá±üáª" },
//     { name: "–õ–∏—Ç–≤–∞", flag: "üá±üáπ" },
//     { name: "–≠—Å—Ç–æ–Ω–∏—è", flag: "üá™üá™" },
//     { name: "–§–∏–Ω–ª—è–Ω–¥–∏—è", flag: "üá´üáÆ" },
//     { name: "–®–≤–µ—Ü–∏—è", flag: "üá∏üá™" },
//     { name: "–ù–æ—Ä–≤–µ–≥–∏—è", flag: "üá≥üá¥" },
//     { name: "–î–∞–Ω–∏—è", flag: "üá©üá∞" },
//     { name: "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã", flag: "üá≥üá±" },
//     { name: "–ë–µ–ª—å–≥–∏—è", flag: "üáßüá™" },
//     { name: "–®–≤–µ–π—Ü–∞—Ä–∏—è", flag: "üá®üá≠" },
//     { name: "–ê–≤—Å—Ç—Ä–∏—è", flag: "üá¶üáπ" },
//     { name: "–ß–µ—Ö–∏—è", flag: "üá®üáø" },
//     { name: "–°–ª–æ–≤–∞–∫–∏—è", flag: "üá∏üá∞" },
//     { name: "–í–µ–Ω–≥—Ä–∏—è", flag: "üá≠üá∫" },
//     { name: "–†—É–º—ã–Ω–∏—è", flag: "üá∑üá¥" },
//     { name: "–ë–æ–ª–≥–∞—Ä–∏—è", flag: "üáßüá¨" },
//     { name: "–°–µ—Ä–±–∏—è", flag: "üá∑üá∏" },
//     { name: "–•–æ—Ä–≤–∞—Ç–∏—è", flag: "üá≠üá∑" },
//     { name: "–ì—Ä–µ—Ü–∏—è", flag: "üá¨üá∑" },
//     { name: "–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è", flag: "üáµüáπ" },
//     { name: "–ò—Ä–ª–∞–Ω–¥–∏—è", flag: "üáÆüá™" },
//     { name: "–ò—Å–ª–∞–Ω–¥–∏—è", flag: "üáÆüá∏" },
//     { name: "–ú–∞–ª—å—Ç–∞", flag: "üá≤üáπ" },
//     { name: "–ö–∏–ø—Ä", flag: "üá®üáæ" },
//     { name: "–õ—é–∫—Å–µ–º–±—É—Ä–≥", flag: "üá±üá∫" },
//     { name: "–ê—Ñ–≥–∞–Ω–∏—Å—Ç–∞–Ω", flag: "üá¶üá´" },
//     { name: "–ü–∞–∫–∏—Å—Ç–∞–Ω", flag: "üáµüá∞" },
//     { name: "–ë–∞–Ω–≥–ª–∞–¥–µ—à", flag: "üáßüá©" },
//     { name: "–®—Ä–∏-–õ–∞–Ω–∫–∞", flag: "üá±üá∞" },
//     { name: "–ù–µ–ø–∞–ª", flag: "üá≥üáµ" },
//   ];

//   // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è rate-limiter
//   const limiter = new RateLimiter({
//     window: 1000,
//     limit: 3,
//     onLimitExceeded: (ctx) =>
//       ctx.reply("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–¥–æ–∂–¥–∏—Ç–µ —Å–µ–∫—É–Ω–¥—É..."),
//   });

//   bot.use(limiter);

//   // –°–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
//   const chatStorage = {
//     messages: new Map(), // chatId: Set(messageIds)
//     mainMenu: new Map(), // chatId: messageId
//     userState: new Map(), // userId: state
//     messageTimestamps: new Map(), // messageId: timestamp
//     countryKeyboard: new Map(), // chatId: messageId (–¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Å—Ç—Ä–∞–Ω)
//   };

//   // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
//   setInterval(() => {
//     const now = Date.now();
//     for (const [chatId, messages] of chatStorage.messages) {
//       for (const messageId of messages) {
//         if (
//           now - (chatStorage.messageTimestamps.get(messageId) || 0) >
//           MESSAGE_TTL
//         ) {
//           messages.delete(messageId);
//           chatStorage.messageTimestamps.delete(messageId);
//         }
//       }
//     }
//   }, 21600000);

//   // –ö—ç—à –¥–∞–Ω–Ω—ã—Ö
//   const profilesCache = {
//     data: null,
//     timestamp: 0,
//     countryFilter: null,
//     ageFilter: null,
//     clear: function () {
//       this.data = null;
//       this.timestamp = 0;
//       this.countryFilter = null;
//       this.ageFilter = null;
//     },
//   };

//   // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç
//   const getProfilesPage = async (
//     page = 0,
//     searchCountry = null,
//     ageRange = null
//   ) => {
//     try {
//       const now = Date.now();
//       const cacheKey = `${searchCountry || "all"}_${
//         ageRange ? ageRange.label : "all"
//       }`;

//       if (
//         profilesCache.data &&
//         now - profilesCache.timestamp < CACHE_TTL &&
//         profilesCache.countryFilter === (searchCountry || null) &&
//         profilesCache.ageFilter === (ageRange ? ageRange.label : null)
//       ) {
//         return profilesCache.data.slice(
//           page * PROFILES_PER_PAGE,
//           (page + 1) * PROFILES_PER_PAGE
//         );
//       }

//       const snapshot = await db
//         .collection("profiles")
//         .orderBy("createdAt", "desc")
//         .get();

//       let profiles = snapshot.docs.map((doc) => ({
//         id: doc.id,
//         ...doc.data(),
//       }));

//       if (searchCountry) {
//         const searchTerm = searchCountry.toLowerCase().trim();
//         profiles = profiles.filter((profile) => {
//           const profileCountry = profile.country?.toLowerCase() || "";
//           return (
//             profileCountry.includes(searchTerm) ||
//             (searchTerm === "—Ä–æ—Å" && profileCountry.includes("—Ä–æ—Å—Å–∏—è"))
//           );
//         });
//       }

//       if (ageRange) {
//         profiles = profiles.filter((profile) => {
//           const age = parseInt(profile.age) || 0;
//           return age >= ageRange.min && age <= ageRange.max;
//         });
//       }

//       profilesCache.data = profiles;
//       profilesCache.timestamp = now;
//       profilesCache.countryFilter = searchCountry || null;
//       profilesCache.ageFilter = ageRange ? ageRange.label : null;

//       return profiles.slice(
//         page * PROFILES_PER_PAGE,
//         (page + 1) * PROFILES_PER_PAGE
//       );
//     } catch (error) {
//       console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∫–µ—Ç:", error);
//       profilesCache.clear();
//       return [];
//     }
//   };

//   // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
//   const getUniqueCountries = async () => {
//     try {
//       const snapshot = await db.collection("profiles").orderBy("country").get();

//       const countries = new Set();
//       snapshot.docs.forEach((doc) => {
//         const country = doc.data().country;
//         if (country) countries.add(country);
//       });

//       return Array.from(countries).sort();
//     } catch (error) {
//       console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω:", error);
//       return [];
//     }
//   };

//   // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ñ–ª–∞–≥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö)
//   const formatCountryWithFlag = (countryName) => {
//     if (!countryName) return countryName;

//     const foundCountry = POPULAR_COUNTRIES.find(
//       (c) => c.name.toLowerCase() === countryName.toLowerCase()
//     );

//     return foundCountry ? `${foundCountry.flag} ${countryName}` : countryName;
//   };

//   // –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
//   const messageManager = {
//     track: function (chatId, messageId) {
//       if (!messageId) return;
//       if (!chatStorage.messages.has(chatId)) {
//         chatStorage.messages.set(chatId, new Set());
//       }
//       chatStorage.messages.get(chatId).add(messageId);
//       chatStorage.messageTimestamps.set(messageId, Date.now());
//     },

//     clear: async function (ctx) {
//       const chatId = ctx.chat.id;
//       if (!chatStorage.messages.has(chatId)) return;

//       const messages = [...chatStorage.messages.get(chatId)];
//       const mainMenuId = chatStorage.mainMenu.get(chatId);
//       const countryKeyboardId = chatStorage.countryKeyboard.get(chatId);

//       for (const messageId of messages) {
//         if (messageId !== mainMenuId && messageId !== countryKeyboardId) {
//           try {
//             await ctx.telegram.deleteMessage(chatId, messageId);
//             chatStorage.messages.get(chatId).delete(messageId);
//             chatStorage.messageTimestamps.delete(messageId);
//           } catch (e) {
//             if (e.response?.error_code !== 400) {
//               // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ "message not found"
//               console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${messageId}:`, e.message);
//             }
//           }
//         }
//       }

//       // –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
//       if (countryKeyboardId) {
//         try {
//           await ctx.telegram.deleteMessage(chatId, countryKeyboardId);
//           chatStorage.messages.get(chatId).delete(countryKeyboardId);
//           chatStorage.messageTimestamps.delete(countryKeyboardId);
//           chatStorage.countryKeyboard.delete(chatId);
//         } catch (e) {
//           if (e.response?.error_code !== 400) {
//             console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω:", e);
//           }
//         }
//       }

//       chatStorage.userState.delete(ctx.from.id);
//     },

//     sendMainMenu: async function (ctx) {
//       return messageQueue.add(async () => {
//         const chatId = ctx.chat.id;
//         const self = this;

//         try {
//           // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é –µ—Å–ª–∏ –µ—Å—Ç—å
//           if (chatStorage.mainMenu.has(chatId)) {
//             try {
//               await ctx.telegram.deleteMessage(
//                 chatId,
//                 chatStorage.mainMenu.get(chatId)
//               );
//               chatStorage.messages
//                 .get(chatId)
//                 ?.delete(chatStorage.mainMenu.get(chatId));
//               chatStorage.messageTimestamps.delete(
//                 chatStorage.mainMenu.get(chatId)
//               );
//             } catch (e) {
//               if (e.response?.error_code !== 400) {
//                 console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ–Ω—é:", e);
//               }
//             }
//           }

//           const menu = await ctx.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", {
//             reply_markup: {
//               inline_keyboard: [
//                 // [{ text: 'üë© –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∫–µ—Ç—ã', callback_data: 'show_profiles' }],
//                 [{
//     text: 'üåê –û—Ç–∫—Ä—ã—Ç—å  PeaceYourGun ü•ï –≤ WebApp',
//     web_app: { url: process.env.WEBAPP_URL }
// }],
//                 [{ text: "üåç –í—Å–µ —Å—Ç—Ä–∞–Ω—ã", callback_data: "all_countries" }],
//                 // [{ text: 'üîç –ü–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä–∞–Ω–µ', callback_data: 'search_by_country' }],
//                 [
//                   {
//                     text: "üéÇ –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É",
//                     callback_data: "filter_by_age",
//                   },
//                 ],
//                 [{ text: "‚ùå –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω", callback_data: "clear_screen" }],
//               ],
//             },
//           });

//           chatStorage.mainMenu.set(chatId, menu.message_id);
//           self.track(chatId, menu.message_id);
//         } catch (error) {
//           console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é:", error);
//           throw error;
//         }
//       });
//     },

//     // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç—Ä–∞–Ω
//     sendCountriesKeyboard: async function (ctx) {
//       return messageQueue.add(async () => {
//         const chatId = ctx.chat.id;
//         const self = this;

//         try {
//           // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
//           if (chatStorage.countryKeyboard.has(chatId)) {
//             try {
//               await ctx.telegram.deleteMessage(
//                 chatId,
//                 chatStorage.countryKeyboard.get(chatId)
//               );
//               chatStorage.messages
//                 .get(chatId)
//                 ?.delete(chatStorage.countryKeyboard.get(chatId));
//               chatStorage.messageTimestamps.delete(
//                 chatStorage.countryKeyboard.get(chatId)
//               );
//             } catch (e) {
//               if (e.response?.error_code !== 400) {
//                 console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω:", e);
//               }
//             }
//           }

//           // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –∏–∑ –±–∞–∑—ã
//           const uniqueCountries = await getUniqueCountries();

//           // –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω –Ω–µ—Ç –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ
//           const countriesToShow =
//             uniqueCountries.length > 0 && uniqueCountries.length <= 50
//               ? uniqueCountries
//               : POPULAR_COUNTRIES.map((c) => c.name);

//           // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
//           const keyboard = [];
//           let row = [];

//           // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω—ã —Å —Ñ–ª–∞–≥–∞–º–∏
//           countriesToShow.forEach((country, index) => {
//             const countryWithFlag = formatCountryWithFlag(country);
//             row.push({
//               text: countryWithFlag,
//               callback_data: `country_${country}`,
//             });

//             // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 3 –∫–Ω–æ–ø–∫–∏
//             if (row.length === 3 || index === countriesToShow.length - 1) {
//               keyboard.push(row);
//               row = [];
//             }
//           });

//           // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
//           keyboard.push([{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_menu" }]);

//           const msg = await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", {
//             reply_markup: { inline_keyboard: keyboard },
//           });

//           chatStorage.countryKeyboard.set(chatId, msg.message_id);
//           self.track(chatId, msg.message_id);
//         } catch (error) {
//           console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω:", error);
//           throw error;
//         }
//       });
//     },
//   };

//   // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
//   bot.command("start", async (ctx) => {
//     await messageQueue.add(async () => {
//       try {
//         await messageManager.clear(ctx);
//         await messageManager.sendMainMenu(ctx);
//       } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã start:", error);
//       }
//     });
//   });
//   bot.action("show_profiles", async (ctx) => {
//     await messageQueue.add(async () => {
//       try {
//         // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
//         await ctx.answerCbQuery("–ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∫–µ—Ç—ã...");

//         // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
//         ctx.session = ctx.session || {};
//         ctx.session.profilesPage = 0;
//         ctx.session.filterCountry = null;
//         ctx.session.displayCountry = null;
//         ctx.session.ageRange = null;

//         // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
//         console.log("Starting profiles load", {
//           cache: profilesCache.data ? "exists" : "empty",
//           cacheAge: Date.now() - profilesCache.timestamp,
//         });

//         // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
//         await messageManager.clear(ctx);

//         // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫—ç—à–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
//         if (
//           !profilesCache.data ||
//           Date.now() - profilesCache.timestamp > CACHE_TTL
//         ) {
//           profilesCache.clear();
//         }
//         const profiles = await getProfilesPage(0);

//         if (!profiles.length) {
//           const msg = await ctx.reply("–ê–Ω–∫–µ—Ç –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ");
//           messageManager.track(ctx.chat.id, msg.message_id);
//           return;
//         }

//         // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
//         for (let i = 0; i < profiles.length; i++) {
//           await sendProfile(
//             ctx,
//             profiles[i],
//             0,
//             profiles.length,
//             i === profiles.length - 1
//           );
//           if (i < profiles.length - 1)
//             await new Promise((resolve) => setTimeout(resolve, 300));
//         }

//         // –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
//         await messageManager.sendMainMenu(ctx);
//       } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–Ω–∫–µ—Ç:", error);
//         try {
//           await ctx.answerCbQuery("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏");
//           const msg = await ctx.reply(
//             "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∫–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑"
//           );
//           messageManager.track(ctx.chat.id, msg.message_id);
//         } catch (e) {
//           console.error("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:", e);
//         }
//       }
//     });
//   });
//    bot.action("all_countries", async (ctx) => {
//     await messageQueue.add(async () => {
//       try {
//         await messageManager.clear(ctx);
//         await messageManager.sendCountriesKeyboard(ctx);
//         await ctx.answerCbQuery();
//       } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω:", error);
//       }
//     });
//   });

//   // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞
//   bot.action(/^country_(.+)$/, async (ctx) => {
//     await messageQueue.add(async () => {
//       try {
//         const country = ctx.match[1];
//         ctx.session = ctx.session || {};
//         ctx.session.profilesPage = 0;
//         ctx.session.filterCountry = country;
//         ctx.session.displayCountry = country; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

//         await messageManager.clear(ctx);
//         const profiles = await getProfilesPage(
//           0,
//           country,
//           ctx.session.ageRange
//         );

//         if (!profiles.length) {
//           const msg = await ctx.reply(`–ê–Ω–∫–µ—Ç –∏–∑ "${country}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
//           messageManager.track(ctx.chat.id, msg.message_id);
//           return;
//         }

//         await Promise.all(
//           profiles.map((profile, index) =>
//             sendProfile(
//               ctx,
//               profile,
//               0,
//               profiles.length,
//               index === profiles.length - 1
//             )
//           )
//         );

//         await messageManager.sendMainMenu(ctx);
//       } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã:", error);
//       }
//     });
//   });

//   // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω
//   bot.action("back_to_menu", async (ctx) => {
//     await messageQueue.add(async () => {
//       try {
//         await messageManager.clear(ctx);
//         await messageManager.sendMainMenu(ctx);
//         await ctx.answerCbQuery();
//       } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é:", error);
//       }
//     });
//   });

//   // –ü–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä–∞–Ω–µ —á–µ—Ä–µ–∑ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
//   bot.action("search_by_country", async (ctx) => {
//     await messageQueue.add(async () => {
//       try {
//         chatStorage.userState.set(ctx.from.id, "awaiting_country");
//         const msg = await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø–æ–∏—Å–∫–∞:");
//         messageManager.track(ctx.chat.id, msg.message_id);
//         await ctx.answerCbQuery();
//       } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:", error);
//       }
//     });
//   });

//   // –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
//   bot.action("filter_by_age", async (ctx) => {
//     await messageQueue.add(async () => {
//       try {
//         await messageManager.clear(ctx);

//         const keyboard = AGE_RANGES.map((range) => [
//           { text: range.label, callback_data: `age_range_${range.label}` },
//         ]);
//         keyboard.push([
//           { text: "‚ùå –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", callback_data: "age_range_reset" },
//         ]);

//         const msg = await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:", {
//           reply_markup: { inline_keyboard: keyboard },
//         });

//         messageManager.track(ctx.chat.id, msg.message_id);
//         await ctx.answerCbQuery();
//       } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É:", error);
//       }
//     });
//   });

//   // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
//   bot.action(/^age_range_(.+)$/, async (ctx) => {
//     await messageQueue.add(async () => {
//       try {
//         const [_, range] = ctx.match;

//         ctx.session = ctx.session || {};
//         ctx.session.profilesPage = 0;

//         if (range === "reset") {
//           ctx.session.ageRange = null;
//         } else {
//           const selectedRange = AGE_RANGES.find((r) => r.label === range);
//           if (selectedRange) {
//             ctx.session.ageRange = selectedRange;
//           }
//         }

//         await messageManager.clear(ctx);
//         const profiles = await getProfilesPage(
//           0,
//           ctx.session.filterCountry,
//           ctx.session.ageRange
//         );

//         if (!profiles.length) {
//           const msg = await ctx.reply("–ê–Ω–∫–µ—Ç –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã");
//           messageManager.track(ctx.chat.id, msg.message_id);
//           return;
//         }

//         await Promise.all(
//           profiles.map((profile, index) =>
//             sendProfile(
//               ctx,
//               profile,
//               0,
//               profiles.length,
//               index === profiles.length - 1
//             )
//           )
//         );

//         await messageManager.sendMainMenu(ctx);
//       } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞:", error);
//       }
//     });
//   });

//   // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
//   bot.on("text", async (ctx) => {
//     const userId = ctx.from.id;
//     if (chatStorage.userState.get(userId) === "awaiting_country") {
//       await messageQueue.add(async () => {
//         try {
//           messageManager.track(ctx.chat.id, ctx.message.message_id);
//           const countryInput = ctx.message.text.trim();

//           if (!countryInput) {
//             const msg = await ctx.reply("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å—Ç—Ä–∞–Ω—É");
//             messageManager.track(ctx.chat.id, msg.message_id);
//             return;
//           }

//           await messageManager.clear(ctx);
//           ctx.session = ctx.session || {};
//           ctx.session.profilesPage = 0;

//           // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
//           const profiles = await getProfilesPage(
//             0,
//             countryInput,
//             ctx.session.ageRange
//           );

//           // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
//           let normalizedCountry = null;
//           if (profiles.length > 0) {
//             normalizedCountry = profiles[0].country;
//           } else if (countryInput.toLowerCase() === "—Ä–æ—Å") {
//             normalizedCountry = "–†–æ—Å—Å–∏—è";
//           } else {
//             normalizedCountry = countryInput;
//           }

//           // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
//           ctx.session.filterCountry = countryInput;
//           ctx.session.displayCountry = normalizedCountry;

//           if (profiles.length) {
//             await Promise.all(
//               profiles.map((profile, index) =>
//                 sendProfile(
//                   ctx,
//                   profile,
//                   0,
//                   profiles.length,
//                   index === profiles.length - 1
//                 )
//               )
//             );
//           } else {
//             const msg = await ctx.reply(
//               `–ê–Ω–∫–µ—Ç –∏–∑ "${normalizedCountry}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`
//             );
//             messageManager.track(ctx.chat.id, msg.message_id);
//           }

//           await messageManager.sendMainMenu(ctx);
//         } catch (error) {
//           console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω—ã:", error);
//         }
//       });
//     }
//   });

//   // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
//   bot.action(/^page_(first|prev|next|last|\d+)_(\d+)$/, async (ctx) => {
//     await messageQueue.add(async () => {
//       try {
//         const [_, action, currentPage] = ctx.match;
//         let newPage = parseInt(currentPage);

//         if (action === "first") newPage = 0;
//         else if (action === "prev") newPage = Math.max(0, newPage - 1);
//         else if (action === "next") newPage = newPage + 1;
//         else if (action === "last")
//           newPage =
//             Math.ceil(profilesCache.data.length / PROFILES_PER_PAGE) - 1;
//         else newPage = parseInt(action); // –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã

//         await messageManager.clear(ctx);
//         ctx.session = ctx.session || {};

//         const profiles = await getProfilesPage(
//           newPage,
//           ctx.session.filterCountry,
//           ctx.session.ageRange
//         );

//         if (profiles.length) {
//           ctx.session.profilesPage = newPage;

//           await Promise.all(
//             profiles.map((profile, index) =>
//               sendProfile(
//                 ctx,
//                 profile,
//                 newPage,
//                 profiles.length,
//                 index === profiles.length - 1
//               )
//             )
//           );
//         } else {
//           const msg = await ctx.reply("–ë–æ–ª—å—à–µ –∞–Ω–∫–µ—Ç –Ω–µ—Ç");
//           messageManager.track(ctx.chat.id, msg.message_id);
//         }

//         await messageManager.sendMainMenu(ctx);
//       } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏:", error);
//       }
//     });
//   });

//   // –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
//   bot.action("clear_screen", async (ctx) => {
//     await messageQueue.add(async () => {
//       try {
//         await messageManager.clear(ctx);
//         await ctx.answerCbQuery("–≠–∫—Ä–∞–Ω –æ—á–∏—â–µ–Ω");
//       } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:", error);
//         await ctx.answerCbQuery("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ");
//       }
//     });
//   });

//   // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç—ã
//   const sendProfile = async (ctx, profile, page, total, isLast) => {
//     return messageQueue.add(async () => {
//       try {
//         const about =
//           profile.about?.length > MAX_CAPTION_LENGTH
//             ? profile.about.substring(0, MAX_CAPTION_LENGTH - 3) + "..."
//             : profile.about || "";

        
//         const formatTelegram = (username) => {
//           if (!username) return "";

//           // –û–±—Ä–∞–±–æ—Ç–∫–∞ URL —Ñ–æ—Ä–º–∞—Ç–∞ (https://t.me/%2B491772619571)
//           if (username.startsWith("https://t.me/")) {
//             // –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º username/number
//             const cleaned = decodeURIComponent(username)
//               .replace("https://t.me/", "")
//               .replace(/^%40/, "@") // –ó–∞–º–µ–Ω—è–µ–º %40 –Ω–∞ @
//               .replace(/^\+/, ""); // –£–±–∏—Ä–∞–µ–º + –≤ –Ω–∞—á–∞–ª–µ, –µ—Å–ª–∏ –µ—Å—Ç—å

//             return `üí¨ <a href="https://t.me/${cleaned}">Telegram</a>`;
//           }

//           // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ @username –∏–ª–∏ +number
//           const cleaned = username.replace(/^[@+]/, "");
//           return `üí¨ <a href="https://t.me/${cleaned}">Telegram</a>`;
//         };
//         const formatPhone = (phone) => {
//           if (!phone) return "";
//           const cleanPhone = phone.replace(/[^0-9+]/g, "");
//           return `üìû <a href="tel:${cleanPhone}">${phone}</a>`;
//         };

//         const formatWhatsApp = (url) => {
//           if (!url) return "";
//           return `üì± <a href="${url}">WhatsApp</a>`;
//         };

//         const caption = `
// üë§ <b>${profile.name}</b>, ${profile.age}\n\n
//  ${profile.country}\n
// üìç ${profile.city}\n
// <em>${profile.about}</em>\n
// ${profile.phone ? formatPhone(profile.phone) + "\n" : ""}
// ${profile.telegram ? formatTelegram(profile.telegram) + "\n" : ""}
// ${profile.whatsapp ? formatWhatsApp(profile.whatsapp) + "\n" : ""}
// ‚ö†üö® <b>–ù–ï –ø–ª–∞—Ç–∏—Ç–µ –≤–ø–µ—Ä–µ–¥ —Å –ø–æ–º–æ—â—å—é Transcash, –±–∏–ª–µ—Ç–æ–≤ PCS, Neosurf, BITCOIN –∏–ª–∏ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–µ ‚Äì —ç—Ç–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ª–æ—Ö–æ—Ç—Ä–æ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –Ω–∞–º –æ —Ç–∞–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª—è—Ö‚ùó</b>`.trim();

//         // –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ (–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —Ç.–¥.) –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
//         let keyboard = [];

//         if (isLast) {
//           const totalPages = Math.ceil(
//             profilesCache.data.length / PROFILES_PER_PAGE
//           );
//           const paginationRow = [];

//           if (page > 0)
//             paginationRow.push({
//               text: "‚è™",
//               callback_data: `page_first_${page}`,
//             });
//           if (page > 0)
//             paginationRow.push({
//               text: "‚óÄÔ∏è",
//               callback_data: `page_prev_${page}`,
//             });

//           paginationRow.push({
//             text: `${page + 1}/${totalPages}`,
//             callback_data: "page_info",
//           });

//           if (page < totalPages - 1)
//             paginationRow.push({
//               text: "‚ñ∂Ô∏è",
//               callback_data: `page_next_${page}`,
//             });
//           if (page < totalPages - 1)
//             paginationRow.push({
//               text: "‚è©",
//               callback_data: `page_last_${page}`,
//             });

//           if (totalPages > 3) {
//             const quickPagesRow = [];
//             const maxQuickPages = Math.min(5, totalPages);
//             const startPage = Math.max(
//               0,
//               Math.min(
//                 page - Math.floor(maxQuickPages / 2),
//                 totalPages - maxQuickPages
//               )
//             );

//             for (let i = 0; i < maxQuickPages; i++) {
//               const p = startPage + i;
//               if (p >= 0 && p < totalPages) {
//                 quickPagesRow.push({
//                   text: p === page ? `‚Ä¢ ${p + 1} ‚Ä¢` : `${p + 1}`,
//                   callback_data: `page_${p}_${page}`,
//                 });
//               }
//             }
//             keyboard.push(quickPagesRow);
//           }

//           const filtersRow = [];
//           if (ctx.session?.displayCountry || ctx.session?.ageRange?.label) {
//             let filtersText = "üîπ ";
//             if (ctx.session.displayCountry)
//               filtersText += `–°—Ç—Ä–∞–Ω–∞: ${ctx.session.displayCountry}`;
//             if (ctx.session.ageRange?.label) {
//               if (ctx.session.displayCountry) filtersText += ", ";
//               filtersText += `–í–æ–∑—Ä–∞—Å—Ç: ${ctx.session.ageRange.label}`;
//             }
//             filtersRow.push({
//               text: filtersText,
//               callback_data: "filters_info",
//             });
//           }

//           keyboard =
//             filtersRow.length > 0
//               ? [paginationRow, ...keyboard, filtersRow]
//               : [paginationRow, ...keyboard];
//         }

//         try {
//           const msg = await ctx.replyWithPhoto(profile.photoUrl, {
//             caption,
//             parse_mode: "HTML",
//             reply_markup:
//               keyboard.length > 0 ? { inline_keyboard: keyboard } : undefined,
//           });
//           messageManager.track(ctx.chat.id, msg.message_id);
//           return msg;
//         } catch (e) {
//           const msg = await ctx.reply(caption, {
//             parse_mode: "HTML",
//             reply_markup:
//               keyboard.length > 0 ? { inline_keyboard: keyboard } : undefined,
//           });
//           messageManager.track(ctx.chat.id, msg.message_id);
//           return msg;
//         }
//       } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç—ã:", error);
//         return null;
//       }
//     });
//   };
// };
// const RateLimiter = require("telegraf-ratelimit");
// const { default: PQueue } = require("p-queue");

// // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
// const messageQueue = new PQueue({
//   concurrency: 5,
//   interval: 1000,
//   intervalCap: 5,
// });

// // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (24 —á–∞—Å–∞)
// const MESSAGE_TTL = 86400000;

// module.exports = (bot, db) => {
//   // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
//   const PROFILES_PER_PAGE = 5;
//   const MAX_CAPTION_LENGTH = 900;
//   const CACHE_TTL = 300000;
//   const AGE_RANGES = [
//     { label: "18-25", min: 18, max: 25 },
//     { label: "26-35", min: 26, max: 35 },
//     { label: "36-45", min: 36, max: 45 },
//     { label: "46+", min: 46, max: 999 },
//   ];

//   // –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å—Ç—Ä–∞–Ω —Å —ç–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–∞–º–∏
//   const POPULAR_COUNTRIES = [
//     { name: "–†–æ—Å—Å–∏—è", flag: "üá∑üá∫" },
//     { name: "–£–∫—Ä–∞–∏–Ω–∞", flag: "üá∫üá¶" },
//     { name: "–ë–µ–ª–∞—Ä—É—Å—å", flag: "üáßüáæ" },
//     { name: "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", flag: "üá∞üáø" },
//     { name: "–°–®–ê", flag: "üá∫üá∏" },
//     { name: "–ì–µ—Ä–º–∞–Ω–∏—è", flag: "üá©üá™" },
//     { name: "–§—Ä–∞–Ω—Ü–∏—è", flag: "üá´üá∑" },
//     { name: "–ò—Ç–∞–ª–∏—è", flag: "üáÆüáπ" },
//     { name: "–ò—Å–ø–∞–Ω–∏—è", flag: "üá™üá∏" },
//     { name: "–¢—É—Ä—Ü–∏—è", flag: "üáπüá∑" },
//     { name: "–ö–∏—Ç–∞–π", flag: "üá®üá≥" },
//     { name: "–Ø–ø–æ–Ω–∏—è", flag: "üáØüáµ" },
//     { name: "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è", flag: "üá¨üáß" },
//     { name: "–ü–æ–ª—å—à–∞", flag: "üáµüá±" },
//     { name: "–ò–∑—Ä–∞–∏–ª—å", flag: "üáÆüá±" },
//     { name: "–û–ê–≠", flag: "üá¶üá™" },
//     { name: "–¢–∞–∏–ª–∞–Ω–¥", flag: "üáπüá≠" },
//     { name: "–ò–Ω–¥–∏—è", flag: "üáÆüá≥" },
//     { name: "–ë—Ä–∞–∑–∏–ª–∏—è", flag: "üáßüá∑" },
//     { name: "–ö–∞–Ω–∞–¥–∞", flag: "üá®üá¶" },
//     // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
//     { name: "–ê–≤—Å—Ç—Ä–∞–ª–∏—è", flag: "üá¶üá∫" },
//     { name: "–ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è", flag: "üá≥üáø" },
//     { name: "–ú–µ–∫—Å–∏–∫–∞", flag: "üá≤üáΩ" },
//     { name: "–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞", flag: "üá¶üá∑" },
//     { name: "–ß–∏–ª–∏", flag: "üá®üá±" },
//     { name: "–ö–æ–ª—É–º–±–∏—è", flag: "üá®üá¥" },
//     { name: "–ü–µ—Ä—É", flag: "üáµüá™" },
//     { name: "–í–µ–Ω–µ—Å—É—ç–ª–∞", flag: "üáªüá™" },
//     { name: "–ö—É–±–∞", flag: "üá®üá∫" },
//     { name: "–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è", flag: "üá∞üá∑" },
//     { name: "–ò–Ω–¥–æ–Ω–µ–∑–∏—è", flag: "üáÆüá©" },
//     { name: "–í—å–µ—Ç–Ω–∞–º", flag: "üáªüá≥" },
//     { name: "–ú–∞–ª–∞–π–∑–∏—è", flag: "üá≤üáæ" },
//     { name: "–§–∏–ª–∏–ø–ø–∏–Ω—ã", flag: "üáµüá≠" },
//     { name: "–°–∏–Ω–≥–∞–ø—É—Ä", flag: "üá∏üá¨" },
//     { name: "–°–∞—É–¥–æ–≤—Å–∫–∞—è –ê—Ä–∞–≤–∏—è", flag: "üá∏üá¶" },
//     { name: "–ö–∞—Ç–∞—Ä", flag: "üá∂üá¶" },
//     { name: "–ö—É–≤–µ–π—Ç", flag: "üá∞üáº" },
//     { name: "–ò—Ä–∞–Ω", flag: "üáÆüá∑" },
//     { name: "–ò—Ä–∞–∫", flag: "üáÆüá∂" },
//     { name: "–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω", flag: "üá¶üáø" },
//     { name: "–ê—Ä–º–µ–Ω–∏—è", flag: "üá¶üá≤" },
//     { name: "–ì—Ä—É–∑–∏—è", flag: "üá¨üá™" },
//     { name: "–ú–æ–ª–¥–æ–≤–∞", flag: "üá≤üá©" },
//     { name: "–õ–∞—Ç–≤–∏—è", flag: "üá±üáª" },
//     { name: "–õ–∏—Ç–≤–∞", flag: "üá±üáπ" },
//     { name: "–≠—Å—Ç–æ–Ω–∏—è", flag: "üá™üá™" },
//     { name: "–§–∏–Ω–ª—è–Ω–¥–∏—è", flag: "üá´üáÆ" },
//     { name: "–®–≤–µ—Ü–∏—è", flag: "üá∏üá™" },
//     { name: "–ù–æ—Ä–≤–µ–≥–∏—è", flag: "üá≥üá¥" },
//     { name: "–î–∞–Ω–∏—è", flag: "üá©üá∞" },
//     { name: "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã", flag: "üá≥üá±" },
//     { name: "–ë–µ–ª—å–≥–∏—è", flag: "üáßüá™" },
//     { name: "–®–≤–µ–π—Ü–∞—Ä–∏—è", flag: "üá®üá≠" },
//     { name: "–ê–≤—Å—Ç—Ä–∏—è", flag: "üá¶üáπ" },
//     { name: "–ß–µ—Ö–∏—è", flag: "üá®üáø" },
//     { name: "–°–ª–æ–≤–∞–∫–∏—è", flag: "üá∏üá∞" },
//     { name: "–í–µ–Ω–≥—Ä–∏—è", flag: "üá≠üá∫" },
//     { name: "–†—É–º—ã–Ω–∏—è", flag: "üá∑üá¥" },
//     { name: "–ë–æ–ª–≥–∞—Ä–∏—è", flag: "üáßüá¨" },
//     { name: "–°–µ—Ä–±–∏—è", flag: "üá∑üá∏" },
//     { name: "–•–æ—Ä–≤–∞—Ç–∏—è", flag: "üá≠üá∑" },
//     { name: "–ì—Ä–µ—Ü–∏—è", flag: "üá¨üá∑" },
//     { name: "–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è", flag: "üáµüáπ" },
//     { name: "–ò—Ä–ª–∞–Ω–¥–∏—è", flag: "üáÆüá™" },
//     { name: "–ò—Å–ª–∞–Ω–¥–∏—è", flag: "üáÆüá∏" },
//     { name: "–ú–∞–ª—å—Ç–∞", flag: "üá≤üáπ" },
//     { name: "–ö–∏–ø—Ä", flag: "üá®üáæ" },
//     { name: "–õ—é–∫—Å–µ–º–±—É—Ä–≥", flag: "üá±üá∫" },
//     { name: "–ê—Ñ–≥–∞–Ω–∏—Å—Ç–∞–Ω", flag: "üá¶üá´" },
//     { name: "–ü–∞–∫–∏—Å—Ç–∞–Ω", flag: "üáµüá∞" },
//     { name: "–ë–∞–Ω–≥–ª–∞–¥–µ—à", flag: "üáßüá©" },
//     { name: "–®—Ä–∏-–õ–∞–Ω–∫–∞", flag: "üá±üá∞" },
//     { name: "–ù–µ–ø–∞–ª", flag: "üá≥üáµ" },
//   ];

//   // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è rate-limiter
//   const limiter = new RateLimiter({
//     window: 1000,
//     limit: 3,
//     onLimitExceeded: (ctx) =>
//       ctx.reply("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–¥–æ–∂–¥–∏—Ç–µ —Å–µ–∫—É–Ω–¥—É..."),
//   });

//   bot.use(limiter);

//   // –°–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
//   const chatStorage = {
//     messages: new Map(), // chatId: Set(messageIds)
//     mainMenu: new Map(), // chatId: messageId
//     userState: new Map(), // userId: state
//     messageTimestamps: new Map(), // messageId: timestamp
//     countryKeyboard: new Map(), // chatId: messageId (–¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Å—Ç—Ä–∞–Ω)
//   };

//   // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
//   setInterval(() => {
//     const now = Date.now();
//     for (const [chatId, messages] of chatStorage.messages) {
//       for (const messageId of messages) {
//         if (
//           now - (chatStorage.messageTimestamps.get(messageId) || 0) >
//           MESSAGE_TTL
//         ) {
//           messages.delete(messageId);
//           chatStorage.messageTimestamps.delete(messageId);
//         }
//       }
//     }
//   }, 21600000);

//   // –ö—ç—à –¥–∞–Ω–Ω—ã—Ö
//   const profilesCache = {
//     data: null,
//     timestamp: 0,
//     countryFilter: null,
//     ageFilter: null,
//     clear: function () {
//       this.data = null;
//       this.timestamp = 0;
//       this.countryFilter = null;
//       this.ageFilter = null;
//     },
//   };

//   // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç
//   const getProfilesPage = async (
//     page = 0,
//     searchCountry = null,
//     ageRange = null
//   ) => {
//     try {
//       const now = Date.now();
//       const cacheKey = `${searchCountry || "all"}_${
//         ageRange ? ageRange.label : "all"
//       }`;

//       if (
//         profilesCache.data &&
//         now - profilesCache.timestamp < CACHE_TTL &&
//         profilesCache.countryFilter === (searchCountry || null) &&
//         profilesCache.ageFilter === (ageRange ? ageRange.label : null)
//       ) {
//         return profilesCache.data.slice(
//           page * PROFILES_PER_PAGE,
//           (page + 1) * PROFILES_PER_PAGE
//         );
//       }

//       const snapshot = await db
//         .collection("profiles")
//         .orderBy("createdAt", "desc")
//         .get();

//       let profiles = snapshot.docs.map((doc) => ({
//         id: doc.id,
//         ...doc.data(),
//       }));

//       if (searchCountry) {
//         const searchTerm = searchCountry.toLowerCase().trim();
//         profiles = profiles.filter((profile) => {
//           const profileCountry = profile.country?.toLowerCase() || "";
//           return (
//             profileCountry.includes(searchTerm) ||
//             (searchTerm === "—Ä–æ—Å" && profileCountry.includes("—Ä–æ—Å—Å–∏—è"))
//           );
//         });
//       }

//       if (ageRange) {
//         profiles = profiles.filter((profile) => {
//           const age = parseInt(profile.age) || 0;
//           return age >= ageRange.min && age <= ageRange.max;
//         });
//       }

//       profilesCache.data = profiles;
//       profilesCache.timestamp = now;
//       profilesCache.countryFilter = searchCountry || null;
//       profilesCache.ageFilter = ageRange ? ageRange.label : null;

//       return profiles.slice(
//         page * PROFILES_PER_PAGE,
//         (page + 1) * PROFILES_PER_PAGE
//       );
//     } catch (error) {
//       console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∫–µ—Ç:", error);
//       profilesCache.clear();
//       return [];
//     }
//   };

//   // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
//   const getUniqueCountries = async () => {
//     try {
//       const snapshot = await db.collection("profiles").orderBy("country").get();

//       const countries = new Set();
//       snapshot.docs.forEach((doc) => {
//         const country = doc.data().country;
//         if (country) countries.add(country);
//       });

//       return Array.from(countries).sort();
//     } catch (error) {
//       console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω:", error);
//       return [];
//     }
//   };

//   // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ñ–ª–∞–≥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö)
//   const formatCountryWithFlag = (countryName) => {
//     if (!countryName) return countryName;

//     const foundCountry = POPULAR_COUNTRIES.find(
//       (c) => c.name.toLowerCase() === countryName.toLowerCase()
//     );

//     return foundCountry ? `${foundCountry.flag} ${countryName}` : countryName;
//   };

//   // –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
//   const messageManager = {
//     track: function (chatId, messageId) {
//       if (!messageId) return;
//       if (!chatStorage.messages.has(chatId)) {
//         chatStorage.messages.set(chatId, new Set());
//       }
//       chatStorage.messages.get(chatId).add(messageId);
//       chatStorage.messageTimestamps.set(messageId, Date.now());
//     },

//     clear: async function (ctx) {
//       const chatId = ctx.chat.id;
//       if (!chatStorage.messages.has(chatId)) return;

//       const messages = [...chatStorage.messages.get(chatId)];
//       const mainMenuId = chatStorage.mainMenu.get(chatId);
//       const countryKeyboardId = chatStorage.countryKeyboard.get(chatId);

//       for (const messageId of messages) {
//         if (messageId !== mainMenuId && messageId !== countryKeyboardId) {
//           try {
//             await ctx.telegram.deleteMessage(chatId, messageId);
//             chatStorage.messages.get(chatId).delete(messageId);
//             chatStorage.messageTimestamps.delete(messageId);
//           } catch (e) {
//             if (e.response?.error_code !== 400) {
//               // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ "message not found"
//               console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${messageId}:`, e.message);
//             }
//           }
//         }
//       }

//       // –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
//       if (countryKeyboardId) {
//         try {
//           await ctx.telegram.deleteMessage(chatId, countryKeyboardId);
//           chatStorage.messages.get(chatId).delete(countryKeyboardId);
//           chatStorage.messageTimestamps.delete(countryKeyboardId);
//           chatStorage.countryKeyboard.delete(chatId);
//         } catch (e) {
//           if (e.response?.error_code !== 400) {
//             console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω:", e);
//           }
//         }
//       }

//       chatStorage.userState.delete(ctx.from.id);
//     },

//     sendMainMenu: async function (ctx) {
//       return messageQueue.add(async () => {
//         const chatId = ctx.chat.id;
//         const self = this;

//         try {
//           // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é –µ—Å–ª–∏ –µ—Å—Ç—å
//           if (chatStorage.mainMenu.has(chatId)) {
//             try {
//               await ctx.telegram.deleteMessage(
//                 chatId,
//                 chatStorage.mainMenu.get(chatId)
//               );
//               chatStorage.messages
//                 .get(chatId)
//                 ?.delete(chatStorage.mainMenu.get(chatId));
//               chatStorage.messageTimestamps.delete(
//                 chatStorage.mainMenu.get(chatId)
//               );
//             } catch (e) {
//               if (e.response?.error_code !== 400) {
//                 console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ–Ω—é:", e);
//               }
//             }
//           }

//           const menu = await ctx.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", {
//             reply_markup: {
//               inline_keyboard: [
//                 [{
//                   text: 'üåê –û—Ç–∫—Ä—ã—Ç—å PeaceYourGun ü•ï –≤ WebApp',
//                   web_app: { url: process.env.WEBAPP_URL }
//                 }],
//                 [{ text: "üåç –í—Å–µ —Å—Ç—Ä–∞–Ω—ã", callback_data: "all_countries" }],
//                 [
//                   {
//                     text: "üéÇ –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É",
//                     callback_data: "filter_by_age",
//                   },
//                 ],
//                 [{ text: "‚ùå –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω", callback_data: "clear_screen" }],
//               ],
//             },
//           });

//           chatStorage.mainMenu.set(chatId, menu.message_id);
//           self.track(chatId, menu.message_id);
//         } catch (error) {
//           console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é:", error);
//           throw error;
//         }
//       });
//     },

//     sendCountriesKeyboard: async function (ctx) {
//       return messageQueue.add(async () => {
//         const chatId = ctx.chat.id;
//         const self = this;

//         try {
//           // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
//           if (chatStorage.countryKeyboard.has(chatId)) {
//             try {
//               await ctx.telegram.deleteMessage(
//                 chatId,
//                 chatStorage.countryKeyboard.get(chatId)
//               );
//               chatStorage.messages
//                 .get(chatId)
//                 ?.delete(chatStorage.countryKeyboard.get(chatId));
//               chatStorage.messageTimestamps.delete(
//                 chatStorage.countryKeyboard.get(chatId)
//               );
//             } catch (e) {
//               if (e.response?.error_code !== 400) {
//                 console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω:", e);
//               }
//             }
//           }

//           // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –∏–∑ –±–∞–∑—ã
//           const uniqueCountries = await getUniqueCountries();

//           // –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω –Ω–µ—Ç –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ
//           const countriesToShow =
//             uniqueCountries.length > 0 && uniqueCountries.length <= 50
//               ? uniqueCountries
//               : POPULAR_COUNTRIES.map((c) => c.name);

//           // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
//           const keyboard = [];
//           let row = [];

//           // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω—ã —Å —Ñ–ª–∞–≥–∞–º–∏
//           countriesToShow.forEach((country, index) => {
//             const countryWithFlag = formatCountryWithFlag(country);
//             row.push({
//               text: countryWithFlag,
//               callback_data: `country_${country}`,
//             });

//             // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 3 –∫–Ω–æ–ø–∫–∏
//             if (row.length === 3 || index === countriesToShow.length - 1) {
//               keyboard.push(row);
//               row = [];
//             }
//           });

//           // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
//           keyboard.push([{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_menu" }]);

//           const msg = await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", {
//             reply_markup: { inline_keyboard: keyboard },
//           });

//           chatStorage.countryKeyboard.set(chatId, msg.message_id);
//           self.track(chatId, msg.message_id);
//         } catch (error) {
//           console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω:", error);
//           throw error;
//         }
//       });
//     },
//   };

//   // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
//   bot.command("start", async (ctx) => {
//     await messageQueue.add(async () => {
//       try {
//         await messageManager.clear(ctx);
//         await messageManager.sendMainMenu(ctx);
//       } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã start:", error);
//       }
//     });
//   });

//   bot.action("show_profiles", async (ctx) => {
//     await messageQueue.add(async () => {
//       try {
//         await ctx.answerCbQuery("–ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∫–µ—Ç—ã...");

//         ctx.session = ctx.session || {};
//         ctx.session.profilesPage = 0;
//         ctx.session.filterCountry = null;
//         ctx.session.displayCountry = null;
//         ctx.session.ageRange = null;

//         console.log("Starting profiles load", {
//           cache: profilesCache.data ? "exists" : "empty",
//           cacheAge: Date.now() - profilesCache.timestamp,
//         });

//         await messageManager.clear(ctx);

//         if (
//           !profilesCache.data ||
//           Date.now() - profilesCache.timestamp > CACHE_TTL
//         ) {
//           profilesCache.clear();
//         }
//         const profiles = await getProfilesPage(0);

//         if (!profiles.length) {
//           const msg = await ctx.reply("–ê–Ω–∫–µ—Ç –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ");
//           messageManager.track(ctx.chat.id, msg.message_id);
//           return;
//         }

//         // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∞–Ω–∫–µ—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
//         for (let i = 0; i < profiles.length; i++) {
//           const isLast = i === profiles.length - 1;
//           await sendProfile(ctx, profiles[i], 0, profiles.length, isLast);
//           if (!isLast) await new Promise((resolve) => setTimeout(resolve, 300));
//         }

//         await messageManager.sendMainMenu(ctx);
//       } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–Ω–∫–µ—Ç:", error);
//         try {
//           await ctx.answerCbQuery("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏");
//           const msg = await ctx.reply(
//             "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∫–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑"
//           );
//           messageManager.track(ctx.chat.id, msg.message_id);
//         } catch (e) {
//           console.error("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:", e);
//         }
//       }
//     });
//   });

//   bot.action("all_countries", async (ctx) => {
//     await messageQueue.add(async () => {
//       try {
//         await messageManager.clear(ctx);
//         await messageManager.sendCountriesKeyboard(ctx);
//         await ctx.answerCbQuery();
//       } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω:", error);
//       }
//     });
//   });

//   // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞
//   bot.action(/^country_(.+)$/, async (ctx) => {
//     await messageQueue.add(async () => {
//       try {
//         const country = ctx.match[1];
//         ctx.session = ctx.session || {};
//         ctx.session.profilesPage = 0;
//         ctx.session.filterCountry = country;
//         ctx.session.displayCountry = country;

//         await messageManager.clear(ctx);
//         const profiles = await getProfilesPage(
//           0,
//           country,
//           ctx.session.ageRange
//         );

//         if (!profiles.length) {
//           const msg = await ctx.reply(`–ê–Ω–∫–µ—Ç –∏–∑ "${country}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
//           messageManager.track(ctx.chat.id, msg.message_id);
//           return;
//         }

//         // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∞–Ω–∫–µ—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
//         for (let i = 0; i < profiles.length; i++) {
//           const isLast = i === profiles.length - 1;
//           await sendProfile(ctx, profiles[i], 0, profiles.length, isLast);
//           if (!isLast) await new Promise((resolve) => setTimeout(resolve, 300));
//         }

//         await messageManager.sendMainMenu(ctx);
//       } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã:", error);
//       }
//     });
//   });

//   // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω
//   bot.action("back_to_menu", async (ctx) => {
//     await messageQueue.add(async () => {
//       try {
//         await messageManager.clear(ctx);
//         await messageManager.sendMainMenu(ctx);
//         await ctx.answerCbQuery();
//       } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é:", error);
//       }
//     });
//   });

//   // –ü–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä–∞–Ω–µ —á–µ—Ä–µ–∑ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
//   bot.action("search_by_country", async (ctx) => {
//     await messageQueue.add(async () => {
//       try {
//         chatStorage.userState.set(ctx.from.id, "awaiting_country");
//         const msg = await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø–æ–∏—Å–∫–∞:");
//         messageManager.track(ctx.chat.id, msg.message_id);
//         await ctx.answerCbQuery();
//       } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:", error);
//       }
//     });
//   });

//   // –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
//   bot.action("filter_by_age", async (ctx) => {
//     await messageQueue.add(async () => {
//       try {
//         await messageManager.clear(ctx);

//         const keyboard = AGE_RANGES.map((range) => [
//           { text: range.label, callback_data: `age_range_${range.label}` },
//         ]);
//         keyboard.push([
//           { text: "‚ùå –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", callback_data: "age_range_reset" },
//         ]);

//         const msg = await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:", {
//           reply_markup: { inline_keyboard: keyboard },
//         });

//         messageManager.track(ctx.chat.id, msg.message_id);
//         await ctx.answerCbQuery();
//       } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É:", error);
//       }
//     });
//   });

//   // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
//   bot.action(/^age_range_(.+)$/, async (ctx) => {
//     await messageQueue.add(async () => {
//       try {
//         const [_, range] = ctx.match;

//         ctx.session = ctx.session || {};
//         ctx.session.profilesPage = 0;

//         if (range === "reset") {
//           ctx.session.ageRange = null;
//         } else {
//           const selectedRange = AGE_RANGES.find((r) => r.label === range);
//           if (selectedRange) {
//             ctx.session.ageRange = selectedRange;
//           }
//         }

//         await messageManager.clear(ctx);
//         const profiles = await getProfilesPage(
//           0,
//           ctx.session.filterCountry,
//           ctx.session.ageRange
//         );

//         if (!profiles.length) {
//           const msg = await ctx.reply("–ê–Ω–∫–µ—Ç –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã");
//           messageManager.track(ctx.chat.id, msg.message_id);
//           return;
//         }

//         // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∞–Ω–∫–µ—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
//         for (let i = 0; i < profiles.length; i++) {
//           const isLast = i === profiles.length - 1;
//           await sendProfile(ctx, profiles[i], 0, profiles.length, isLast);
//           if (!isLast) await new Promise((resolve) => setTimeout(resolve, 300));
//         }

//         await messageManager.sendMainMenu(ctx);
//       } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞:", error);
//       }
//     });
//   });

//   // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
//   bot.on("text", async (ctx) => {
//     const userId = ctx.from.id;
//     if (chatStorage.userState.get(userId) === "awaiting_country") {
//       await messageQueue.add(async () => {
//         try {
//           messageManager.track(ctx.chat.id, ctx.message.message_id);
//           const countryInput = ctx.message.text.trim();

//           if (!countryInput) {
//             const msg = await ctx.reply("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å—Ç—Ä–∞–Ω—É");
//             messageManager.track(ctx.chat.id, msg.message_id);
//             return;
//           }

//           await messageManager.clear(ctx);
//           ctx.session = ctx.session || {};
//           ctx.session.profilesPage = 0;

//           const profiles = await getProfilesPage(
//             0,
//             countryInput,
//             ctx.session.ageRange
//           );

//           let normalizedCountry = null;
//           if (profiles.length > 0) {
//             normalizedCountry = profiles[0].country;
//           } else if (countryInput.toLowerCase() === "—Ä–æ—Å") {
//             normalizedCountry = "–†–æ—Å—Å–∏—è";
//           } else {
//             normalizedCountry = countryInput;
//           }

//           ctx.session.filterCountry = countryInput;
//           ctx.session.displayCountry = normalizedCountry;

//           if (profiles.length) {
//             for (let i = 0; i < profiles.length; i++) {
//               const isLast = i === profiles.length - 1;
//               await sendProfile(ctx, profiles[i], 0, profiles.length, isLast);
//               if (!isLast) await new Promise((resolve) => setTimeout(resolve, 300));
//             }
//           } else {
//             const msg = await ctx.reply(
//               `–ê–Ω–∫–µ—Ç –∏–∑ "${normalizedCountry}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`
//             );
//             messageManager.track(ctx.chat.id, msg.message_id);
//           }

//           await messageManager.sendMainMenu(ctx);
//         } catch (error) {
//           console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω—ã:", error);
//         }
//       });
//     }
//   });

//   // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
//   bot.action(/^page_(first|prev|next|last|\d+)_(\d+)$/, async (ctx) => {
//     await messageQueue.add(async () => {
//       try {
//         const [_, action, currentPage] = ctx.match;
//         let newPage = parseInt(currentPage);

//         if (action === "first") newPage = 0;
//         else if (action === "prev") newPage = Math.max(0, newPage - 1);
//         else if (action === "next") newPage = newPage + 1;
//         else if (action === "last")
//           newPage =
//             Math.ceil(profilesCache.data.length / PROFILES_PER_PAGE) - 1;
//         else newPage = parseInt(action);

//         await messageManager.clear(ctx);
//         ctx.session = ctx.session || {};

//         const profiles = await getProfilesPage(
//           newPage,
//           ctx.session.filterCountry,
//           ctx.session.ageRange
//         );

//         if (profiles.length) {
//           ctx.session.profilesPage = newPage;

//           for (let i = 0; i < profiles.length; i++) {
//             const isLast = i === profiles.length - 1;
//             await sendProfile(ctx, profiles[i], newPage, profiles.length, isLast);
//             if (!isLast) await new Promise((resolve) => setTimeout(resolve, 300));
//           }
//         } else {
//           const msg = await ctx.reply("–ë–æ–ª—å—à–µ –∞–Ω–∫–µ—Ç –Ω–µ—Ç");
//           messageManager.track(ctx.chat.id, msg.message_id);
//         }

//         await messageManager.sendMainMenu(ctx);
//       } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏:", error);
//       }
//     });
//   });

//   // –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
//   bot.action("clear_screen", async (ctx) => {
//     await messageQueue.add(async () => {
//       try {
//         await messageManager.clear(ctx);
//         await ctx.answerCbQuery("–≠–∫—Ä–∞–Ω –æ—á–∏—â–µ–Ω");
//       } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:", error);
//         await ctx.answerCbQuery("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ");
//       }
//     });
//   });

//   // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç—ã
//   const sendProfile = async (ctx, profile, page, total, isLast) => {
//     return messageQueue.add(async () => {
//       try {
//         const about =
//           profile.about?.length > MAX_CAPTION_LENGTH
//             ? profile.about.substring(0, MAX_CAPTION_LENGTH - 3) + "..."
//             : profile.about || "";

//         const formatTelegram = (username) => {
//           if (!username) return "";

//           if (username.startsWith("https://t.me/")) {
//             const cleaned = decodeURIComponent(username)
//               .replace("https://t.me/", "")
//               .replace(/^%40/, "@")
//               .replace(/^\+/, "");
//             return `üí¨ <a href="https://t.me/${cleaned}">Telegram</a>`;
//           }

//           const cleaned = username.replace(/^[@+]/, "");
//           return `üí¨ <a href="https://t.me/${cleaned}">Telegram</a>`;
//         };

//         const formatPhone = (phone) => {
//           if (!phone) return "";
//           const cleanPhone = phone.replace(/[^0-9+]/g, "");
//           return `üìû <a href="tel:${cleanPhone}">${phone}</a>`;
//         };

//         const formatWhatsApp = (url) => {
//           if (!url) return "";
//           return `üì± <a href="${url}">WhatsApp</a>`;
//         };

//         const caption = `
// üë§ <b>${profile.name}</b>, ${profile.age}\n\n
//  ${profile.country}\n
// üìç ${profile.city}\n
// <em>${profile.about}</em>\n
// ${profile.phone ? formatPhone(profile.phone) + "\n" : ""}
// ${profile.telegram ? formatTelegram(profile.telegram) + "\n" : ""}
// ${profile.whatsapp ? formatWhatsApp(profile.whatsapp) + "\n" : ""}
// ‚ö†üö® <b>–ù–ï –ø–ª–∞—Ç–∏—Ç–µ –≤–ø–µ—Ä–µ–¥ —Å –ø–æ–º–æ—â—å—é Transcash, –±–∏–ª–µ—Ç–æ–≤ PCS, Neosurf, BITCOIN –∏–ª–∏ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–µ ‚Äì —ç—Ç–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ª–æ—Ö–æ—Ç—Ä–æ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –Ω–∞–º –æ —Ç–∞–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª—è—Ö‚ùó</b>`.trim();

//         // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–Ω–∫–µ—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
//         let keyboard = [];
//         if (isLast) {
//           const totalPages = Math.ceil(
//             profilesCache.data.length / PROFILES_PER_PAGE
//           );
//           const paginationRow = [];

//           if (page > 0)
//             paginationRow.push({
//               text: "‚è™",
//               callback_data: `page_first_${page}`,
//             });
//           if (page > 0)
//             paginationRow.push({
//               text: "‚óÄÔ∏è",
//               callback_data: `page_prev_${page}`,
//             });

//           paginationRow.push({
//             text: `${page + 1}/${totalPages}`,
//             callback_data: "page_info",
//           });

//           if (page < totalPages - 1)
//             paginationRow.push({
//               text: "‚ñ∂Ô∏è",
//               callback_data: `page_next_${page}`,
//             });
//           if (page < totalPages - 1)
//             paginationRow.push({
//               text: "‚è©",
//               callback_data: `page_last_${page}`,
//             });

//           if (totalPages > 3) {
//             const quickPagesRow = [];
//             const maxQuickPages = Math.min(5, totalPages);
//             const startPage = Math.max(
//               0,
//               Math.min(
//                 page - Math.floor(maxQuickPages / 2),
//                 totalPages - maxQuickPages
//               )
//             );

//             for (let i = 0; i < maxQuickPages; i++) {
//               const p = startPage + i;
//               if (p >= 0 && p < totalPages) {
//                 quickPagesRow.push({
//                   text: p === page ? `‚Ä¢ ${p + 1} ‚Ä¢` : `${p + 1}`,
//                   callback_data: `page_${p}_${page}`,
//                 });
//               }
//             }
//             keyboard.push(quickPagesRow);
//           }

//           const filtersRow = [];
//           if (ctx.session?.displayCountry || ctx.session?.ageRange?.label) {
//             let filtersText = "üîπ ";
//             if (ctx.session.displayCountry)
//               filtersText += `–°—Ç—Ä–∞–Ω–∞: ${ctx.session.displayCountry}`;
//             if (ctx.session.ageRange?.label) {
//               if (ctx.session.displayCountry) filtersText += ", ";
//               filtersText += `–í–æ–∑—Ä–∞—Å—Ç: ${ctx.session.ageRange.label}`;
//             }
//             filtersRow.push({
//               text: filtersText,
//               callback_data: "filters_info",
//             });
//           }

//           keyboard =
//             filtersRow.length > 0
//               ? [paginationRow, ...keyboard, filtersRow]
//               : [paginationRow, ...keyboard];
//         }

//         try {
//           const msg = await ctx.replyWithPhoto(profile.photoUrl, {
//             caption,
//             parse_mode: "HTML",
//             reply_markup:
//               keyboard.length > 0 ? { inline_keyboard: keyboard } : undefined,
//           });
//           messageManager.track(ctx.chat.id, msg.message_id);
//           return msg;
//         } catch (e) {
//           const msg = await ctx.reply(caption, {
//             parse_mode: "HTML",
//             reply_markup:
//               keyboard.length > 0 ? { inline_keyboard: keyboard } : undefined,
//           });
//           messageManager.track(ctx.chat.id, msg.message_id);
//           return msg;
//         }
//       } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç—ã:", error);
//         return null;
//       }
//     });
//   };
// };


// const RateLimiter = require("telegraf-ratelimit");
// const { default: PQueue } = require("p-queue");

// // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
// const messageQueue = new PQueue({
//   concurrency: 5,
//   interval: 1000,
//   intervalCap: 5,
// });

// // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (24 —á–∞—Å–∞)
// const MESSAGE_TTL = 86400000;

// module.exports = (bot, db) => {
//   // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
//   const PROFILES_PER_PAGE = 5;
//   const MAX_CAPTION_LENGTH = 900;
//   const CACHE_TTL = 300000;
//   const AGE_RANGES = [
//     { label: "18-25", min: 18, max: 25 },
//     { label: "26-35", min: 26, max: 35 },
//     { label: "36-45", min: 36, max: 45 },
//     { label: "46+", min: 46, max: 999 },
//   ];


// // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç (PROFILES_PER_PAGE, MAX_CAPTION_LENGTH –∏ —Ç.–¥.)
// const checkSubscription = async (userId, db) => {
//     try {
//         const subRef = db.collection('subscriptions').doc(userId.toString());
//         const doc = await subRef.get();
        
//         if (!doc.exists) return false;
        
//         const subData = doc.data();
//         return subData.isActive && subData.endDate.toDate() > new Date();
//     } catch (error) {
//         console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
//         return false;
//     }
// };
//   // –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å—Ç—Ä–∞–Ω —Å —ç–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–∞–º–∏
//   const POPULAR_COUNTRIES = [
//     { name: "–†–æ—Å—Å–∏—è", flag: "üá∑üá∫" },
//     { name: "–£–∫—Ä–∞–∏–Ω–∞", flag: "üá∫üá¶" },
//     { name: "–ë–µ–ª–∞—Ä—É—Å—å", flag: "üáßüáæ" },
//     { name: "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", flag: "üá∞üáø" },
//     { name: "–°–®–ê", flag: "üá∫üá∏" },
//     { name: "–ì–µ—Ä–º–∞–Ω–∏—è", flag: "üá©üá™" },
//     { name: "–§—Ä–∞–Ω—Ü–∏—è", flag: "üá´üá∑" },
//     { name: "–ò—Ç–∞–ª–∏—è", flag: "üáÆüáπ" },
//     { name: "–ò—Å–ø–∞–Ω–∏—è", flag: "üá™üá∏" },
//     { name: "–¢—É—Ä—Ü–∏—è", flag: "üáπüá∑" },
//     { name: "–ö–∏—Ç–∞–π", flag: "üá®üá≥" },
//     { name: "–Ø–ø–æ–Ω–∏—è", flag: "üáØüáµ" },
//     { name: "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è", flag: "üá¨üáß" },
//     { name: "–ü–æ–ª—å—à–∞", flag: "üáµüá±" },
//     { name: "–ò–∑—Ä–∞–∏–ª—å", flag: "üáÆüá±" },
//     { name: "–û–ê–≠", flag: "üá¶üá™" },
//     { name: "–¢–∞–∏–ª–∞–Ω–¥", flag: "üáπüá≠" },
//     { name: "–ò–Ω–¥–∏—è", flag: "üáÆüá≥" },
//     { name: "–ë—Ä–∞–∑–∏–ª–∏—è", flag: "üáßüá∑" },
//     { name: "–ö–∞–Ω–∞–¥–∞", flag: "üá®üá¶" },
//     // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
//     { name: "–ê–≤—Å—Ç—Ä–∞–ª–∏—è", flag: "üá¶üá∫" },
//     { name: "–ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è", flag: "üá≥üáø" },
//     { name: "–ú–µ–∫—Å–∏–∫–∞", flag: "üá≤üáΩ" },
//     { name: "–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞", flag: "üá¶üá∑" },
//     { name: "–ß–∏–ª–∏", flag: "üá®üá±" },
//     { name: "–ö–æ–ª—É–º–±–∏—è", flag: "üá®üá¥" },
//     { name: "–ü–µ—Ä—É", flag: "üáµüá™" },
//     { name: "–í–µ–Ω–µ—Å—É—ç–ª–∞", flag: "üáªüá™" },
//     { name: "–ö—É–±–∞", flag: "üá®üá∫" },
//     { name: "–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è", flag: "üá∞üá∑" },
//     { name: "–ò–Ω–¥–æ–Ω–µ–∑–∏—è", flag: "üáÆüá©" },
//     { name: "–í—å–µ—Ç–Ω–∞–º", flag: "üáªüá≥" },
//     { name: "–ú–∞–ª–∞–π–∑–∏—è", flag: "üá≤üáæ" },
//     { name: "–§–∏–ª–∏–ø–ø–∏–Ω—ã", flag: "üáµüá≠" },
//     { name: "–°–∏–Ω–≥–∞–ø—É—Ä", flag: "üá∏üá¨" },
//     { name: "–°–∞—É–¥–æ–≤—Å–∫–∞—è –ê—Ä–∞–≤–∏—è", flag: "üá∏üá¶" },
//     { name: "–ö–∞—Ç–∞—Ä", flag: "üá∂üá¶" },
//     { name: "–ö—É–≤–µ–π—Ç", flag: "üá∞üáº" },
//     { name: "–ò—Ä–∞–Ω", flag: "üáÆüá∑" },
//     { name: "–ò—Ä–∞–∫", flag: "üáÆüá∂" },
//     { name: "–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω", flag: "üá¶üáø" },
//     { name: "–ê—Ä–º–µ–Ω–∏—è", flag: "üá¶üá≤" },
//     { name: "–ì—Ä—É–∑–∏—è", flag: "üá¨üá™" },
//     { name: "–ú–æ–ª–¥–æ–≤–∞", flag: "üá≤üá©" },
//     { name: "–õ–∞—Ç–≤–∏—è", flag: "üá±üáª" },
//     { name: "–õ–∏—Ç–≤–∞", flag: "üá±üáπ" },
//     { name: "–≠—Å—Ç–æ–Ω–∏—è", flag: "üá™üá™" },
//     { name: "–§–∏–Ω–ª—è–Ω–¥–∏—è", flag: "üá´üáÆ" },
//     { name: "–®–≤–µ—Ü–∏—è", flag: "üá∏üá™" },
//     { name: "–ù–æ—Ä–≤–µ–≥–∏—è", flag: "üá≥üá¥" },
//     { name: "–î–∞–Ω–∏—è", flag: "üá©üá∞" },
//     { name: "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã", flag: "üá≥üá±" },
//     { name: "–ë–µ–ª—å–≥–∏—è", flag: "üáßüá™" },
//     { name: "–®–≤–µ–π—Ü–∞—Ä–∏—è", flag: "üá®üá≠" },
//     { name: "–ê–≤—Å—Ç—Ä–∏—è", flag: "üá¶üáπ" },
//     { name: "–ß–µ—Ö–∏—è", flag: "üá®üáø" },
//     { name: "–°–ª–æ–≤–∞–∫–∏—è", flag: "üá∏üá∞" },
//     { name: "–í–µ–Ω–≥—Ä–∏—è", flag: "üá≠üá∫" },
//     { name: "–†—É–º—ã–Ω–∏—è", flag: "üá∑üá¥" },
//     { name: "–ë–æ–ª–≥–∞—Ä–∏—è", flag: "üáßüá¨" },
//     { name: "–°–µ—Ä–±–∏—è", flag: "üá∑üá∏" },
//     { name: "–•–æ—Ä–≤–∞—Ç–∏—è", flag: "üá≠üá∑" },
//     { name: "–ì—Ä–µ—Ü–∏—è", flag: "üá¨üá∑" },
//     { name: "–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è", flag: "üáµüáπ" },
//     { name: "–ò—Ä–ª–∞–Ω–¥–∏—è", flag: "üáÆüá™" },
//     { name: "–ò—Å–ª–∞–Ω–¥–∏—è", flag: "üáÆüá∏" },
//     { name: "–ú–∞–ª—å—Ç–∞", flag: "üá≤üáπ" },
//     { name: "–ö–∏–ø—Ä", flag: "üá®üáæ" },
//     { name: "–õ—é–∫—Å–µ–º–±—É—Ä–≥", flag: "üá±üá∫" },
//     { name: "–ê—Ñ–≥–∞–Ω–∏—Å—Ç–∞–Ω", flag: "üá¶üá´" },
//     { name: "–ü–∞–∫–∏—Å—Ç–∞–Ω", flag: "üáµüá∞" },
//     { name: "–ë–∞–Ω–≥–ª–∞–¥–µ—à", flag: "üáßüá©" },
//     { name: "–®—Ä–∏-–õ–∞–Ω–∫–∞", flag: "üá±üá∞" },
//     { name: "–ù–µ–ø–∞–ª", flag: "üá≥üáµ" },
//   ];

//   // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è rate-limiter
//   const limiter = new RateLimiter({
//     window: 1000,
//     limit: 3,
//     onLimitExceeded: (ctx) =>
//       ctx.reply("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–¥–æ–∂–¥–∏—Ç–µ —Å–µ–∫—É–Ω–¥—É..."),
//   });

//   bot.use(limiter);

//   // –°–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
//   const chatStorage = {
//     messages: new Map(), // chatId: Set(messageIds)
//     mainMenu: new Map(), // chatId: messageId
//     userState: new Map(), // userId: state
//     messageTimestamps: new Map(), // messageId: timestamp
//     countryKeyboard: new Map(), // chatId: messageId (–¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Å—Ç—Ä–∞–Ω)
//     cityKeyboard: new Map(), // chatId: messageId (–¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≥–æ—Ä–æ–¥–æ–≤)
//   };

//   // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
//   setInterval(() => {
//     const now = Date.now();
//     for (const [chatId, messages] of chatStorage.messages) {
//       for (const messageId of messages) {
//         if (
//           now - (chatStorage.messageTimestamps.get(messageId) || 0) >
//           MESSAGE_TTL
//         ) {
//           messages.delete(messageId);
//           chatStorage.messageTimestamps.delete(messageId);
//         }
//       }
//     }
//   }, 21600000);

//   // –ö—ç—à –¥–∞–Ω–Ω—ã—Ö
//   const profilesCache = {
//     data: null,
//     timestamp: 0,
//     countryFilter: null,
//     ageFilter: null,
//     cityFilter: null,
//     clear: function () {
//       this.data = null;
//       this.timestamp = 0;
//       this.countryFilter = null;
//       this.ageFilter = null;
//       this.cityFilter = null;
//     },
//   };

//   // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Å—Ç—Ä–∞–Ω–µ –∏ –≥–æ—Ä–æ–¥—É
//   const getProfilesPage = async (
//     page = 0,
//     searchCountry = null,
//     ageRange = null,
//     searchCity = null
//   ) => {
//     try {
//       const now = Date.now();
//       const cacheKey = `${searchCountry || "all"}_${
//         ageRange ? ageRange.label : "all"
//       }_${searchCity || "all"}`;

//       if (
//         profilesCache.data &&
//         now - profilesCache.timestamp < CACHE_TTL &&
//         profilesCache.countryFilter === (searchCountry || null) &&
//         profilesCache.ageFilter === (ageRange ? ageRange.label : null) &&
//         profilesCache.cityFilter === (searchCity || null)
//       ) {
//         return profilesCache.data.slice(
//           page * PROFILES_PER_PAGE,
//           (page + 1) * PROFILES_PER_PAGE
//         );
//       }

//       const snapshot = await db
//         .collection("profiles")
//         .orderBy("createdAt", "desc")
//         .get();

//       let profiles = snapshot.docs.map((doc) => ({
//         id: doc.id,
//         ...doc.data(),
//       }));

//       // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–µ
//       if (searchCountry) {
//         const searchTerm = searchCountry.toLowerCase().trim();
//         profiles = profiles.filter((profile) => {
//           const profileCountry = profile.country?.toLowerCase() || "";
//           return (
//             profileCountry.includes(searchTerm) ||
//             (searchTerm === "—Ä–æ—Å" && profileCountry.includes("—Ä–æ—Å—Å–∏—è"))
//           );
//         });
//       }

//       // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
//       if (ageRange) {
//         profiles = profiles.filter((profile) => {
//           const age = parseInt(profile.age) || 0;
//           return age >= ageRange.min && age <= ageRange.max;
//         });
//       }

//       // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥–æ—Ä–æ–¥—É
//       if (searchCity) {
//         const searchTerm = searchCity.toLowerCase().trim();
//         profiles = profiles.filter((profile) => {
//           const profileCity = profile.city?.toLowerCase() || "";
//           return profileCity.includes(searchTerm);
//         });
//       }

//       profilesCache.data = profiles;
//       profilesCache.timestamp = now;
//       profilesCache.countryFilter = searchCountry || null;
//       profilesCache.ageFilter = ageRange ? ageRange.label : null;
//       profilesCache.cityFilter = searchCity || null;

//       return profiles.slice(
//         page * PROFILES_PER_PAGE,
//         (page + 1) * PROFILES_PER_PAGE
//       );
//     } catch (error) {
//       console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∫–µ—Ç:", error);
//       profilesCache.clear();
//       return [];
//     }
//   };

//   // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
//   const getUniqueCountries = async () => {
//     try {
//       const snapshot = await db.collection("profiles").orderBy("country").get();

//       const countries = new Set();
//       snapshot.docs.forEach((doc) => {
//         const country = doc.data().country;
//         if (country) countries.add(country);
//       });

//       return Array.from(countries).sort();
//     } catch (error) {
//       console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω:", error);
//       return [];
//     }
//   };

//   // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã
//   const getUniqueCitiesForCountry = async (country) => {
//     try {
//       const snapshot = await db
//         .collection("profiles")
//         .where("country", "==", country)
//         .orderBy("city")
//         .get();

//       const cities = new Set();
//       snapshot.docs.forEach((doc) => {
//         const city = doc.data().city;
//         if (city) cities.add(city);
//       });

//       return Array.from(cities).sort();
//     } catch (error) {
//       console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤:", error);
//       return [];
//     }
//   };

//   // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ñ–ª–∞–≥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö)
//   const formatCountryWithFlag = (countryName) => {
//     if (!countryName) return countryName;

//     const foundCountry = POPULAR_COUNTRIES.find(
//       (c) => c.name.toLowerCase() === countryName.toLowerCase()
//     );

//     return foundCountry ? `${foundCountry.flag} ${countryName}` : countryName;
//   };

//   // –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
//   const messageManager = {
//     track: function (chatId, messageId) {
//       if (!messageId) return;
//       if (!chatStorage.messages.has(chatId)) {
//         chatStorage.messages.set(chatId, new Set());
//       }
//       chatStorage.messages.get(chatId).add(messageId);
//       chatStorage.messageTimestamps.set(messageId, Date.now());
//     },

//     clear: async function (ctx, keepCityKeyboard = false) {
//   const chatId = ctx.chat.id;
//   if (!chatStorage.messages.has(chatId)) return;

//   const messages = [...chatStorage.messages.get(chatId)];
//   const mainMenuId = chatStorage.mainMenu.get(chatId);
//   const countryKeyboardId = chatStorage.countryKeyboard.get(chatId);
//   const cityKeyboardId = chatStorage.cityKeyboard.get(chatId);

//   for (const messageId of messages) {
//     if (
//       messageId !== mainMenuId &&
//       messageId !== countryKeyboardId &&
//       messageId !== cityKeyboardId
//     ) {
//       try {
//         await ctx.telegram.deleteMessage(chatId, messageId);
//         chatStorage.messages.get(chatId).delete(messageId);
//         chatStorage.messageTimestamps.delete(messageId);
//       } catch (e) {
//         if (e.response?.error_code !== 400) {
//           console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${messageId}:`, e.message);
//         }
//       }
//     }
//   }

//   // –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–æ—Ä–æ–¥–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ
//   if (cityKeyboardId && !keepCityKeyboard) {
//     try {
//       await ctx.telegram.deleteMessage(chatId, cityKeyboardId);
//       chatStorage.messages.get(chatId).delete(cityKeyboardId);
//       chatStorage.messageTimestamps.delete(cityKeyboardId);
//       chatStorage.cityKeyboard.delete(chatId);
//     } catch (e) {
//       if (e.response?.error_code !== 400) {
//         console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–æ—Ä–æ–¥–æ–≤:", e);
//       }
//     }
//   }

//   // –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
//   if (countryKeyboardId) {
//     try {
//       await ctx.telegram.deleteMessage(chatId, countryKeyboardId);
//       chatStorage.messages.get(chatId).delete(countryKeyboardId);
//       chatStorage.messageTimestamps.delete(countryKeyboardId);
//       chatStorage.countryKeyboard.delete(chatId);
//     } catch (e) {
//       if (e.response?.error_code !== 400) {
//         console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω:", e);
//       }
//     }
//   }

//   chatStorage.userState.delete(ctx.from.id);
// },
// sendMainMenu: async function (ctx) {
//   return messageQueue.add(async () => {
//     const chatId = ctx.chat.id;
//     const self = this;

//     try {
//       // 1. –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –º–µ–Ω—é
//       if (chatStorage.mainMenu.has(chatId)) {
//         try {
//           await ctx.telegram.deleteMessage(chatId, chatStorage.mainMenu.get(chatId));
//           chatStorage.messages.get(chatId)?.delete(chatStorage.mainMenu.get(chatId));
//           chatStorage.messageTimestamps.delete(chatStorage.mainMenu.get(chatId));
//         } catch (e) {
//           if (e.response?.error_code !== 400) {
//             console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ–Ω—é:", e);
//           }
//         }
//       }

//       // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (db –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ)
//       const hasSub = await checkSubscription(ctx.from.id, db);

//       // 3. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
//       const menuButtons = [
//         [{
//           text: 'üåê –û—Ç–∫—Ä—ã—Ç—å PeaceYourGun ü•ï –≤ WebApp', 
//           web_app: { url: process.env.WEBAPP_URL }
//         }]
//       ];

//       // 4. –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ —Å—Ç—Ä–∞–Ω—ã" —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
//       if (hasSub) {
//         menuButtons.push([{ 
//           text: "üåç –í—Å–µ —Å—Ç—Ä–∞–Ω—ã", 
//           callback_data: "all_countries" 
//         }]);
//       }

//       // 5. –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
//       menuButtons.push(
//         [{ text: "üéÇ –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É", callback_data: "filter_by_age" }],
//         [{ text: "‚ùå –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω", callback_data: "clear_screen" }]
//       );

//       // 6. –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é
//       const menu = await ctx.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", {
//         reply_markup: { inline_keyboard: menuButtons },
//       });

//       // 7. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
//       chatStorage.mainMenu.set(chatId, menu.message_id);
//       self.track(chatId, menu.message_id);

//     } catch (error) {
//       console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é:", error);
//       throw error;
//     }
//   });
// },
//     // sendMainMenu: async function (ctx) {
//     //   return messageQueue.add(async () => {
//     //     const chatId = ctx.chat.id;
//     //     const self = this;

//     //     try {
//     //       // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é –µ—Å–ª–∏ –µ—Å—Ç—å
//     //       if (chatStorage.mainMenu.has(chatId)) {
//     //         try {
//     //           await ctx.telegram.deleteMessage(
//     //             chatId,
//     //             chatStorage.mainMenu.get(chatId)
//     //           );
//     //           chatStorage.messages
//     //             .get(chatId)
//     //             ?.delete(chatStorage.mainMenu.get(chatId));
//     //           chatStorage.messageTimestamps.delete(
//     //             chatStorage.mainMenu.get(chatId)
//     //           );
//     //         } catch (e) {
//     //           if (e.response?.error_code !== 400) {
//     //             console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ–Ω—é:", e);
//     //           }
//     //         }
//     //       }

//     //       const menu = await ctx.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", {
//     //         reply_markup: {
//     //           inline_keyboard: [
//     //             [{
//     //               text: 'üåê –û—Ç–∫—Ä—ã—Ç—å PeaceYourGun ü•ï –≤ WebApp',
//     //               web_app: { url: process.env.WEBAPP_URL }
//     //             }],
//     //             [{ text: "üåç –í—Å–µ —Å—Ç—Ä–∞–Ω—ã", callback_data: "all_countries" }],
//     //             [
//     //               {
//     //                 text: "üéÇ –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É",
//     //                 callback_data: "filter_by_age",
//     //               },
//     //             ],
//     //             [{ text: "‚ùå –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω", callback_data: "clear_screen" }],
//     //           ],
//     //         },
//     //       });

//     //       chatStorage.mainMenu.set(chatId, menu.message_id);
//     //       self.track(chatId, menu.message_id);
//     //     } catch (error) {
//     //       console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é:", error);
//     //       throw error;
//     //     }
//     //   });
//     // },

//     sendCountriesKeyboard: async function (ctx) {
//       return messageQueue.add(async () => {
//         const chatId = ctx.chat.id;
//         const self = this;

//         try {
//           // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
//           if (chatStorage.countryKeyboard.has(chatId)) {
//             try {
//               await ctx.telegram.deleteMessage(
//                 chatId,
//                 chatStorage.countryKeyboard.get(chatId)
//               );
//               chatStorage.messages
//                 .get(chatId)
//                 ?.delete(chatStorage.countryKeyboard.get(chatId));
//               chatStorage.messageTimestamps.delete(
//                 chatStorage.countryKeyboard.get(chatId)
//               );
//             } catch (e) {
//               if (e.response?.error_code !== 400) {
//                 console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω:", e);
//               }
//             }
//           }

//           // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –∏–∑ –±–∞–∑—ã
//           const uniqueCountries = await getUniqueCountries();

//           // –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω –Ω–µ—Ç –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ
//           const countriesToShow =
//             uniqueCountries.length > 0 && uniqueCountries.length <= 50
//               ? uniqueCountries
//               : POPULAR_COUNTRIES.map((c) => c.name);

//           // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
//           const keyboard = [];
//           let row = [];

//           // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω—ã —Å —Ñ–ª–∞–≥–∞–º–∏
//           countriesToShow.forEach((country, index) => {
//             const countryWithFlag = formatCountryWithFlag(country);
//             row.push({
//               text: countryWithFlag,
//               callback_data: `country_${country}`,
//             });

//             // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 3 –∫–Ω–æ–ø–∫–∏
//             if (row.length === 3 || index === countriesToShow.length - 1) {
//               keyboard.push(row);
//               row = [];
//             }
//           });

//           // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
//           keyboard.push([{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_menu" }]);

//           const msg = await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", {
//             reply_markup: { inline_keyboard: keyboard },
//           });

//           chatStorage.countryKeyboard.set(chatId, msg.message_id);
//           self.track(chatId, msg.message_id);
//         } catch (error) {
//           console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω:", error);
//           throw error;
//         }
//       });
//     },

//     sendCitiesKeyboard: async function (ctx, country) {
//       return messageQueue.add(async () => {
//         const chatId = ctx.chat.id;
//         const self = this;

//         try {
//           // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–æ—Ä–æ–¥–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
//           if (chatStorage.cityKeyboard.has(chatId)) {
//             try {
//               await ctx.telegram.deleteMessage(
//                 chatId,
//                 chatStorage.cityKeyboard.get(chatId)
//               );
//               chatStorage.messages
//                 .get(chatId)
//                 ?.delete(chatStorage.cityKeyboard.get(chatId));
//               chatStorage.messageTimestamps.delete(
//                 chatStorage.cityKeyboard.get(chatId)
//               );
//             } catch (e) {
//               if (e.response?.error_code !== 400) {
//                 console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–æ—Ä–æ–¥–æ–≤:", e);
//               }
//             }
//           }

//           // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã
//           const cities = await getUniqueCitiesForCountry(country);

//           // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
//           const keyboard = [];
//           let row = [];

//           // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥–∞
//           cities.forEach((city, index) => {
//             row.push({
//               text: city,
//               callback_data: `city_${city}`,
//             });

//             // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 3 –∫–Ω–æ–ø–∫–∏
//             if (row.length === 3 || index === cities.length - 1) {
//               keyboard.push(row);
//               row = [];
//             }
//           });

//           // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
//           keyboard.push([
//             { text: "üéÇ –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É", callback_data: "filter_by_age" },
//           ]);
//           keyboard.push([
//             { text: "üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç—Ä–∞–Ω–∞–º", callback_data: "back_to_countries" },
//           ]);

//           const msg = await ctx.reply(`–ì–æ—Ä–æ–¥–∞ –≤ ${country}:`, {
//             reply_markup: { inline_keyboard: keyboard },
//           });

//           chatStorage.cityKeyboard.set(chatId, msg.message_id);
//           self.track(chatId, msg.message_id);
//         } catch (error) {
//           console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–æ—Ä–æ–¥–æ–≤:", error);
//           throw error;
//         }
//       });
//     },
//   };

//   // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
//   bot.command("start", async (ctx) => {
//     await messageQueue.add(async () => {
//       try {
//         await messageManager.clear(ctx);
//         await messageManager.sendMainMenu(ctx);
//       } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã start:", error);
//       }
//     });
//   });

//   bot.action("show_profiles", async (ctx) => {
//     await messageQueue.add(async () => {
//       try {
//         await ctx.answerCbQuery("–ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∫–µ—Ç—ã...");

//         ctx.session = ctx.session || {};
//         ctx.session.profilesPage = 0;
//         ctx.session.filterCountry = null;
//         ctx.session.displayCountry = null;
//         ctx.session.ageRange = null;
//         ctx.session.filterCity = null;

//         console.log("Starting profiles load", {
//           cache: profilesCache.data ? "exists" : "empty",
//           cacheAge: Date.now() - profilesCache.timestamp,
//         });

//         await messageManager.clear(ctx);

//         if (
//           !profilesCache.data ||
//           Date.now() - profilesCache.timestamp > CACHE_TTL
//         ) {
//           profilesCache.clear();
//         }
//         const profiles = await getProfilesPage(0);

//         if (!profiles.length) {
//           const msg = await ctx.reply("–ê–Ω–∫–µ—Ç –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ");
//           messageManager.track(ctx.chat.id, msg.message_id);
//           return;
//         }

//         // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∞–Ω–∫–µ—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
//         for (let i = 0; i < profiles.length; i++) {
//           const isLast = i === profiles.length - 1;
//           await sendProfile(ctx, profiles[i], 0, profiles.length, isLast);
//           if (!isLast) await new Promise((resolve) => setTimeout(resolve, 300));
//         }

//         await messageManager.sendMainMenu(ctx);
//       } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–Ω–∫–µ—Ç:", error);
//         try {
//           await ctx.answerCbQuery("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏");
//           const msg = await ctx.reply(
//             "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∫–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑"
//           );
//           messageManager.track(ctx.chat.id, msg.message_id);
//         } catch (e) {
//           console.error("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:", e);
//         }
//       }
//     });
//   });
// bot.action("all_countries", async (ctx) => {
//     try {
//         // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
//         const hasSub = await checkSubscription(ctx.from.id, db);
        
//         // 2. –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º
//         if (!hasSub) {
//             await ctx.answerCbQuery("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞");
//             return;
//         }
        
//         // 3. –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å - –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
//         await ctx.answerCbQuery("–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω...");
        
//         return messageQueue.add(async () => {
//             try {
//                 await messageManager.clear(ctx);
//                 await messageManager.sendCountriesKeyboard(ctx);
//             } catch (error) {
//                 console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω:", error);
//                 await ctx.answerCbQuery("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏");
//             }
//         });
        
//     } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ all_countries:", error);
//         await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
//     }
// });
//   // bot.action("all_countries", async (ctx) => {
    
//   //   await messageQueue.add(async () => {
//   //     try {
//   //       await messageManager.clear(ctx);
//   //       await messageManager.sendCountriesKeyboard(ctx);
//   //       await ctx.answerCbQuery();
//   //     } catch (error) {
//   //       console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω:", error);
//   //     }
//   //   });
//   // });

//   // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞
//   bot.action(/^country_(.+)$/, async (ctx) => {
//     await messageQueue.add(async () => {
//       try {
//         const country = ctx.match[1];
//         ctx.session = ctx.session || {};
//         ctx.session.profilesPage = 0;
//         ctx.session.filterCountry = country;
//         ctx.session.displayCountry = country;
//         ctx.session.filterCity = null;

//         await messageManager.clear(ctx);
//         await messageManager.sendCitiesKeyboard(ctx, country);
//         await ctx.answerCbQuery();
//       } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã:", error);
//       }
//     });
//   });

//   // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
// bot.action(/^city_(.+)$/, async (ctx) => {
//   await messageQueue.add(async () => {
//     try {
//       const city = ctx.match[1];
//       ctx.session = ctx.session || {};
//       ctx.session.profilesPage = 0;
//       ctx.session.filterCity = city;

//       // –û—á–∏—â–∞–µ–º, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–æ—Ä–æ–¥–æ–≤
//       await messageManager.clear(ctx, true);

//       // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤–Ω–∏–∑—É
//       await messageManager.sendMainMenu(ctx);

//       const profiles = await getProfilesPage(
//         0,
//         ctx.session.filterCountry,
//         ctx.session.ageRange,
//         city
//       );

//       if (!profiles.length) {
//         const msg = await ctx.reply(`–ê–Ω–∫–µ—Ç –∏–∑ –≥–æ—Ä–æ–¥–∞ "${city}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
//         messageManager.track(ctx.chat.id, msg.message_id);
//         return;
//       }

//       // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—ã
//       for (let i = 0; i < profiles.length; i++) {
//         const isLast = i === profiles.length - 1;
//         await sendProfile(ctx, profiles[i], 0, profiles.length, isLast);
//         if (!isLast) await new Promise((resolve) => setTimeout(resolve, 300));
//       }
//     } catch (error) {
//       console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞:", error);
//     }
//   });
// });
  
//   bot.action("back_to_countries", async (ctx) => {
//     await messageQueue.add(async () => {
//       try {
//         await messageManager.clear(ctx);
//         await messageManager.sendCountriesKeyboard(ctx);
//         await ctx.answerCbQuery();
//       } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å—Ç—Ä–∞–Ω–∞–º:", error);
//       }
//     });
//   });

//   // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω
//   bot.action("back_to_menu", async (ctx) => {
//     await messageQueue.add(async () => {
//       try {
//         await messageManager.clear(ctx);
//         await messageManager.sendMainMenu(ctx);
//         await ctx.answerCbQuery();
//       } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é:", error);
//       }
//     });
//   });

//   // –ü–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä–∞–Ω–µ —á–µ—Ä–µ–∑ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
//   bot.action("search_by_country", async (ctx) => {
//     await messageQueue.add(async () => {
//       try {
//         chatStorage.userState.set(ctx.from.id, "awaiting_country");
//         const msg = await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø–æ–∏—Å–∫–∞:");
//         messageManager.track(ctx.chat.id, msg.message_id);
//         await ctx.answerCbQuery();
//       } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:", error);
//       }
//     });
//   });

//   // –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
//   bot.action("filter_by_age", async (ctx) => {
//     await messageQueue.add(async () => {
//       try {
//         await messageManager.clear(ctx);

//         const keyboard = AGE_RANGES.map((range) => [
//           { text: range.label, callback_data: `age_range_${range.label}` },
//         ]);
//         keyboard.push([
//           { text: "‚ùå –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", callback_data: "age_range_reset" },
//         ]);

//         const msg = await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:", {
//           reply_markup: { inline_keyboard: keyboard },
//         });

//         messageManager.track(ctx.chat.id, msg.message_id);
//         await ctx.answerCbQuery();
//       } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É:", error);
//       }
//     });
//   });


//   // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
// bot.action(/^age_range_(.+)$/, async (ctx) => {
//   await messageQueue.add(async () => {
//     try {
//       const [_, range] = ctx.match;
//       ctx.session = ctx.session || {};
//       ctx.session.profilesPage = 0;

//       if (range === "reset") {
//         ctx.session.ageRange = null;
//       } else {
//         const selectedRange = AGE_RANGES.find((r) => r.label === range);
//         if (selectedRange) {
//           ctx.session.ageRange = selectedRange;
//         }
//       }

//       // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥ –∏ —Å—Ç—Ä–∞–Ω—É –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
//       const currentCountry = ctx.session.filterCountry;
//       const currentCity = ctx.session.filterCity;

//       // –û—á–∏—â–∞–µ–º, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–æ—Ä–æ–¥–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
//       await messageManager.clear(ctx, true);

//       // –ï—Å–ª–∏ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞, –Ω–æ –Ω–µ –≥–æ—Ä–æ–¥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ—Ä–æ–¥–∞ —Å–Ω–æ–≤–∞
//       if (currentCountry && !currentCity) {
//         await messageManager.sendCitiesKeyboard(ctx, currentCountry);
//       }

//       // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∫–µ—Ç—ã —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
//       const profiles = await getProfilesPage(
//         0,
//         currentCountry,
//         ctx.session.ageRange,
//         currentCity
//       );

//       if (!profiles.length) {
//         const msg = await ctx.reply("–ê–Ω–∫–µ—Ç –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã");
//         messageManager.track(ctx.chat.id, msg.message_id);
//         return;
//       }

//       // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—ã
//       for (let i = 0; i < profiles.length; i++) {
//         const isLast = i === profiles.length - 1;
//         await sendProfile(ctx, profiles[i], 0, profiles.length, isLast);
//         if (!isLast) await new Promise((resolve) => setTimeout(resolve, 300));
//       }

//       // –ï—Å–ª–∏ –±—ã–ª –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ - –æ—Å—Ç–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
//       if (currentCity) {
//         await messageManager.sendMainMenu(ctx);
//       }
//     } catch (error) {
//       console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞:", error);
//     }
//   });
// });

//   // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
//   bot.on("text", async (ctx) => {
//     const userId = ctx.from.id;
//     if (chatStorage.userState.get(userId) === "awaiting_country") {
//       await messageQueue.add(async () => {
//         try {
//           messageManager.track(ctx.chat.id, ctx.message.message_id);
//           const countryInput = ctx.message.text.trim();

//           if (!countryInput) {
//             const msg = await ctx.reply("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å—Ç—Ä–∞–Ω—É");
//             messageManager.track(ctx.chat.id, msg.message_id);
//             return;
//           }

//           await messageManager.clear(ctx);
//           ctx.session = ctx.session || {};
//           ctx.session.profilesPage = 0;

//           const profiles = await getProfilesPage(
//             0,
//             countryInput,
//             ctx.session.ageRange
//           );

//           let normalizedCountry = null;
//           if (profiles.length > 0) {
//             normalizedCountry = profiles[0].country;
//           } else if (countryInput.toLowerCase() === "—Ä–æ—Å") {
//             normalizedCountry = "–†–æ—Å—Å–∏—è";
//           } else {
//             normalizedCountry = countryInput;
//           }

//           ctx.session.filterCountry = countryInput;
//           ctx.session.displayCountry = normalizedCountry;

//           if (profiles.length) {
//             for (let i = 0; i < profiles.length; i++) {
//               const isLast = i === profiles.length - 1;
//               await sendProfile(ctx, profiles[i], 0, profiles.length, isLast);
//               if (!isLast) await new Promise((resolve) => setTimeout(resolve, 300));
//             }
//           } else {
//             const msg = await ctx.reply(
//               `–ê–Ω–∫–µ—Ç –∏–∑ "${normalizedCountry}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`
//             );
//             messageManager.track(ctx.chat.id, msg.message_id);
//           }

//           await messageManager.sendMainMenu(ctx);
//         } catch (error) {
//           console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω—ã:", error);
//         }
//       });
//     }
//   });

//   // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
//  bot.action(/^page_(first|prev|next|last|\d+)_(\d+)$/, async (ctx) => {
//   await messageQueue.add(async () => {
//     try {
//       const [_, action, currentPage] = ctx.match;
//       let newPage = parseInt(currentPage);

//       if (action === "first") newPage = 0;
//       else if (action === "prev") newPage = Math.max(0, newPage - 1);
//       else if (action === "next") newPage = newPage + 1;
//       else if (action === "last")
//         newPage = Math.ceil(profilesCache.data.length / PROFILES_PER_PAGE) - 1;
//       else newPage = parseInt(action);

//       // –û—á–∏—â–∞–µ–º, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–æ—Ä–æ–¥–æ–≤
//       await messageManager.clear(ctx, true);
      
//       ctx.session = ctx.session || {};
//       const profiles = await getProfilesPage(
//         newPage,
//         ctx.session.filterCountry,
//         ctx.session.ageRange,
//         ctx.session.filterCity
//       );

//       if (profiles.length) {
//         ctx.session.profilesPage = newPage;

//         for (let i = 0; i < profiles.length; i++) {
//           const isLast = i === profiles.length - 1;
//           await sendProfile(ctx, profiles[i], newPage, profiles.length, isLast);
//           if (!isLast) await new Promise((resolve) => setTimeout(resolve, 300));
//         }
//       } else {
//         const msg = await ctx.reply("–ë–æ–ª—å—à–µ –∞–Ω–∫–µ—Ç –Ω–µ—Ç");
//         messageManager.track(ctx.chat.id, msg.message_id);
//       }
//     } catch (error) {
//       console.error("–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏:", error);
//     }
//   });
// });

//   // –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
//   bot.action("clear_screen", async (ctx) => {
//     await messageQueue.add(async () => {
//       try {
//         await messageManager.clear(ctx);
//         await ctx.answerCbQuery("–≠–∫—Ä–∞–Ω –æ—á–∏—â–µ–Ω");
//       } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:", error);
//         await ctx.answerCbQuery("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ");
//       }
//     });
//   });
// const sendProfile = async (ctx, profile, page, total, isLast) => {
//   return messageQueue.add(async () => {
//     try {
//       // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã
//       const about = profile.about?.length > MAX_CAPTION_LENGTH
//         ? profile.about.substring(0, MAX_CAPTION_LENGTH - 3) + "..."
//         : profile.about || "";

//       // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram —Å—Å—ã–ª–∫–∏
//       const formatTelegram = (username) => {
//         if (!username) return "";
//         if (username.startsWith("https://t.me/")) {
//           const cleaned = decodeURIComponent(username)
//             .replace("https://t.me/", "")
//             .replace(/^%40/, "@")
//             .replace(/^\+/, "");
//           return `üí¨ <a href="https://t.me/${cleaned}">Telegram</a>`;
//         }
//         const cleaned = username.replace(/^[@+]/, "");
//         return `üí¨ <a href="https://t.me/${cleaned}">Telegram</a>`;
//       };

//       // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
//       const formatPhone = (phone) => {
//         if (!phone) return "";
//         const cleanPhone = phone.replace(/[^0-9+]/g, "");
//         return `üìû <a href="tel:${cleanPhone}">${phone}</a>`;
//       };

//       // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WhatsApp —Å—Å—ã–ª–∫–∏
//       const formatWhatsApp = (url) => {
//         if (!url) return "";
//         return `üì± <a href="${url}">WhatsApp</a>`;
//       };

//       // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
//       const caption = `
// üë§ <b>${profile.name}</b>, ${profile.age}\n\n
// ${profile.country}\n
// üìç ${profile.city}\n
// <em>${about}</em>\n
// ${profile.phone ? formatPhone(profile.phone) + "\n" : ""}
// ${profile.telegram ? formatTelegram(profile.telegram) + "\n" : ""}
// ${profile.whatsapp ? formatWhatsApp(profile.whatsapp) + "\n" : ""}
// ‚ö†üö® <b>–ù–ï –ø–ª–∞—Ç–∏—Ç–µ –≤–ø–µ—Ä–µ–¥ —Å –ø–æ–º–æ—â—å—é Transcash, –±–∏–ª–µ—Ç–æ–≤ PCS, Neosurf, BITCOIN –∏–ª–∏ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–µ ‚Äì —ç—Ç–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ª–æ—Ö–æ—Ç—Ä–æ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –Ω–∞–º –æ —Ç–∞–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª—è—Ö‚ùó</b>`.trim();

//       // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–Ω–∫–µ—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
//       let keyboard = [];
//       if (isLast) {
//         const totalPages = Math.ceil(profilesCache.data.length / PROFILES_PER_PAGE);
        
//         // 1. –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
//         const paginationRow = [];
//         if (page > 0) {
//           paginationRow.push({ text: "‚è™", callback_data: `page_first_${page}` });
//           paginationRow.push({ text: "‚óÄÔ∏è", callback_data: `page_prev_${page}` });
//         }
        
//         paginationRow.push({ text: `${page + 1}/${totalPages}`, callback_data: "page_info" });
        
//         if (page < totalPages - 1) {
//           paginationRow.push({ text: "‚ñ∂Ô∏è", callback_data: `page_next_${page}` });
//           paginationRow.push({ text: "‚è©", callback_data: `page_last_${page}` });
//         }
        
//         keyboard.push(paginationRow);

//         // 2. –î–æ–±–∞–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
//         if (totalPages > 3) {
//           const quickPagesRow = [];
//           const maxQuickPages = Math.min(5, totalPages);
//           const startPage = Math.max(
//             0,
//             Math.min(page - Math.floor(maxQuickPages / 2), totalPages - maxQuickPages)
//           );

//           for (let i = 0; i < maxQuickPages; i++) {
//             const p = startPage + i;
//             if (p >= 0 && p < totalPages) {
//               quickPagesRow.push({
//                 text: p === page ? `‚Ä¢ ${p + 1} ‚Ä¢` : `${p + 1}`,
//                 callback_data: `page_${p}_${page}`,
//               });
//             }
//           }
//           keyboard.push(quickPagesRow);
//         }

//         // 3. –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
//         if (ctx.session?.displayCountry || ctx.session?.ageRange?.label || ctx.session?.filterCity) {
//           let filtersText = "üîπ ";
//           if (ctx.session.displayCountry) filtersText += `–°—Ç—Ä–∞–Ω–∞: ${ctx.session.displayCountry}`;
//           if (ctx.session.filterCity) {
//             if (ctx.session.displayCountry) filtersText += ", ";
//             filtersText += `–ì–æ—Ä–æ–¥: ${ctx.session.filterCity}`;
//           }
//           if (ctx.session.ageRange?.label) {
//             if (ctx.session.displayCountry || ctx.session.filterCity) filtersText += ", ";
//             filtersText += `–í–æ–∑—Ä–∞—Å—Ç: ${ctx.session.ageRange.label}`;
//           }
//           keyboard.push([{ text: filtersText, callback_data: "filters_info" }]);
//         }

//         // 4. –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–¥ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
//         keyboard.push(
//           [{ text: "üåê –û—Ç–∫—Ä—ã—Ç—å PeaceYourGun ü•ï –≤ WebApp", web_app: { url: process.env.WEBAPP_URL } }],
//           [{ text: "üåç –í—Å–µ —Å—Ç—Ä–∞–Ω—ã", callback_data: "all_countries" }],
//           [{ text: "üéÇ –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É", callback_data: "filter_by_age" }],
//           [{ text: "‚ùå –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω", callback_data: "clear_screen" }]
//         );
//       }

//       // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —Ñ–æ—Ç–æ
//       try {
//         const msg = await ctx.replyWithPhoto(profile.photoUrl, {
//           caption,
//           parse_mode: "HTML",
//           reply_markup: keyboard.length > 0 ? { inline_keyboard: keyboard } : undefined,
//         });
//         messageManager.track(ctx.chat.id, msg.message_id);
//         return msg;
//       } catch (e) {
//         // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
//         const msg = await ctx.reply(caption, {
//           parse_mode: "HTML",
//           reply_markup: keyboard.length > 0 ? { inline_keyboard: keyboard } : undefined,
//         });
//         messageManager.track(ctx.chat.id, msg.message_id);
//         return msg;
//       }
//     } catch (error) {
//       console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç—ã:", error);
//       return null;
//     }
//   });
// };
  
// };

const RateLimiter = require("telegraf-ratelimit");
const { default: PQueue } = require("p-queue");

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
const messageQueue = new PQueue({
  concurrency: 5,
  interval: 1000,
  intervalCap: 5,
});

// –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (24 —á–∞—Å–∞)
const MESSAGE_TTL = 86400000;

module.exports = (bot, db) => {
  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  const PROFILES_PER_PAGE = 5;
  const MAX_CAPTION_LENGTH = 900;
  const CACHE_TTL = 300000;
  const AGE_RANGES = [
    { label: "18-25", min: 18, max: 25 },
    { label: "26-35", min: 26, max: 35 },
    { label: "36-45", min: 36, max: 45 },
    { label: "46+", min: 46, max: 999 },
  ];


// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç (PROFILES_PER_PAGE, MAX_CAPTION_LENGTH –∏ —Ç.–¥.)
const checkSubscription = async (userId, db) => {
    try {
        const subRef = db.collection('subscriptions').doc(userId.toString());
        const doc = await subRef.get();
        
        if (!doc.exists) return false;
        
        const subData = doc.data();
        return subData.isActive && subData.endDate.toDate() > new Date();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
        return false;
    }
};
  // –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å—Ç—Ä–∞–Ω —Å —ç–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–∞–º–∏
  const POPULAR_COUNTRIES = [
    { name: "–†–æ—Å—Å–∏—è", flag: "üá∑üá∫" },
    { name: "–£–∫—Ä–∞–∏–Ω–∞", flag: "üá∫üá¶" },
    { name: "–ë–µ–ª–∞—Ä—É—Å—å", flag: "üáßüáæ" },
    { name: "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", flag: "üá∞üáø" },
    { name: "–°–®–ê", flag: "üá∫üá∏" },
    { name: "–ì–µ—Ä–º–∞–Ω–∏—è", flag: "üá©üá™" },
    { name: "–§—Ä–∞–Ω—Ü–∏—è", flag: "üá´üá∑" },
    { name: "–ò—Ç–∞–ª–∏—è", flag: "üáÆüáπ" },
    { name: "–ò—Å–ø–∞–Ω–∏—è", flag: "üá™üá∏" },
    { name: "–¢—É—Ä—Ü–∏—è", flag: "üáπüá∑" },
    { name: "–ö–∏—Ç–∞–π", flag: "üá®üá≥" },
    { name: "–Ø–ø–æ–Ω–∏—è", flag: "üáØüáµ" },
    { name: "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è", flag: "üá¨üáß" },
    { name: "–ü–æ–ª—å—à–∞", flag: "üáµüá±" },
    { name: "–ò–∑—Ä–∞–∏–ª—å", flag: "üáÆüá±" },
    { name: "–û–ê–≠", flag: "üá¶üá™" },
    { name: "–¢–∞–∏–ª–∞–Ω–¥", flag: "üáπüá≠" },
    { name: "–ò–Ω–¥–∏—è", flag: "üáÆüá≥" },
    { name: "–ë—Ä–∞–∑–∏–ª–∏—è", flag: "üáßüá∑" },
    { name: "–ö–∞–Ω–∞–¥–∞", flag: "üá®üá¶" },
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
    { name: "–ê–≤—Å—Ç—Ä–∞–ª–∏—è", flag: "üá¶üá∫" },
    { name: "–ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è", flag: "üá≥üáø" },
    { name: "–ú–µ–∫—Å–∏–∫–∞", flag: "üá≤üáΩ" },
    { name: "–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞", flag: "üá¶üá∑" },
    { name: "–ß–∏–ª–∏", flag: "üá®üá±" },
    { name: "–ö–æ–ª—É–º–±–∏—è", flag: "üá®üá¥" },
    { name: "–ü–µ—Ä—É", flag: "üáµüá™" },
    { name: "–í–µ–Ω–µ—Å—É—ç–ª–∞", flag: "üáªüá™" },
    { name: "–ö—É–±–∞", flag: "üá®üá∫" },
    { name: "–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è", flag: "üá∞üá∑" },
    { name: "–ò–Ω–¥–æ–Ω–µ–∑–∏—è", flag: "üáÆüá©" },
    { name: "–í—å–µ—Ç–Ω–∞–º", flag: "üáªüá≥" },
    { name: "–ú–∞–ª–∞–π–∑–∏—è", flag: "üá≤üáæ" },
    { name: "–§–∏–ª–∏–ø–ø–∏–Ω—ã", flag: "üáµüá≠" },
    { name: "–°–∏–Ω–≥–∞–ø—É—Ä", flag: "üá∏üá¨" },
    { name: "–°–∞—É–¥–æ–≤—Å–∫–∞—è –ê—Ä–∞–≤–∏—è", flag: "üá∏üá¶" },
    { name: "–ö–∞—Ç–∞—Ä", flag: "üá∂üá¶" },
    { name: "–ö—É–≤–µ–π—Ç", flag: "üá∞üáº" },
    { name: "–ò—Ä–∞–Ω", flag: "üáÆüá∑" },
    { name: "–ò—Ä–∞–∫", flag: "üáÆüá∂" },
    { name: "–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω", flag: "üá¶üáø" },
    { name: "–ê—Ä–º–µ–Ω–∏—è", flag: "üá¶üá≤" },
    { name: "–ì—Ä—É–∑–∏—è", flag: "üá¨üá™" },
    { name: "–ú–æ–ª–¥–æ–≤–∞", flag: "üá≤üá©" },
    { name: "–õ–∞—Ç–≤–∏—è", flag: "üá±üáª" },
    { name: "–õ–∏—Ç–≤–∞", flag: "üá±üáπ" },
    { name: "–≠—Å—Ç–æ–Ω–∏—è", flag: "üá™üá™" },
    { name: "–§–∏–Ω–ª—è–Ω–¥–∏—è", flag: "üá´üáÆ" },
    { name: "–®–≤–µ—Ü–∏—è", flag: "üá∏üá™" },
    { name: "–ù–æ—Ä–≤–µ–≥–∏—è", flag: "üá≥üá¥" },
    { name: "–î–∞–Ω–∏—è", flag: "üá©üá∞" },
    { name: "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã", flag: "üá≥üá±" },
    { name: "–ë–µ–ª—å–≥–∏—è", flag: "üáßüá™" },
    { name: "–®–≤–µ–π—Ü–∞—Ä–∏—è", flag: "üá®üá≠" },
    { name: "–ê–≤—Å—Ç—Ä–∏—è", flag: "üá¶üáπ" },
    { name: "–ß–µ—Ö–∏—è", flag: "üá®üáø" },
    { name: "–°–ª–æ–≤–∞–∫–∏—è", flag: "üá∏üá∞" },
    { name: "–í–µ–Ω–≥—Ä–∏—è", flag: "üá≠üá∫" },
    { name: "–†—É–º—ã–Ω–∏—è", flag: "üá∑üá¥" },
    { name: "–ë–æ–ª–≥–∞—Ä–∏—è", flag: "üáßüá¨" },
    { name: "–°–µ—Ä–±–∏—è", flag: "üá∑üá∏" },
    { name: "–•–æ—Ä–≤–∞—Ç–∏—è", flag: "üá≠üá∑" },
    { name: "–ì—Ä–µ—Ü–∏—è", flag: "üá¨üá∑" },
    { name: "–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è", flag: "üáµüáπ" },
    { name: "–ò—Ä–ª–∞–Ω–¥–∏—è", flag: "üáÆüá™" },
    { name: "–ò—Å–ª–∞–Ω–¥–∏—è", flag: "üáÆüá∏" },
    { name: "–ú–∞–ª—å—Ç–∞", flag: "üá≤üáπ" },
    { name: "–ö–∏–ø—Ä", flag: "üá®üáæ" },
    { name: "–õ—é–∫—Å–µ–º–±—É—Ä–≥", flag: "üá±üá∫" },
    { name: "–ê—Ñ–≥–∞–Ω–∏—Å—Ç–∞–Ω", flag: "üá¶üá´" },
    { name: "–ü–∞–∫–∏—Å—Ç–∞–Ω", flag: "üáµüá∞" },
    { name: "–ë–∞–Ω–≥–ª–∞–¥–µ—à", flag: "üáßüá©" },
    { name: "–®—Ä–∏-–õ–∞–Ω–∫–∞", flag: "üá±üá∞" },
    { name: "–ù–µ–ø–∞–ª", flag: "üá≥üáµ" },
  ];

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è rate-limiter
  const limiter = new RateLimiter({
    window: 1000,
    limit: 3,
    onLimitExceeded: (ctx) =>
      ctx.reply("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–¥–æ–∂–¥–∏—Ç–µ —Å–µ–∫—É–Ω–¥—É..."),
  });

  bot.use(limiter);

  // –°–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
  const chatStorage = {
    messages: new Map(), // chatId: Set(messageIds)
    mainMenu: new Map(), // chatId: messageId
    userState: new Map(), // userId: state
    messageTimestamps: new Map(), // messageId: timestamp
    countryKeyboard: new Map(), // chatId: messageId (–¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Å—Ç—Ä–∞–Ω)
    cityKeyboard: new Map(), // chatId: messageId (–¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≥–æ—Ä–æ–¥–æ–≤)
  };

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
  setInterval(() => {
    const now = Date.now();
    for (const [chatId, messages] of chatStorage.messages) {
      for (const messageId of messages) {
        if (
          now - (chatStorage.messageTimestamps.get(messageId) || 0) >
          MESSAGE_TTL
        ) {
          messages.delete(messageId);
          chatStorage.messageTimestamps.delete(messageId);
        }
      }
    }
  }, 21600000);

  // –ö—ç—à –¥–∞–Ω–Ω—ã—Ö
  const profilesCache = {
    data: null,
    timestamp: 0,
    countryFilter: null,
    ageFilter: null,
    cityFilter: null,
    clear: function () {
      this.data = null;
      this.timestamp = 0;
      this.countryFilter = null;
      this.ageFilter = null;
      this.cityFilter = null;
    },
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Å—Ç—Ä–∞–Ω–µ –∏ –≥–æ—Ä–æ–¥—É
  const getProfilesPage = async (
    page = 0,
    searchCountry = null,
    ageRange = null,
    searchCity = null
  ) => {
    try {
      const now = Date.now();
      const cacheKey = `${searchCountry || "all"}_${
        ageRange ? ageRange.label : "all"
      }_${searchCity || "all"}`;

      if (
        profilesCache.data &&
        now - profilesCache.timestamp < CACHE_TTL &&
        profilesCache.countryFilter === (searchCountry || null) &&
        profilesCache.ageFilter === (ageRange ? ageRange.label : null) &&
        profilesCache.cityFilter === (searchCity || null)
      ) {
        return profilesCache.data.slice(
          page * PROFILES_PER_PAGE,
          (page + 1) * PROFILES_PER_PAGE
        );
      }

      const snapshot = await db
        .collection("profiles")
        .orderBy("createdAt", "desc")
        .get();

      let profiles = snapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      }));

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–µ
      if (searchCountry) {
        const searchTerm = searchCountry.toLowerCase().trim();
        profiles = profiles.filter((profile) => {
          const profileCountry = profile.country?.toLowerCase() || "";
          return (
            profileCountry.includes(searchTerm) ||
            (searchTerm === "—Ä–æ—Å" && profileCountry.includes("—Ä–æ—Å—Å–∏—è"))
          );
        });
      }

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
      if (ageRange) {
        profiles = profiles.filter((profile) => {
          const age = parseInt(profile.age) || 0;
          return age >= ageRange.min && age <= ageRange.max;
        });
      }

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥–æ—Ä–æ–¥—É
      if (searchCity) {
        const searchTerm = searchCity.toLowerCase().trim();
        profiles = profiles.filter((profile) => {
          const profileCity = profile.city?.toLowerCase() || "";
          return profileCity.includes(searchTerm);
        });
      }

      profilesCache.data = profiles;
      profilesCache.timestamp = now;
      profilesCache.countryFilter = searchCountry || null;
      profilesCache.ageFilter = ageRange ? ageRange.label : null;
      profilesCache.cityFilter = searchCity || null;

      return profiles.slice(
        page * PROFILES_PER_PAGE,
        (page + 1) * PROFILES_PER_PAGE
      );
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∫–µ—Ç:", error);
      profilesCache.clear();
      return [];
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const getUniqueCountries = async () => {
    try {
      const snapshot = await db.collection("profiles").orderBy("country").get();

      const countries = new Set();
      snapshot.docs.forEach((doc) => {
        const country = doc.data().country;
        if (country) countries.add(country);
      });

      return Array.from(countries).sort();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω:", error);
      return [];
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã
  const getUniqueCitiesForCountry = async (country) => {
    try {
      const snapshot = await db
        .collection("profiles")
        .where("country", "==", country)
        .orderBy("city")
        .get();

      const cities = new Set();
      snapshot.docs.forEach((doc) => {
        const city = doc.data().city;
        if (city) cities.add(city);
      });

      return Array.from(cities).sort();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤:", error);
      return [];
    }
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ñ–ª–∞–≥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö)
  const formatCountryWithFlag = (countryName) => {
    if (!countryName) return countryName;

    const foundCountry = POPULAR_COUNTRIES.find(
      (c) => c.name.toLowerCase() === countryName.toLowerCase()
    );

    return foundCountry ? `${foundCountry.flag} ${countryName}` : countryName;
  };

  // –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
  const messageManager = {
    track: function (chatId, messageId) {
      if (!messageId) return;
      if (!chatStorage.messages.has(chatId)) {
        chatStorage.messages.set(chatId, new Set());
      }
      chatStorage.messages.get(chatId).add(messageId);
      chatStorage.messageTimestamps.set(messageId, Date.now());
    },


clear: async function (ctx, keepCityKeyboard = false, keepCountryKeyboard = false) {
  const chatId = ctx.chat.id;
  if (!chatStorage.messages.has(chatId)) return;

  const messages = [...chatStorage.messages.get(chatId)];
  const mainMenuId = chatStorage.mainMenu.get(chatId);
  const countryKeyboardId = chatStorage.countryKeyboard.get(chatId);
  const cityKeyboardId = chatStorage.cityKeyboard.get(chatId);

  for (const messageId of messages) {
    if (
      messageId !== mainMenuId &&
      messageId !== countryKeyboardId &&
      messageId !== cityKeyboardId
    ) {
      try {
        await ctx.telegram.deleteMessage(chatId, messageId);
        chatStorage.messages.get(chatId).delete(messageId);
        chatStorage.messageTimestamps.delete(messageId);
      } catch (e) {
        if (e.response?.error_code !== 400) {
          console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${messageId}:`, e.message);
        }
      }
    }
  }

  // –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–æ—Ä–æ–¥–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ
  if (cityKeyboardId && !keepCityKeyboard) {
    try {
      await ctx.telegram.deleteMessage(chatId, cityKeyboardId);
      chatStorage.messages.get(chatId).delete(cityKeyboardId);
      chatStorage.messageTimestamps.delete(cityKeyboardId);
      chatStorage.cityKeyboard.delete(chatId);
    } catch (e) {
      if (e.response?.error_code !== 400) {
        console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–æ—Ä–æ–¥–æ–≤:", e);
      }
    }
  }

  // –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω –µ—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ
  if (countryKeyboardId && !keepCountryKeyboard) {
    try {
      await ctx.telegram.deleteMessage(chatId, countryKeyboardId);
      chatStorage.messages.get(chatId).delete(countryKeyboardId);
      chatStorage.messageTimestamps.delete(countryKeyboardId);
      chatStorage.countryKeyboard.delete(chatId);
    } catch (e) {
      if (e.response?.error_code !== 400) {
        console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω:", e);
      }
    }
  }

  chatStorage.userState.delete(ctx.from.id);
},

sendMainMenu: async function (ctx) {
  return messageQueue.add(async () => {
    const chatId = ctx.chat.id;
    const self = this;

    try {
      // 1. –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –º–µ–Ω—é
      if (chatStorage.mainMenu.has(chatId)) {
        try {
          await ctx.telegram.deleteMessage(chatId, chatStorage.mainMenu.get(chatId));
          chatStorage.messages.get(chatId)?.delete(chatStorage.mainMenu.get(chatId));
          chatStorage.messageTimestamps.delete(chatStorage.mainMenu.get(chatId));
        } catch (e) {
          if (e.response?.error_code !== 400) {
            console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ–Ω—é:", e);
          }
        }
      }

      // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (db –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ)
      const hasSub = await checkSubscription(ctx.from.id, db);

      // 3. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
      const menuButtons = [
        [{
          text: 'üåê –û—Ç–∫—Ä—ã—Ç—å PeaceYourGun ü•ï –≤ WebApp', 
          web_app: { url: process.env.WEBAPP_URL }
        }]
      ];

      // 4. –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ —Å—Ç—Ä–∞–Ω—ã" —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
      if (hasSub) {
        menuButtons.push([{ 
          text: "üåç –í—Å–µ —Å—Ç—Ä–∞–Ω—ã", 
          callback_data: "all_countries" 
        }]);
      }

      // 5. –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      menuButtons.push(
        [{ text: "üéÇ –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É", callback_data: "filter_by_age" }],
        [{ text: "‚ùå –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω", callback_data: "clear_screen" }]
      );

      // 6. –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é
      const menu = await ctx.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", {
        reply_markup: { inline_keyboard: menuButtons },
      });

      // 7. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      chatStorage.mainMenu.set(chatId, menu.message_id);
      self.track(chatId, menu.message_id);

    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é:", error);
      throw error;
    }
  });
},
    
    sendCountriesKeyboard: async function (ctx) {
      return messageQueue.add(async () => {
        const chatId = ctx.chat.id;
        const self = this;

        try {
          // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
          if (chatStorage.countryKeyboard.has(chatId)) {
            try {
              await ctx.telegram.deleteMessage(
                chatId,
                chatStorage.countryKeyboard.get(chatId)
              );
              chatStorage.messages
                .get(chatId)
                ?.delete(chatStorage.countryKeyboard.get(chatId));
              chatStorage.messageTimestamps.delete(
                chatStorage.countryKeyboard.get(chatId)
              );
            } catch (e) {
              if (e.response?.error_code !== 400) {
                console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω:", e);
              }
            }
          }

          // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –∏–∑ –±–∞–∑—ã
          const uniqueCountries = await getUniqueCountries();

          // –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω –Ω–µ—Ç –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ
          const countriesToShow =
            uniqueCountries.length > 0 && uniqueCountries.length <= 50
              ? uniqueCountries
              : POPULAR_COUNTRIES.map((c) => c.name);

          // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
          const keyboard = [];
          let row = [];

          // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω—ã —Å —Ñ–ª–∞–≥–∞–º–∏
          countriesToShow.forEach((country, index) => {
            const countryWithFlag = formatCountryWithFlag(country);
            row.push({
              text: countryWithFlag,
              callback_data: `country_${country}`,
            });

            // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 3 –∫–Ω–æ–ø–∫–∏
            if (row.length === 3 || index === countriesToShow.length - 1) {
              keyboard.push(row);
              row = [];
            }
          });

          // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
          keyboard.push([{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_menu" }]);

          const msg = await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", {
            reply_markup: { inline_keyboard: keyboard },
          });

          chatStorage.countryKeyboard.set(chatId, msg.message_id);
          self.track(chatId, msg.message_id);
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω:", error);
          throw error;
        }
      });
    },

    sendCitiesKeyboard: async function (ctx, country) {
      return messageQueue.add(async () => {
        const chatId = ctx.chat.id;
        const self = this;

        try {
          // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–æ—Ä–æ–¥–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
          if (chatStorage.cityKeyboard.has(chatId)) {
            try {
              await ctx.telegram.deleteMessage(
                chatId,
                chatStorage.cityKeyboard.get(chatId)
              );
              chatStorage.messages
                .get(chatId)
                ?.delete(chatStorage.cityKeyboard.get(chatId));
              chatStorage.messageTimestamps.delete(
                chatStorage.cityKeyboard.get(chatId)
              );
            } catch (e) {
              if (e.response?.error_code !== 400) {
                console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–æ—Ä–æ–¥–æ–≤:", e);
              }
            }
          }

          // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã
          const cities = await getUniqueCitiesForCountry(country);

          // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
          const keyboard = [];
          let row = [];

          // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥–∞
          cities.forEach((city, index) => {
            row.push({
              text: city,
              callback_data: `city_${city}`,
            });

            // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 3 –∫–Ω–æ–ø–∫–∏
            if (row.length === 3 || index === cities.length - 1) {
              keyboard.push(row);
              row = [];
            }
          });

          // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
          keyboard.push([
            { text: "üéÇ –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É", callback_data: "filter_by_age" },
          ]);
          keyboard.push([
            { text: "üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç—Ä–∞–Ω–∞–º", callback_data: "back_to_countries" },
          ]);

          const msg = await ctx.reply(`–ì–æ—Ä–æ–¥–∞ –≤ ${country}:`, {
            reply_markup: { inline_keyboard: keyboard },
          });

          chatStorage.cityKeyboard.set(chatId, msg.message_id);
          self.track(chatId, msg.message_id);
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–æ—Ä–æ–¥–æ–≤:", error);
          throw error;
        }
      });
    },
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
  bot.command("start", async (ctx) => {
    await messageQueue.add(async () => {
      try {
        await messageManager.clear(ctx);
        await messageManager.sendMainMenu(ctx);
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã start:", error);
      }
    });
  });

  bot.action("show_profiles", async (ctx) => {
    await messageQueue.add(async () => {
      try {
        await ctx.answerCbQuery("–ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∫–µ—Ç—ã...");

        ctx.session = ctx.session || {};
        ctx.session.profilesPage = 0;
        ctx.session.filterCountry = null;
        ctx.session.displayCountry = null;
        ctx.session.ageRange = null;
        ctx.session.filterCity = null;

        console.log("Starting profiles load", {
          cache: profilesCache.data ? "exists" : "empty",
          cacheAge: Date.now() - profilesCache.timestamp,
        });

        await messageManager.clear(ctx);

        if (
          !profilesCache.data ||
          Date.now() - profilesCache.timestamp > CACHE_TTL
        ) {
          profilesCache.clear();
        }
        const profiles = await getProfilesPage(0);

        if (!profiles.length) {
          const msg = await ctx.reply("–ê–Ω–∫–µ—Ç –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ");
          messageManager.track(ctx.chat.id, msg.message_id);
          return;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∞–Ω–∫–µ—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        for (let i = 0; i < profiles.length; i++) {
          const isLast = i === profiles.length - 1;
          await sendProfile(ctx, profiles[i], 0, profiles.length, isLast);
          if (!isLast) await new Promise((resolve) => setTimeout(resolve, 300));
        }

        await messageManager.sendMainMenu(ctx);
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–Ω–∫–µ—Ç:", error);
        try {
          await ctx.answerCbQuery("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏");
          const msg = await ctx.reply(
            "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∫–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑"
          );
          messageManager.track(ctx.chat.id, msg.message_id);
        } catch (e) {
          console.error("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:", e);
        }
      }
    });
  });
bot.action("all_countries", async (ctx) => {
    try {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        const hasSub = await checkSubscription(ctx.from.id, db);
        
        // 2. –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º
        if (!hasSub) {
            await ctx.answerCbQuery("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞");
            return;
        }
        
        // 3. –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å - –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
        await ctx.answerCbQuery("–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω...");
        
        return messageQueue.add(async () => {
            try {
                await messageManager.clear(ctx);
                await messageManager.sendCountriesKeyboard(ctx);
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω:", error);
                await ctx.answerCbQuery("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏");
            }
        });
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ all_countries:", error);
        await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
    }
});
  

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞
  bot.action(/^country_(.+)$/, async (ctx) => {
    await messageQueue.add(async () => {
      try {
        const country = ctx.match[1];
        ctx.session = ctx.session || {};
        ctx.session.profilesPage = 0;
        ctx.session.filterCountry = country;
        ctx.session.displayCountry = country;
        ctx.session.filterCity = null;

        await messageManager.clear(ctx);
        await messageManager.sendCitiesKeyboard(ctx, country);
        await ctx.answerCbQuery();
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã:", error);
      }
    });
  });

  
  bot.action(/^city_(.+)$/, async (ctx) => {
  await messageQueue.add(async () => {
    try {
      const city = ctx.match[1];
      ctx.session = ctx.session || {};
      ctx.session.profilesPage = 0;
      ctx.session.filterCity = city;

      // –û—á–∏—â–∞–µ–º, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–æ—Ä–æ–¥–æ–≤ –∏ —Å—Ç—Ä–∞–Ω
      await messageManager.clear(ctx, true, true);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤–Ω–∏–∑—É
      await messageManager.sendMainMenu(ctx);

      const profiles = await getProfilesPage(
        0,
        ctx.session.filterCountry,
        ctx.session.ageRange,
        city
      );

      if (!profiles.length) {
        const msg = await ctx.reply(`–ê–Ω–∫–µ—Ç –∏–∑ –≥–æ—Ä–æ–¥–∞ "${city}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        messageManager.track(ctx.chat.id, msg.message_id);
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—ã
      for (let i = 0; i < profiles.length; i++) {
        const isLast = i === profiles.length - 1;
        await sendProfile(ctx, profiles[i], 0, profiles.length, isLast);
        if (!isLast) await new Promise((resolve) => setTimeout(resolve, 300));
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞:", error);
    }
  });
});
bot.action("back_to_countries", async (ctx) => {
  await messageQueue.add(async () => {
    try {
      // –û—á–∏—â–∞–µ–º, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω
      await messageManager.clear(ctx, false, true);
      await messageManager.sendCountriesKeyboard(ctx);
      await ctx.answerCbQuery();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å—Ç—Ä–∞–Ω–∞–º:", error);
    }
  });
});
  
  bot.action("back_to_menu", async (ctx) => {
    await messageQueue.add(async () => {
      try {
        await messageManager.clear(ctx);
        await messageManager.sendMainMenu(ctx);
        await ctx.answerCbQuery();
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é:", error);
      }
    });
  });

  // –ü–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä–∞–Ω–µ —á–µ—Ä–µ–∑ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
  bot.action("search_by_country", async (ctx) => {
    await messageQueue.add(async () => {
      try {
        chatStorage.userState.set(ctx.from.id, "awaiting_country");
        const msg = await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø–æ–∏—Å–∫–∞:");
        messageManager.track(ctx.chat.id, msg.message_id);
        await ctx.answerCbQuery();
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:", error);
      }
    });
  });

  // –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
  // –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
bot.action("filter_by_age", async (ctx) => {
  await messageQueue.add(async () => {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–ª–∞–≤–∏–∞—Ç—É—Ä –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
      const chatId = ctx.chat.id;
      const countryKeyboardId = chatStorage.countryKeyboard.get(chatId);
      const cityKeyboardId = chatStorage.cityKeyboard.get(chatId);

      // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–Ω—É–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
      await messageManager.clear(ctx, true, true);

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID –∫–ª–∞–≤–∏–∞—Ç—É—Ä –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
      if (countryKeyboardId) {
        chatStorage.countryKeyboard.set(chatId, countryKeyboardId);
      }
      if (cityKeyboardId) {
        chatStorage.cityKeyboard.set(chatId, cityKeyboardId);
      }

      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
      const keyboard = AGE_RANGES.map((range) => [
        { text: range.label, callback_data: `age_range_${range.label}` },
      ]);
      keyboard.push([
        { text: "‚ùå –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", callback_data: "age_range_reset" },
      ]);

      const msg = await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:", {
        reply_markup: { inline_keyboard: keyboard },
      });

      messageManager.track(ctx.chat.id, msg.message_id);
      await ctx.answerCbQuery();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É:", error);
    }
  });
});


 
// –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É:
bot.action(/^age_range_(.+)$/, async (ctx) => {
  await messageQueue.add(async () => {
    try {
      const [_, range] = ctx.match;
      ctx.session = ctx.session || {};
      ctx.session.profilesPage = 0;

      if (range === "reset") {
        ctx.session.ageRange = null;
      } else {
        const selectedRange = AGE_RANGES.find((r) => r.label === range);
        if (selectedRange) {
          ctx.session.ageRange = selectedRange;
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥ –∏ —Å—Ç—Ä–∞–Ω—É –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
      const currentCountry = ctx.session.filterCountry;
      const currentCity = ctx.session.filterCity;

      // –ü–æ–ª—É—á–∞–µ–º ID –∫–ª–∞–≤–∏–∞—Ç—É—Ä –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
      const chatId = ctx.chat.id;
      const countryKeyboardId = chatStorage.countryKeyboard.get(chatId);
      const cityKeyboardId = chatStorage.cityKeyboard.get(chatId);

      // –û—á–∏—â–∞–µ–º, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–æ—Ä–æ–¥–æ–≤ –∏ —Å—Ç—Ä–∞–Ω
      await messageManager.clear(ctx, true, true);

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID –∫–ª–∞–≤–∏–∞—Ç—É—Ä –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
      if (countryKeyboardId) {
        chatStorage.countryKeyboard.set(chatId, countryKeyboardId);
      }
      if (cityKeyboardId) {
        chatStorage.cityKeyboard.set(chatId, cityKeyboardId);
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∫–µ—Ç—ã —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
      const profiles = await getProfilesPage(
        0,
        currentCountry,
        ctx.session.ageRange,
        currentCity
      );

      if (!profiles.length) {
        const msg = await ctx.reply("–ê–Ω–∫–µ—Ç –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã");
        messageManager.track(ctx.chat.id, msg.message_id);
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—ã
      for (let i = 0; i < profiles.length; i++) {
        const isLast = i === profiles.length - 1;
        await sendProfile(ctx, profiles[i], 0, profiles.length, isLast);
        if (!isLast) await new Promise((resolve) => setTimeout(resolve, 300));
      }

      // –ï—Å–ª–∏ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞, –Ω–æ –Ω–µ –≥–æ—Ä–æ–¥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ—Ä–æ–¥–∞ —Å–Ω–æ–≤–∞
      if (currentCountry && !currentCity) {
        await messageManager.sendCitiesKeyboard(ctx, currentCountry);
      }

      // –ï—Å–ª–∏ –±—ã–ª –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ - –æ—Å—Ç–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      if (currentCity) {
        await messageManager.sendMainMenu(ctx);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞:", error);
    }
  });
});
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
  bot.on("text", async (ctx) => {
    const userId = ctx.from.id;
    if (chatStorage.userState.get(userId) === "awaiting_country") {
      await messageQueue.add(async () => {
        try {
          messageManager.track(ctx.chat.id, ctx.message.message_id);
          const countryInput = ctx.message.text.trim();

          if (!countryInput) {
            const msg = await ctx.reply("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å—Ç—Ä–∞–Ω—É");
            messageManager.track(ctx.chat.id, msg.message_id);
            return;
          }

          await messageManager.clear(ctx);
          ctx.session = ctx.session || {};
          ctx.session.profilesPage = 0;

          const profiles = await getProfilesPage(
            0,
            countryInput,
            ctx.session.ageRange
          );

          let normalizedCountry = null;
          if (profiles.length > 0) {
            normalizedCountry = profiles[0].country;
          } else if (countryInput.toLowerCase() === "—Ä–æ—Å") {
            normalizedCountry = "–†–æ—Å—Å–∏—è";
          } else {
            normalizedCountry = countryInput;
          }

          ctx.session.filterCountry = countryInput;
          ctx.session.displayCountry = normalizedCountry;

          if (profiles.length) {
            for (let i = 0; i < profiles.length; i++) {
              const isLast = i === profiles.length - 1;
              await sendProfile(ctx, profiles[i], 0, profiles.length, isLast);
              if (!isLast) await new Promise((resolve) => setTimeout(resolve, 300));
            }
          } else {
            const msg = await ctx.reply(
              `–ê–Ω–∫–µ—Ç –∏–∑ "${normalizedCountry}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`
            );
            messageManager.track(ctx.chat.id, msg.message_id);
          }

          await messageManager.sendMainMenu(ctx);
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω—ã:", error);
        }
      });
    }
  });

  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
 bot.action(/^page_(first|prev|next|last|\d+)_(\d+)$/, async (ctx) => {
  await messageQueue.add(async () => {
    try {
      const [_, action, currentPage] = ctx.match;
      let newPage = parseInt(currentPage);

      if (action === "first") newPage = 0;
      else if (action === "prev") newPage = Math.max(0, newPage - 1);
      else if (action === "next") newPage = newPage + 1;
      else if (action === "last")
        newPage = Math.ceil(profilesCache.data.length / PROFILES_PER_PAGE) - 1;
      else newPage = parseInt(action);

      // –û—á–∏—â–∞–µ–º, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–æ—Ä–æ–¥–æ–≤
      await messageManager.clear(ctx, true);
      
      ctx.session = ctx.session || {};
      const profiles = await getProfilesPage(
        newPage,
        ctx.session.filterCountry,
        ctx.session.ageRange,
        ctx.session.filterCity
      );

      if (profiles.length) {
        ctx.session.profilesPage = newPage;

        for (let i = 0; i < profiles.length; i++) {
          const isLast = i === profiles.length - 1;
          await sendProfile(ctx, profiles[i], newPage, profiles.length, isLast);
          if (!isLast) await new Promise((resolve) => setTimeout(resolve, 300));
        }
      } else {
        const msg = await ctx.reply("–ë–æ–ª—å—à–µ –∞–Ω–∫–µ—Ç –Ω–µ—Ç");
        messageManager.track(ctx.chat.id, msg.message_id);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏:", error);
    }
  });
});

  // –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
  bot.action("clear_screen", async (ctx) => {
    await messageQueue.add(async () => {
      try {
        await messageManager.clear(ctx);
        await ctx.answerCbQuery("–≠–∫—Ä–∞–Ω –æ—á–∏—â–µ–Ω");
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:", error);
        await ctx.answerCbQuery("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ");
      }
    });
  });
const sendProfile = async (ctx, profile, page, total, isLast) => {
  return messageQueue.add(async () => {
    try {
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã
      const about = profile.about?.length > MAX_CAPTION_LENGTH
        ? profile.about.substring(0, MAX_CAPTION_LENGTH - 3) + "..."
        : profile.about || "";

      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram —Å—Å—ã–ª–∫–∏
      const formatTelegram = (username) => {
        if (!username) return "";
        if (username.startsWith("https://t.me/")) {
          const cleaned = decodeURIComponent(username)
            .replace("https://t.me/", "")
            .replace(/^%40/, "@")
            .replace(/^\+/, "");
          return `üí¨ <a href="https://t.me/${cleaned}">Telegram</a>`;
        }
        const cleaned = username.replace(/^[@+]/, "");
        return `üí¨ <a href="https://t.me/${cleaned}">Telegram</a>`;
      };

      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const formatPhone = (phone) => {
        if (!phone) return "";
        const cleanPhone = phone.replace(/[^0-9+]/g, "");
        return `üìû <a href="tel:${cleanPhone}">${phone}</a>`;
      };

      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WhatsApp —Å—Å—ã–ª–∫–∏
      const formatWhatsApp = (url) => {
        if (!url) return "";
        return `üì± <a href="${url}">WhatsApp</a>`;
      };

      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
      const caption = `
üë§ <b>${profile.name}</b>, ${profile.age}\n\n
${profile.country}\n
üìç ${profile.city}\n
<em>${about}</em>\n
${profile.phone ? formatPhone(profile.phone) + "\n" : ""}
${profile.telegram ? formatTelegram(profile.telegram) + "\n" : ""}
${profile.whatsapp ? formatWhatsApp(profile.whatsapp) + "\n" : ""}
‚ö†üö® <b>–ù–ï –ø–ª–∞—Ç–∏—Ç–µ –≤–ø–µ—Ä–µ–¥ —Å –ø–æ–º–æ—â—å—é Transcash, –±–∏–ª–µ—Ç–æ–≤ PCS, Neosurf, BITCOIN –∏–ª–∏ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–µ ‚Äì —ç—Ç–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ª–æ—Ö–æ—Ç—Ä–æ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –Ω–∞–º –æ —Ç–∞–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª—è—Ö‚ùó</b>`.trim();

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–Ω–∫–µ—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      let keyboard = [];
      if (isLast) {
        const totalPages = Math.ceil(profilesCache.data.length / PROFILES_PER_PAGE);
        
        // 1. –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        const paginationRow = [];
        if (page > 0) {
          paginationRow.push({ text: "‚è™", callback_data: `page_first_${page}` });
          paginationRow.push({ text: "‚óÄÔ∏è", callback_data: `page_prev_${page}` });
        }
        
        paginationRow.push({ text: `${page + 1}/${totalPages}`, callback_data: "page_info" });
        
        if (page < totalPages - 1) {
          paginationRow.push({ text: "‚ñ∂Ô∏è", callback_data: `page_next_${page}` });
          paginationRow.push({ text: "‚è©", callback_data: `page_last_${page}` });
        }
        
        keyboard.push(paginationRow);

        // 2. –î–æ–±–∞–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (totalPages > 3) {
          const quickPagesRow = [];
          const maxQuickPages = Math.min(5, totalPages);
          const startPage = Math.max(
            0,
            Math.min(page - Math.floor(maxQuickPages / 2), totalPages - maxQuickPages)
          );

          for (let i = 0; i < maxQuickPages; i++) {
            const p = startPage + i;
            if (p >= 0 && p < totalPages) {
              quickPagesRow.push({
                text: p === page ? `‚Ä¢ ${p + 1} ‚Ä¢` : `${p + 1}`,
                callback_data: `page_${p}_${page}`,
              });
            }
          }
          keyboard.push(quickPagesRow);
        }

        // 3. –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        if (ctx.session?.displayCountry || ctx.session?.ageRange?.label || ctx.session?.filterCity) {
          let filtersText = "üîπ ";
          if (ctx.session.displayCountry) filtersText += `–°—Ç—Ä–∞–Ω–∞: ${ctx.session.displayCountry}`;
          if (ctx.session.filterCity) {
            if (ctx.session.displayCountry) filtersText += ", ";
            filtersText += `–ì–æ—Ä–æ–¥: ${ctx.session.filterCity}`;
          }
          if (ctx.session.ageRange?.label) {
            if (ctx.session.displayCountry || ctx.session.filterCity) filtersText += ", ";
            filtersText += `–í–æ–∑—Ä–∞—Å—Ç: ${ctx.session.ageRange.label}`;
          }
          keyboard.push([{ text: filtersText, callback_data: "filters_info" }]);
        }

        // 4. –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–¥ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        keyboard.push(
          [{ text: "üåê –û—Ç–∫—Ä—ã—Ç—å PeaceYourGun ü•ï –≤ WebApp", web_app: { url: process.env.WEBAPP_URL } }],
          [{ text: "üåç –í—Å–µ —Å—Ç—Ä–∞–Ω—ã", callback_data: "all_countries" }],
          [{ text: "üéÇ –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É", callback_data: "filter_by_age" }],
          [{ text: "‚ùå –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω", callback_data: "clear_screen" }]
        );
      }

      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —Ñ–æ—Ç–æ
      try {
        const msg = await ctx.replyWithPhoto(profile.photoUrl, {
          caption,
          parse_mode: "HTML",
          reply_markup: keyboard.length > 0 ? { inline_keyboard: keyboard } : undefined,
        });
        messageManager.track(ctx.chat.id, msg.message_id);
        return msg;
      } catch (e) {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        const msg = await ctx.reply(caption, {
          parse_mode: "HTML",
          reply_markup: keyboard.length > 0 ? { inline_keyboard: keyboard } : undefined,
        });
        messageManager.track(ctx.chat.id, msg.message_id);
        return msg;
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç—ã:", error);
      return null;
    }
  });
};
  
};
