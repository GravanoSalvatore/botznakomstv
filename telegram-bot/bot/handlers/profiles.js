const RateLimiter = require("telegraf-ratelimit");
const { default: PQueue } = require("p-queue");

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
const messageQueue = new PQueue({
  concurrency: 5,
  interval: 1000,
  intervalCap: 5,
});

// –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (24 —á–∞—Å–∞)
const MESSAGE_TTL = 86400000;
const CACHE_TTL = 600000;
module.exports = (bot, db) => {
  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  const PROFILES_PER_PAGE = 5;
  const MAX_CAPTION_LENGTH = 900;
  const CACHE_TTL = 300000;
  const AGE_RANGES = [
    { label: "18-25", min: 18, max: 25 },
    { label: "26-35", min: 26, max: 35 },
    { label: "36-45", min: 36, max: 45 },
    { label: "46+", min: 46, max: 999 },
  ];
let preloadedCountries = [];
  (async () => {
    try {
      const snapshot = await db.collection("profiles")
        .orderBy("country")
        .select("country")
        .get();
      preloadedCountries = [...new Set(snapshot.docs.map(doc => doc.data().country).filter(Boolean))].sort();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω:", error);
    }
  })();
// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
  const subscriptionCache = new Map();
  const checkSubscription = async (userId, db) => {
    const cacheKey = userId.toString();
    const now = Date.now();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (subscriptionCache.has(cacheKey)) {
      const { data, timestamp } = subscriptionCache.get(cacheKey);
      if (now - timestamp < 300000) { // 5 –º–∏–Ω—É—Ç –∫—ç—à–∞
        return data;
      }
    }
    
    try {
      const subRef = db.collection('subscriptions').doc(cacheKey);
      const doc = await subRef.get();
      
      if (!doc.exists) {
        subscriptionCache.set(cacheKey, { data: false, timestamp: now });
        return false;
      }
      
      const subData = doc.data();
      const isActive = subData.isActive && subData.endDate.toDate() > new Date();
      subscriptionCache.set(cacheKey, { data: isActive, timestamp: now });
      return isActive;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
      return false;
    }
  };

  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω —Å —ç–º–æ–¥–∑–∏
  const POPULAR_COUNTRIES = [
    { name: "–†–æ—Å—Å–∏—è", flag: "üá∑üá∫" },
    // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  ];

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è rate-limiter
  const limiter = new RateLimiter({
    window: 1000,
    limit: 3,
    onLimitExceeded: (ctx) =>
      ctx.reply("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–¥–æ–∂–¥–∏—Ç–µ —Å–µ–∫—É–Ω–¥—É..."),
  });



  bot.use(limiter);

  // –°–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
  const chatStorage = {
    messages: new Map(), // chatId: Set(messageIds)
    mainMenu: new Map(), // chatId: messageId
    userState: new Map(), // userId: state
    messageTimestamps: new Map(), // messageId: timestamp
    countryKeyboard: new Map(), // chatId: messageId (–¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Å—Ç—Ä–∞–Ω)
    cityKeyboard: new Map(), // chatId: messageId (–¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≥–æ—Ä–æ–¥–æ–≤)
  };

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
 setInterval(() => {
    const now = Date.now();
    chatStorage.messages.forEach((messages, chatId) => {
      messages.forEach(messageId => {
        if (now - (chatStorage.messageTimestamps.get(messageId) || 0) > MESSAGE_TTL) {
          messages.delete(messageId);
          chatStorage.messageTimestamps.delete(messageId);
        }
      });
    });
  }, 43200000);
  
const profilesCache = {
    data: null,
    timestamp: 0,
    filters: {
      country: null,
      age: null,
      city: null
    },
    clear: function() {
      this.data = null;
      this.timestamp = 0;
      this.filters = {
        country: null,
        age: null,
        city: null
      };
    },
    isCacheValid: function(currentFilters) {
      const now = Date.now();
      return this.data && 
             now - this.timestamp < CACHE_TTL &&
             this.filters.country === (currentFilters.country || null) &&
             this.filters.age === (currentFilters.age || null) &&
             this.filters.city === (currentFilters.city || null);
    }
  };

  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ø–æ–ª—É—á–∞–µ–º –∞–Ω–∫–µ—Ç—ã —Å –±–∞—Ç—á–∏–Ω–≥–æ–º –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ–ª–µ–π
  const getProfilesPage = async (page = 0, searchCountry = null, ageRange = null, searchCity = null) => {
    try {
      const currentFilters = {
        country: searchCountry,
        age: ageRange?.label,
        city: searchCity
      };

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫—ç—à–∞
      if (profilesCache.isCacheValid(currentFilters)) {
        return profilesCache.data.slice(
          page * PROFILES_PER_PAGE,
          (page + 1) * PROFILES_PER_PAGE
        );
      }

      // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
      let query = db.collection("profiles")
        .orderBy("createdAt", "desc")
        .select("id", "name", "age", "country", "city", "about", "photoUrl", "telegram", "phone", "whatsapp");

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–µ
      if (searchCountry) {
        query = query.where("country", "==", searchCountry);
      }

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥–æ—Ä–æ–¥—É
      if (searchCity) {
        query = query.where("city", "==", searchCity);
      }

      const snapshot = await query.get();

      let profiles = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç—Ä–∞–Ω–µ/–≥–æ—Ä–æ–¥—É
      if (ageRange && !searchCountry && !searchCity) {
        profiles = profiles.filter(profile => {
          const age = parseInt(profile.age) || 0;
          return age >= ageRange.min && age <= ageRange.max;
        });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
      profilesCache.data = profiles;
      profilesCache.timestamp = Date.now();
      profilesCache.filters = currentFilters;

      return profiles.slice(
        page * PROFILES_PER_PAGE,
        (page + 1) * PROFILES_PER_PAGE
      );
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∫–µ—Ç:", error);
      profilesCache.clear();
      return [];
    }
  };

  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
  const getUniqueCountries = async () => {
    try {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
      if (preloadedCountries.length > 0) {
        return preloadedCountries;
      }
      
      // –ò–Ω–∞—á–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –±–∞–∑—ã
      const snapshot = await db.collection("profiles")
        .orderBy("country")
        .select("country")
        .get();

      const countries = new Set();
      snapshot.docs.forEach(doc => {
        const country = doc.data().country;
        if (country) countries.add(country);
      });

      return Array.from(countries).sort();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω:", error);
      return [];
    }
  };

  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∫—ç—à–∏—Ä—É–µ–º –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω
  const cityCache = new Map();
  const getUniqueCitiesForCountry = async (country) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      if (cityCache.has(country)) {
        const { cities, timestamp } = cityCache.get(country);
        if (Date.now() - timestamp < CACHE_TTL) {
          return cities;
        }
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –±–∞–∑—ã
      const snapshot = await db.collection("profiles")
        .where("country", "==", country)
        .orderBy("city")
        .select("city")
        .get();

      const cities = new Set();
      snapshot.docs.forEach(doc => {
        const city = doc.data().city;
        if (city) cities.add(city);
      });

      const result = Array.from(cities).sort();
      cityCache.set(country, { cities: result, timestamp: Date.now() });
      return result;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤:", error);
      return [];
    }
  };
  

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ñ–ª–∞–≥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö)
  const formatCountryWithFlag = (countryName) => {
    if (!countryName) return countryName;

    const foundCountry = POPULAR_COUNTRIES.find(
      (c) => c.name.toLowerCase() === countryName.toLowerCase()
    );

    return foundCountry ? `${foundCountry.flag} ${countryName}` : countryName;
  };

  // –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
  const messageManager = {
    track: function (chatId, messageId) {
      if (!messageId) return;
      if (!chatStorage.messages.has(chatId)) {
        chatStorage.messages.set(chatId, new Set());
      }
      chatStorage.messages.get(chatId).add(messageId);
      chatStorage.messageTimestamps.set(messageId, Date.now());
    },


clear: async function (ctx, keepCityKeyboard = false, keepCountryKeyboard = false) {
  const chatId = ctx.chat.id;
  if (!chatStorage.messages.has(chatId)) return;

  const messages = [...chatStorage.messages.get(chatId)];
  const mainMenuId = chatStorage.mainMenu.get(chatId);
  const countryKeyboardId = chatStorage.countryKeyboard.get(chatId);
  const cityKeyboardId = chatStorage.cityKeyboard.get(chatId);

  for (const messageId of messages) {
    if (
      messageId !== mainMenuId &&
      messageId !== countryKeyboardId &&
      messageId !== cityKeyboardId
    ) {
      try {
        await ctx.telegram.deleteMessage(chatId, messageId);
        chatStorage.messages.get(chatId).delete(messageId);
        chatStorage.messageTimestamps.delete(messageId);
      } catch (e) {
        if (e.response?.error_code !== 400) {
          console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${messageId}:`, e.message);
        }
      }
    }
  }

  // –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–æ—Ä–æ–¥–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ
  if (cityKeyboardId && !keepCityKeyboard) {
    try {
      await ctx.telegram.deleteMessage(chatId, cityKeyboardId);
      chatStorage.messages.get(chatId).delete(cityKeyboardId);
      chatStorage.messageTimestamps.delete(cityKeyboardId);
      chatStorage.cityKeyboard.delete(chatId);
    } catch (e) {
      if (e.response?.error_code !== 400) {
        console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–æ—Ä–æ–¥–æ–≤:", e);
      }
    }
  }

  // –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω –µ—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ
  if (countryKeyboardId && !keepCountryKeyboard) {
    try {
      await ctx.telegram.deleteMessage(chatId, countryKeyboardId);
      chatStorage.messages.get(chatId).delete(countryKeyboardId);
      chatStorage.messageTimestamps.delete(countryKeyboardId);
      chatStorage.countryKeyboard.delete(chatId);
    } catch (e) {
      if (e.response?.error_code !== 400) {
        console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω:", e);
      }
    }
  }

  chatStorage.userState.delete(ctx.from.id);
},

sendMainMenu: async function (ctx) {
  return messageQueue.add(async () => {
    const chatId = ctx.chat.id;
    const self = this;

    try {
      // 1. –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –º–µ–Ω—é
      if (chatStorage.mainMenu.has(chatId)) {
        try {
          await ctx.telegram.deleteMessage(chatId, chatStorage.mainMenu.get(chatId));
          chatStorage.messages.get(chatId)?.delete(chatStorage.mainMenu.get(chatId));
          chatStorage.messageTimestamps.delete(chatStorage.mainMenu.get(chatId));
        } catch (e) {
          if (e.response?.error_code !== 400) {
            console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ–Ω—é:", e);
          }
        }
      }

      // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (db –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ)
      const hasSub = await checkSubscription(ctx.from.id, db);

      // 3. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
      const menuButtons = [
        [{
          text: 'üåê –û—Ç–∫—Ä—ã—Ç—å PeaceYourGun ü•ï –≤ WebApp', 
          web_app: { url: process.env.WEBAPP_URL }
        }]
      ];

      // 4. –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ —Å—Ç—Ä–∞–Ω—ã" —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
      if (hasSub) {
        menuButtons.push([{ 
          text: "üåç –í—Å–µ —Å—Ç—Ä–∞–Ω—ã", 
          callback_data: "all_countries" 
        }]);
      }

      // 5. –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      menuButtons.push(
        [{ text: "üéÇ –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É", callback_data: "filter_by_age" }],
        [{ text: "‚ùå –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω", callback_data: "clear_screen" }]
      );

      // 6. –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é
      const menu = await ctx.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", {
        reply_markup: { inline_keyboard: menuButtons },
      });

      // 7. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      chatStorage.mainMenu.set(chatId, menu.message_id);
      self.track(chatId, menu.message_id);

    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é:", error);
      throw error;
    }
  });
},
    
    sendCountriesKeyboard: async function (ctx) {
      return messageQueue.add(async () => {
        const chatId = ctx.chat.id;
        const self = this;

        try {
          // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
          if (chatStorage.countryKeyboard.has(chatId)) {
            try {
              await ctx.telegram.deleteMessage(
                chatId,
                chatStorage.countryKeyboard.get(chatId)
              );
              chatStorage.messages
                .get(chatId)
                ?.delete(chatStorage.countryKeyboard.get(chatId));
              chatStorage.messageTimestamps.delete(
                chatStorage.countryKeyboard.get(chatId)
              );
            } catch (e) {
              if (e.response?.error_code !== 400) {
                console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω:", e);
              }
            }
          }

          // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –∏–∑ –±–∞–∑—ã
          const uniqueCountries = await getUniqueCountries();

          // –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω –Ω–µ—Ç –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ
          const countriesToShow =
            uniqueCountries.length > 0 && uniqueCountries.length <= 50
              ? uniqueCountries
              : POPULAR_COUNTRIES.map((c) => c.name);

          // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
          const keyboard = [];
          let row = [];

          // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω—ã —Å —Ñ–ª–∞–≥–∞–º–∏
          countriesToShow.forEach((country, index) => {
            const countryWithFlag = formatCountryWithFlag(country);
            row.push({
              text: countryWithFlag,
              callback_data: `country_${country}`,
            });

            // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 3 –∫–Ω–æ–ø–∫–∏
            if (row.length === 3 || index === countriesToShow.length - 1) {
              keyboard.push(row);
              row = [];
            }
          });

          // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
          keyboard.push([{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_menu" }]);

          const msg = await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", {
            reply_markup: { inline_keyboard: keyboard },
          });

          chatStorage.countryKeyboard.set(chatId, msg.message_id);
          self.track(chatId, msg.message_id);
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω:", error);
          throw error;
        }
      });
    },

    sendCitiesKeyboard: async function (ctx, country) {
      return messageQueue.add(async () => {
        const chatId = ctx.chat.id;
        const self = this;

        try {
          // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–æ—Ä–æ–¥–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
          if (chatStorage.cityKeyboard.has(chatId)) {
            try {
              await ctx.telegram.deleteMessage(
                chatId,
                chatStorage.cityKeyboard.get(chatId)
              );
              chatStorage.messages
                .get(chatId)
                ?.delete(chatStorage.cityKeyboard.get(chatId));
              chatStorage.messageTimestamps.delete(
                chatStorage.cityKeyboard.get(chatId)
              );
            } catch (e) {
              if (e.response?.error_code !== 400) {
                console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–æ—Ä–æ–¥–æ–≤:", e);
              }
            }
          }

          // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã
          const cities = await getUniqueCitiesForCountry(country);

          // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
          const keyboard = [];
          let row = [];

          // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥–∞
          cities.forEach((city, index) => {
            row.push({
              text: city,
              callback_data: `city_${city}`,
            });

            // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 3 –∫–Ω–æ–ø–∫–∏
            if (row.length === 3 || index === cities.length - 1) {
              keyboard.push(row);
              row = [];
            }
          });

          // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
          keyboard.push([
            { text: "üéÇ –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É", callback_data: "filter_by_age" },
          ]);
          keyboard.push([
            { text: "üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç—Ä–∞–Ω–∞–º", callback_data: "back_to_countries" },
          ]);

          const msg = await ctx.reply(`–ì–æ—Ä–æ–¥–∞ –≤ ${country}:`, {
            reply_markup: { inline_keyboard: keyboard },
          });

          chatStorage.cityKeyboard.set(chatId, msg.message_id);
          self.track(chatId, msg.message_id);
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–æ—Ä–æ–¥–æ–≤:", error);
          throw error;
        }
      });
    },
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
  bot.command("start", async (ctx) => {
    await messageQueue.add(async () => {
      try {
        await messageManager.clear(ctx);
        await messageManager.sendMainMenu(ctx);
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã start:", error);
      }
    });
  });

  bot.action("show_profiles", async (ctx) => {
    await messageQueue.add(async () => {
      try {
        await ctx.answerCbQuery("–ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∫–µ—Ç—ã...");

        ctx.session = ctx.session || {};
        ctx.session.profilesPage = 0;
        ctx.session.filterCountry = null;
        ctx.session.displayCountry = null;
        ctx.session.ageRange = null;
        ctx.session.filterCity = null;

        console.log("Starting profiles load", {
          cache: profilesCache.data ? "exists" : "empty",
          cacheAge: Date.now() - profilesCache.timestamp,
        });

        await messageManager.clear(ctx);

        if (
          !profilesCache.data ||
          Date.now() - profilesCache.timestamp > CACHE_TTL
        ) {
          profilesCache.clear();
        }
        const profiles = await getProfilesPage(0);

        if (!profiles.length) {
          const msg = await ctx.reply("–ê–Ω–∫–µ—Ç –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ");
          messageManager.track(ctx.chat.id, msg.message_id);
          return;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∞–Ω–∫–µ—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        for (let i = 0; i < profiles.length; i++) {
          const isLast = i === profiles.length - 1;
          await sendProfile(ctx, profiles[i], 0, profiles.length, isLast);
          if (!isLast) await new Promise((resolve) => setTimeout(resolve, 300));
        }

        await messageManager.sendMainMenu(ctx);
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–Ω–∫–µ—Ç:", error);
        try {
          await ctx.answerCbQuery("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏");
          const msg = await ctx.reply(
            "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∫–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑"
          );
          messageManager.track(ctx.chat.id, msg.message_id);
        } catch (e) {
          console.error("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:", e);
        }
      }
    });
  });
bot.action("all_countries", async (ctx) => {
    try {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        const hasSub = await checkSubscription(ctx.from.id, db);
        
        // 2. –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º
        if (!hasSub) {
            await ctx.answerCbQuery("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞");
            return;
        }
        
        // 3. –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å - –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
        await ctx.answerCbQuery("–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω...");
        
        return messageQueue.add(async () => {
            try {
                await messageManager.clear(ctx);
                await messageManager.sendCountriesKeyboard(ctx);
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω:", error);
                await ctx.answerCbQuery("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏");
            }
        });
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ all_countries:", error);
        await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
    }
});
  

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞
  bot.action(/^country_(.+)$/, async (ctx) => {
    await messageQueue.add(async () => {
      try {
        const country = ctx.match[1];
        ctx.session = ctx.session || {};
        ctx.session.profilesPage = 0;
        ctx.session.filterCountry = country;
        ctx.session.displayCountry = country;
        ctx.session.filterCity = null;

        await messageManager.clear(ctx);
        await messageManager.sendCitiesKeyboard(ctx, country);
        await ctx.answerCbQuery();
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã:", error);
      }
    });
  });

  
  bot.action(/^city_(.+)$/, async (ctx) => {
  await messageQueue.add(async () => {
    try {
      const city = ctx.match[1];
      ctx.session = ctx.session || {};
      ctx.session.profilesPage = 0;
      ctx.session.filterCity = city;

      // –û—á–∏—â–∞–µ–º, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–æ—Ä–æ–¥–æ–≤ –∏ —Å—Ç—Ä–∞–Ω
      await messageManager.clear(ctx, true, true);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤–Ω–∏–∑—É
      await messageManager.sendMainMenu(ctx);

      const profiles = await getProfilesPage(
        0,
        ctx.session.filterCountry,
        ctx.session.ageRange,
        city
      );

      if (!profiles.length) {
        const msg = await ctx.reply(`–ê–Ω–∫–µ—Ç –∏–∑ –≥–æ—Ä–æ–¥–∞ "${city}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        messageManager.track(ctx.chat.id, msg.message_id);
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—ã
      for (let i = 0; i < profiles.length; i++) {
        const isLast = i === profiles.length - 1;
        await sendProfile(ctx, profiles[i], 0, profiles.length, isLast);
        if (!isLast) await new Promise((resolve) => setTimeout(resolve, 300));
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞:", error);
    }
  });
});
bot.action("back_to_countries", async (ctx) => {
  await messageQueue.add(async () => {
    try {
      // –û—á–∏—â–∞–µ–º, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω
      await messageManager.clear(ctx, false, true);
      await messageManager.sendCountriesKeyboard(ctx);
      await ctx.answerCbQuery();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å—Ç—Ä–∞–Ω–∞–º:", error);
    }
  });
});
  
  bot.action("back_to_menu", async (ctx) => {
    await messageQueue.add(async () => {
      try {
        await messageManager.clear(ctx);
        await messageManager.sendMainMenu(ctx);
        await ctx.answerCbQuery();
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é:", error);
      }
    });
  });

  // –ü–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä–∞–Ω–µ —á–µ—Ä–µ–∑ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
  bot.action("search_by_country", async (ctx) => {
    await messageQueue.add(async () => {
      try {
        chatStorage.userState.set(ctx.from.id, "awaiting_country");
        const msg = await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø–æ–∏—Å–∫–∞:");
        messageManager.track(ctx.chat.id, msg.message_id);
        await ctx.answerCbQuery();
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:", error);
      }
    });
  });

  
  // –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
bot.action("filter_by_age", async (ctx) => {
  await messageQueue.add(async () => {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–ª–∞–≤–∏–∞—Ç—É—Ä –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
      const chatId = ctx.chat.id;
      const countryKeyboardId = chatStorage.countryKeyboard.get(chatId);
      const cityKeyboardId = chatStorage.cityKeyboard.get(chatId);

      // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–Ω—É–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
      await messageManager.clear(ctx, true, true);

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID –∫–ª–∞–≤–∏–∞—Ç—É—Ä –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
      if (countryKeyboardId) {
        chatStorage.countryKeyboard.set(chatId, countryKeyboardId);
      }
      if (cityKeyboardId) {
        chatStorage.cityKeyboard.set(chatId, cityKeyboardId);
      }

      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
      const keyboard = AGE_RANGES.map((range) => [
        { text: range.label, callback_data: `age_range_${range.label}` },
      ]);
      keyboard.push([
        { text: "‚ùå –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", callback_data: "age_range_reset" },
      ]);

      const msg = await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:", {
        reply_markup: { inline_keyboard: keyboard },
      });

      messageManager.track(ctx.chat.id, msg.message_id);
      await ctx.answerCbQuery();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É:", error);
    }
  });
});


 
// –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É:
bot.action(/^age_range_(.+)$/, async (ctx) => {
  await messageQueue.add(async () => {
    try {
      const [_, range] = ctx.match;
      ctx.session = ctx.session || {};
      ctx.session.profilesPage = 0;

      if (range === "reset") {
        ctx.session.ageRange = null;
      } else {
        const selectedRange = AGE_RANGES.find((r) => r.label === range);
        if (selectedRange) {
          ctx.session.ageRange = selectedRange;
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥ –∏ —Å—Ç—Ä–∞–Ω—É –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
      const currentCountry = ctx.session.filterCountry;
      const currentCity = ctx.session.filterCity;

      // –ü–æ–ª—É—á–∞–µ–º ID –∫–ª–∞–≤–∏–∞—Ç—É—Ä –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
      const chatId = ctx.chat.id;
      const countryKeyboardId = chatStorage.countryKeyboard.get(chatId);
      const cityKeyboardId = chatStorage.cityKeyboard.get(chatId);

      // –û—á–∏—â–∞–µ–º, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–æ—Ä–æ–¥–æ–≤ –∏ —Å—Ç—Ä–∞–Ω
      await messageManager.clear(ctx, true, true);

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID –∫–ª–∞–≤–∏–∞—Ç—É—Ä –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
      if (countryKeyboardId) {
        chatStorage.countryKeyboard.set(chatId, countryKeyboardId);
      }
      if (cityKeyboardId) {
        chatStorage.cityKeyboard.set(chatId, cityKeyboardId);
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∫–µ—Ç—ã —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
      const profiles = await getProfilesPage(
        0,
        currentCountry,
        ctx.session.ageRange,
        currentCity
      );

      if (!profiles.length) {
        const msg = await ctx.reply("–ê–Ω–∫–µ—Ç –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã");
        messageManager.track(ctx.chat.id, msg.message_id);
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—ã
      for (let i = 0; i < profiles.length; i++) {
        const isLast = i === profiles.length - 1;
        await sendProfile(ctx, profiles[i], 0, profiles.length, isLast);
        if (!isLast) await new Promise((resolve) => setTimeout(resolve, 300));
      }

      // –ï—Å–ª–∏ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞, –Ω–æ –Ω–µ –≥–æ—Ä–æ–¥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ—Ä–æ–¥–∞ —Å–Ω–æ–≤–∞
      if (currentCountry && !currentCity) {
        await messageManager.sendCitiesKeyboard(ctx, currentCountry);
      }

      // –ï—Å–ª–∏ –±—ã–ª –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ - –æ—Å—Ç–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      if (currentCity) {
        await messageManager.sendMainMenu(ctx);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞:", error);
    }
  });
});
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
  bot.on("text", async (ctx) => {
    const userId = ctx.from.id;
    if (chatStorage.userState.get(userId) === "awaiting_country") {
      await messageQueue.add(async () => {
        try {
          messageManager.track(ctx.chat.id, ctx.message.message_id);
          const countryInput = ctx.message.text.trim();

          if (!countryInput) {
            const msg = await ctx.reply("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å—Ç—Ä–∞–Ω—É");
            messageManager.track(ctx.chat.id, msg.message_id);
            return;
          }

          await messageManager.clear(ctx);
          ctx.session = ctx.session || {};
          ctx.session.profilesPage = 0;

          const profiles = await getProfilesPage(
            0,
            countryInput,
            ctx.session.ageRange
          );

          let normalizedCountry = null;
          if (profiles.length > 0) {
            normalizedCountry = profiles[0].country;
          } else if (countryInput.toLowerCase() === "—Ä–æ—Å") {
            normalizedCountry = "–†–æ—Å—Å–∏—è";
          } else {
            normalizedCountry = countryInput;
          }

          ctx.session.filterCountry = countryInput;
          ctx.session.displayCountry = normalizedCountry;

          if (profiles.length) {
            for (let i = 0; i < profiles.length; i++) {
              const isLast = i === profiles.length - 1;
              await sendProfile(ctx, profiles[i], 0, profiles.length, isLast);
              if (!isLast) await new Promise((resolve) => setTimeout(resolve, 300));
            }
          } else {
            const msg = await ctx.reply(
              `–ê–Ω–∫–µ—Ç –∏–∑ "${normalizedCountry}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`
            );
            messageManager.track(ctx.chat.id, msg.message_id);
          }

          await messageManager.sendMainMenu(ctx);
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω—ã:", error);
        }
      });
    }
  });

  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
 bot.action(/^page_(first|prev|next|last|\d+)_(\d+)$/, async (ctx) => {
  await messageQueue.add(async () => {
    try {
      const [_, action, currentPage] = ctx.match;
      let newPage = parseInt(currentPage);

      if (action === "first") newPage = 0;
      else if (action === "prev") newPage = Math.max(0, newPage - 1);
      else if (action === "next") newPage = newPage + 1;
      else if (action === "last")
        newPage = Math.ceil(profilesCache.data.length / PROFILES_PER_PAGE) - 1;
      else newPage = parseInt(action);

      // –û—á–∏—â–∞–µ–º, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–æ—Ä–æ–¥–æ–≤
      await messageManager.clear(ctx, true);
      
      ctx.session = ctx.session || {};
      const profiles = await getProfilesPage(
        newPage,
        ctx.session.filterCountry,
        ctx.session.ageRange,
        ctx.session.filterCity
      );

      if (profiles.length) {
        ctx.session.profilesPage = newPage;

        for (let i = 0; i < profiles.length; i++) {
          const isLast = i === profiles.length - 1;
          await sendProfile(ctx, profiles[i], newPage, profiles.length, isLast);
          if (!isLast) await new Promise((resolve) => setTimeout(resolve, 300));
        }
      } else {
        const msg = await ctx.reply("–ë–æ–ª—å—à–µ –∞–Ω–∫–µ—Ç –Ω–µ—Ç");
        messageManager.track(ctx.chat.id, msg.message_id);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏:", error);
    }
  });
});

  // –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
  bot.action("clear_screen", async (ctx) => {
    await messageQueue.add(async () => {
      try {
        await messageManager.clear(ctx);
        await ctx.answerCbQuery("–≠–∫—Ä–∞–Ω –æ—á–∏—â–µ–Ω");
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:", error);
        await ctx.answerCbQuery("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ");
      }
    });
  });
const sendProfile = async (ctx, profile, page, total, isLast) => {
  return messageQueue.add(async () => {
    try {
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã
      const about = profile.about?.length > MAX_CAPTION_LENGTH
        ? profile.about.substring(0, MAX_CAPTION_LENGTH - 3) + "..."
        : profile.about || "";

      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram —Å—Å—ã–ª–∫–∏
      const formatTelegram = (username) => {
        if (!username) return "";
        if (username.startsWith("https://t.me/")) {
          const cleaned = decodeURIComponent(username)
            .replace("https://t.me/", "")
            .replace(/^%40/, "@")
            .replace(/^\+/, "");
          return `üí¨ <a href="https://t.me/${cleaned}">Telegram</a>`;
        }
        const cleaned = username.replace(/^[@+]/, "");
        return `üí¨ <a href="https://t.me/${cleaned}">Telegram</a>`;
      };

      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const formatPhone = (phone) => {
        if (!phone) return "";
        const cleanPhone = phone.replace(/[^0-9+]/g, "");
        return `üìû <a href="tel:${cleanPhone}">${phone}</a>`;
      };

      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WhatsApp —Å—Å—ã–ª–∫–∏
      const formatWhatsApp = (url) => {
        if (!url) return "";
        return `üì± <a href="${url}">WhatsApp</a>`;
      };

      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
      const caption = `
üë§ <b>${profile.name}</b>, ${profile.age}\n\n
${profile.country}\n
üìç ${profile.city}\n
<em>${about}</em>\n
${profile.phone ? formatPhone(profile.phone) + "\n" : ""}
${profile.telegram ? formatTelegram(profile.telegram) + "\n" : ""}
${profile.whatsapp ? formatWhatsApp(profile.whatsapp) + "\n" : ""}
‚ö†üö® <b>–ù–ï –ø–ª–∞—Ç–∏—Ç–µ –≤–ø–µ—Ä–µ–¥ —Å –ø–æ–º–æ—â—å—é Transcash, –±–∏–ª–µ—Ç–æ–≤ PCS, Neosurf, BITCOIN –∏–ª–∏ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–µ ‚Äì —ç—Ç–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ª–æ—Ö–æ—Ç—Ä–æ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –Ω–∞–º –æ —Ç–∞–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª—è—Ö‚ùó</b>`.trim();

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–Ω–∫–µ—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      let keyboard = [];
      if (isLast) {
        const totalPages = Math.ceil(profilesCache.data.length / PROFILES_PER_PAGE);
        
        // 1. –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        const paginationRow = [];
        if (page > 0) {
          paginationRow.push({ text: "‚è™", callback_data: `page_first_${page}` });
          paginationRow.push({ text: "‚óÄÔ∏è", callback_data: `page_prev_${page}` });
        }
        
        paginationRow.push({ text: `${page + 1}/${totalPages}`, callback_data: "page_info" });
        
        if (page < totalPages - 1) {
          paginationRow.push({ text: "‚ñ∂Ô∏è", callback_data: `page_next_${page}` });
          paginationRow.push({ text: "‚è©", callback_data: `page_last_${page}` });
        }
        
        keyboard.push(paginationRow);

        // 2. –î–æ–±–∞–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (totalPages > 3) {
          const quickPagesRow = [];
          const maxQuickPages = Math.min(5, totalPages);
          const startPage = Math.max(
            0,
            Math.min(page - Math.floor(maxQuickPages / 2), totalPages - maxQuickPages)
          );

          for (let i = 0; i < maxQuickPages; i++) {
            const p = startPage + i;
            if (p >= 0 && p < totalPages) {
              quickPagesRow.push({
                text: p === page ? `‚Ä¢ ${p + 1} ‚Ä¢` : `${p + 1}`,
                callback_data: `page_${p}_${page}`,
              });
            }
          }
          keyboard.push(quickPagesRow);
        }

        // 3. –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        if (ctx.session?.displayCountry || ctx.session?.ageRange?.label || ctx.session?.filterCity) {
          let filtersText = "üîπ ";
          if (ctx.session.displayCountry) filtersText += `–°—Ç—Ä–∞–Ω–∞: ${ctx.session.displayCountry}`;
          if (ctx.session.filterCity) {
            if (ctx.session.displayCountry) filtersText += ", ";
            filtersText += `–ì–æ—Ä–æ–¥: ${ctx.session.filterCity}`;
          }
          if (ctx.session.ageRange?.label) {
            if (ctx.session.displayCountry || ctx.session.filterCity) filtersText += ", ";
            filtersText += `–í–æ–∑—Ä–∞—Å—Ç: ${ctx.session.ageRange.label}`;
          }
          keyboard.push([{ text: filtersText, callback_data: "filters_info" }]);
        }

        // 4. –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–¥ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        keyboard.push(
          [{ text: "üåê –û—Ç–∫—Ä—ã—Ç—å PeaceYourGun ü•ï –≤ WebApp", web_app: { url: process.env.WEBAPP_URL } }],
          [{ text: "üåç –í—Å–µ —Å—Ç—Ä–∞–Ω—ã", callback_data: "all_countries" }],
          [{ text: "üéÇ –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É", callback_data: "filter_by_age" }],
          [{ text: "‚ùå –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω", callback_data: "clear_screen" }]
        );
      }

      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —Ñ–æ—Ç–æ
      try {
        const msg = await ctx.replyWithPhoto(profile.photoUrl, {
          caption,
          parse_mode: "HTML",
          reply_markup: keyboard.length > 0 ? { inline_keyboard: keyboard } : undefined,
        });
        messageManager.track(ctx.chat.id, msg.message_id);
        return msg;
      } catch (e) {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        const msg = await ctx.reply(caption, {
          parse_mode: "HTML",
          reply_markup: keyboard.length > 0 ? { inline_keyboard: keyboard } : undefined,
        });
        messageManager.track(ctx.chat.id, msg.message_id);
        return msg;
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç—ã:", error);
      return null;
    }
  });
};
  
};
