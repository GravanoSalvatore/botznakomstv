// module.exports = (bot, db) => {
//   // –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
//   bot.command('admin', async (ctx) => {
//     if (!ctx.isAdmin) return
    
//     // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
//     const [usersCount, profilesCount] = await Promise.all([
//       db.collection('users').count().get(),
//       db.collection('profiles').count().get()
//     ])
    
//     await ctx.replyWithHTML(`
// <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>
// ‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersCount.data().count}
// ‚îú –ê–Ω–∫–µ—Ç: ${profilesCount.data().count}
// ‚îî –î–æ—Ö–æ–¥: ${await getRevenue()} ‚ÇΩ

// –ö–æ–º–∞–Ω–¥—ã:
// /moderation - –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∞–Ω–∫–µ—Ç
// /stats - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
//     `)
//   })

//   async function getRevenue() {
//     // –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–∞
//     return 0 // –ó–∞–≥–ª—É—à–∫–∞
//   }
// }
// module.exports = (bot, db) => {
  
//   // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//   bot.command('subinfo', async (ctx) => {
//     if (!ctx.isAdmin) {
//       return ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
//     }
    
//     try {
//       // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã (/subinfo 12345)
//       const userId = ctx.message.text.split(' ')[1];
//       if (!userId) {
//         return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /subinfo USER_ID');
//       }
      
//       // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
//       const subRef = db.collection('subscriptions').doc(userId);
//       const doc = await subRef.get();
      
//       if (!doc.exists) {
//         return ctx.reply('‚Ñπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫');
//       }
      
//       const subData = doc.data();
//       let message = `üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:\n\n`;
//       message += `–¢–∏–ø: ${subData.subscriptionType}\n`;
//       message += `–°—Ç–∞—Ç—É—Å: ${subData.isActive ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n`;
//       message += `–ù–∞—á–∞–ª–æ: ${subData.startDate.toDate().toLocaleString()}\n`;
      
//       if (subData.subscriptionType === 'forever') {
//         message += `–û–∫–æ–Ω—á–∞–Ω–∏–µ: –ë–µ—Å—Å—Ä–æ—á–Ω–æ\n`;
//       } else {
//         message += `–û–∫–æ–Ω—á–∞–Ω–∏–µ: ${subData.endDate.toDate().toLocaleString()}\n`;
//         message += `–û—Å—Ç–∞–ª–æ—Å—å: ${Math.ceil((subData.endDate.toDate() - new Date()) / (1000 * 60 * 60 * 24))} –¥–Ω–µ–π\n`;
//       }
      
//       await ctx.reply(message);
      
//       // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
//       await ctx.reply('–î–µ–π—Å—Ç–≤–∏—è:', {
//         reply_markup: {
//           inline_keyboard: [
//             [
//               { 
//                 text: subData.isActive ? '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å', 
//                 callback_data: `toggle_sub_${userId}`
//               },
//               { 
//                 text: '–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 
//                 callback_data: `delete_sub_${userId}`
//               }
//             ]
//           ]
//         }
//       });
      
//     } catch (error) {
//       console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ:', error);
//       await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ');
//     }
//   });
  
//   // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π
//   bot.action(/toggle_sub_(.+)/, async (ctx) => {
//     if (!ctx.isAdmin) {
//       return ctx.answerCbQuery('‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è');
//     }
    
//     const userId = ctx.match[1];
    
//     try {
//       const subRef = db.collection('subscriptions').doc(userId);
//       const doc = await subRef.get();
      
//       if (!doc.exists) {
//         return ctx.answerCbQuery('–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
//       }
      
//       const currentStatus = doc.data().isActive;
//       await subRef.update({
//         isActive: !currentStatus,
//         updatedAt: admin.firestore.FieldValue.serverTimestamp()
//       });
      
//       await ctx.answerCbQuery(`–ü–æ–¥–ø–∏—Å–∫–∞ ${!currentStatus ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞'}`);
//       await ctx.deleteMessage();
//       await ctx.reply(`–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${!currentStatus ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}`);
      
//     } catch (error) {
//       console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
//       await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞');
//     }
//   });
  
//   bot.action(/delete_sub_(.+)/, async (ctx) => {
//     if (!ctx.isAdmin) {
//       return ctx.answerCbQuery('‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è');
//     }
    
//     const userId = ctx.match[1];
    
//     try {
//       await db.collection('subscriptions').doc(userId).delete();
//       await ctx.answerCbQuery('–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞');
//       await ctx.deleteMessage();
//       await ctx.reply(`–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —É–¥–∞–ª–µ–Ω–∞`);
      
//     } catch (error) {
//       console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:', error);
//       await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏');
//     }
//   });
// };
//admin.js
// const admin = require('firebase-admin');

// module.exports = (bot, db) => {
//   // 1. –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ
//   bot.command('subinfo', async (ctx) => {
//     if (!ctx.isAdmin) return ctx.reply('‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    
//     try {
//       const userId = ctx.message.text.split(' ')[1] || ctx.from.id;
//       if (!userId) return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /subinfo [USER_ID]');

//       const subRef = db.collection('subscriptions').doc(userId.toString());
//       const subDoc = await subRef.get();

//       if (!subDoc.exists) return ctx.reply('‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

//       const subData = subDoc.data();
//       const userRef = db.collection('usersPay').doc(userId.toString());
//       const userDoc = await userRef.get();
//       const userData = userDoc.exists ? userDoc.data() : { balance: 0 };

//       let message = `üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ${userId}</b>\n\n`;
//       message += `üí∞ –ë–∞–ª–∞–Ω—Å: ${userData.balance || 0}üåü\n`;
//       message += `üîπ –ü–æ–¥–ø–∏—Å–∫–∞: ${subData.plan || '–Ω–µ—Ç'}\n`;
//       message += `üîÑ –°—Ç–∞—Ç—É—Å: ${subData.isActive ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n`;
//       message += `‚è≥ –ù–∞—á–∞–ª–æ: ${subData.startDate.toDate().toLocaleString()}\n`;
      
//       if (subData.endDate) {
//         message += `‚è∞ –û–∫–æ–Ω—á–∞–Ω–∏–µ: ${subData.endDate.toDate().toLocaleString()}\n`;
//         const daysLeft = Math.ceil((subData.endDate.toDate() - new Date()) / (86400000));
//         message += `üìÖ –û—Å—Ç–∞–ª–æ—Å—å: ${daysLeft} –¥–Ω–µ–π\n`;
//       } else {
//         message += `‚è∞ –û–∫–æ–Ω—á–∞–Ω–∏–µ: –ë–µ—Å—Å—Ä–æ—á–Ω–∞—è\n`;
//       }

//       await ctx.reply(message, { parse_mode: 'HTML' });

//       // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
//       if (ctx.isAdmin) {
//         await ctx.reply('–î–µ–π—Å—Ç–≤–∏—è:', {
//           reply_markup: {
//             inline_keyboard: [
//               [
//                 { 
//                   text: subData.isActive ? '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å', 
//                   callback_data: `admin_toggle_sub_${userId}`
//                 },
//                 { 
//                   text: '–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 
//                   callback_data: `admin_delete_sub_${userId}`
//                 }
//               ],
//               [
//                 {
//                   text: '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å',
//                   callback_data: `admin_add_balance_${userId}`
//                 }
//               ]
//             ]
//           }
//         });
//       }

//     } catch (error) {
//       console.error('Subinfo error:', error);
//       await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
//     }
//   });

//   // 2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
//   bot.action(/admin_toggle_sub_(.+)/, async (ctx) => {
//     if (!ctx.isAdmin) return ctx.answerCbQuery('‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
    
//     try {
//       const userId = ctx.match[1];
//       const subRef = db.collection('subscriptions').doc(userId.toString());

//       await db.runTransaction(async (t) => {
//         const doc = await t.get(subRef);
//         if (!doc.exists) throw new Error('–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        
//         const current = doc.data().isActive || false;
//         t.update(subRef, { 
//           isActive: !current,
//           lastUpdated: admin.firestore.FieldValue.serverTimestamp()
//         });
//       });

//       await ctx.answerCbQuery(`–ü–æ–¥–ø–∏—Å–∫–∞ ${ctx.match[1]} ${!current ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞'}`);
//       await ctx.deleteMessage();
//       await ctx.reply(`‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω`);

//     } catch (error) {
//       console.error('Toggle sub error:', error);
//       await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
//     }
//   });

//   bot.action(/admin_delete_sub_(.+)/, async (ctx) => {
//     if (!ctx.isAdmin) return ctx.answerCbQuery('‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
    
//     try {
//       const userId = ctx.match[1];
//       await db.collection('subscriptions').doc(userId.toString()).delete();
//       await ctx.answerCbQuery('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞');
//       await ctx.deleteMessage();
//       await ctx.reply(`–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —É–¥–∞–ª–µ–Ω–∞`);

//     } catch (error) {
//       console.error('Delete sub error:', error);
//       await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
//     }
//   });

//   // 3. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º
//   bot.action(/admin_add_balance_(.+)/, async (ctx) => {
//     if (!ctx.isAdmin) return ctx.answerCbQuery('‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
    
//     try {
//       const userId = ctx.match[1];
//       await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`);
      
//       // –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ —Å—É–º–º—ã
//       bot.hears(/^\d+$/, async (ctx) => {
//         const amount = parseInt(ctx.message.text);
//         if (isNaN(amount) || amount <= 0) {
//           return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞');
//         }

//         await db.collection('usersPay').doc(userId.toString()).update({
//           balance: admin.firestore.FieldValue.increment(amount),
//           lastUpdated: admin.firestore.FieldValue.serverTimestamp()
//         });

//         await ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} –¥–æ–±–∞–≤–ª–µ–Ω–æ ${amount}üåü`);
//       });

//     } catch (error) {
//       console.error('Add balance error:', error);
//       await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è');
//     }
//   });
// };
const admin = require('firebase-admin');

module.exports = (bot, db) => {
  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
  const checkSubscription = async (userId) => {
    try {
      const subRef = db.collection('subscriptions').doc(userId.toString());
      const doc = await subRef.get();
      
      if (!doc.exists) return false;
      
      const subData = doc.data();
      
      if (subData.subscriptionType === 'forever' && subData.isActive) {
        return { 
          active: true,
          type: 'forever',
          message: 'üéâ –£ –≤–∞—Å –±–µ—Å—Å—Ä–æ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!'
        };
      }
      
      if (subData.endDate && subData.endDate.toDate() > new Date() && subData.isActive) {
        return {
          active: true,
          type: subData.subscriptionType,
          endDate: subData.endDate.toDate(),
          message: `‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: ${subData.endDate.toDate().toLocaleString()}`
        };
      }
      
      return false;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
      return false;
    }
  };

  // 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  bot.start(async (ctx) => {
    const userId = ctx.from.id;
    const subscription = await checkSubscription(userId);
    
    try {
      await ctx.replyWithPhoto(
        { 
          url: 'https://st4.depositphotos.com/2944823/21275/i/450/depositphotos_212755884-stock-photo-fashion-outdoor-photo-group-beautiful.jpg',
          filename: 'welcome.jpg'
        },
        {
          caption: `üëã<b> –ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}!
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤ üÖøüÖ¥üÖ∞üÖ≤üÖ¥üíãüÜàüÖæüÜÑüÜÅü•ïüÖ∂üÜÑüÖΩ</b> 
<em>–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å –∫–∞—Ç–∞–ª–æ–≥ –∞–Ω–∫–µ—Ç —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è, —Ñ–ª–∏—Ä—Ç–∞ –∏ —Å–µ—Ä—å—ë–∑–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π.
üéâ –ö–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –≤—Å–µ–≥–¥–∞ —Å–≤–µ–∂–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏!
–ù–∞—á–Ω–∏ –ø–æ–∏—Å–∫ –∏–ª–∏ —Ä–∞–∑–º–µ—Å—Ç–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —Ç–≤–æ—è –≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∫–∞ —É–∂–µ –∑–¥–µ—Å—å!</em>
<b>‚ö†üö® –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Ç–µ–±–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 18+‚ùó</b>
${subscription ? `\n\n${subscription.message}` : ''}`,
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üë©‚Äçü¶∞ –ê–Ω–∫–µ—Ç—ã PeaceYourGun ü•ï', callback_data: 'show_profiles' }],
              [{ text: 'üåê –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ PeaceYourGun ü•ï', url: process.env.WEBAPP_URL }],
              [{ text: 'üî• –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –¥–µ–Ω—å (399üåü)', callback_data: 'start_pay_1day' }],
              [{ text: '‚ù§Ô∏è –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –º–µ—Å—è—Ü (799üåü)', callback_data: 'start_pay_1month' }],
              [{ text: 'üí´ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞–≤—Å–µ–≥–¥–∞ (3999üåü)', callback_data: 'start_pay_forever' }]
            ]
          }
        }
      );
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ:', e);
      await ctx.reply(`üëã<b> –ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}!
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤</b> +
<b>–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å –∫–∞—Ç–∞–ª–æ–≥ –∞–Ω–∫–µ—Ç —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è, —Ñ–ª–∏—Ä—Ç–∞ –∏ —Å–µ—Ä—å—ë–∑–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π.
üéâ –ö–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –≤—Å–µ–≥–¥–∞ —Å–≤–µ–∂–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏!
–ù–∞—á–Ω–∏ –ø–æ–∏—Å–∫ –∏–ª–∏ —Ä–∞–∑–º–µ—Å—Ç–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —Ç–≤–æ—è –≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∫–∞ —É–∂–µ –∑–¥–µ—Å—å!
‚ö† –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Ç–µ–±–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 18+</b>
${subscription ? `\n\n${subscription.message}` : ''}`, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üë©‚Äçü¶∞ –ê–Ω–∫–µ—Ç—ã PeaceYourGun ü•ï', callback_data: 'show_profiles' }],
            [{ text: 'üåê –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ PeaceYourGun ü•ï', url: process.env.WEBAPP_URL }],
            [{ text: 'üî• –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –¥–µ–Ω—å (399üåü)', callback_data: 'start_pay_1day' }],
            [{ text: '‚ù§Ô∏è –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –º–µ—Å—è—Ü (799üåü)', callback_data: 'start_pay_1month' }],
            [{ text: 'üí´ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞–≤—Å–µ–≥–¥–∞ (3999üåü)', callback_data: 'start_pay_forever' }]
          ]
        }
      });
    }
  });

  // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ (–¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–≤—ë–∑–¥)
  bot.action(/start_pay_(.+)/, async (ctx) => {
    const userId = ctx.from.id;
    const planId = ctx.match[1];
    
    try {
      // –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã
      const plan = {
        '1day': { price: 399, name: "1 –¥–µ–Ω—å", duration: 86400000 },
        '1month': { price: 799, name: "1 –º–µ—Å—è—Ü", duration: 2592000000 },
        'forever': { price: 3999, name: "1 –≥–æ–¥", duration: null }
      }[planId];

      if (!plan) throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–≤—ë–∑–¥ —á–µ—Ä–µ–∑ Telegram API
      const userStars = await ctx.telegram.getUserStars(userId);
      if (userStars < plan.price) {
        throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥. –í–∞—à –±–∞–ª–∞–Ω—Å: ${userStars}üåü`);
      }

      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const txRef = db.collection('transactions').doc();
      await txRef.set({
        userId,
        amount: plan.price,
        plan: planId,
        status: 'pending',
        createdAt: admin.firestore.FieldValue.serverTimestamp()
      });

      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤—ë–∑–¥
      await ctx.telegram.spendStars({
        user_id: userId,
        amount: plan.price,
        transaction_id: txRef.id
      });

      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
      const subRef = db.collection('subscriptions').doc(userId.toString());
      const subData = {
        userId,
        plan: planId,
        subscriptionType: planId,
        startDate: admin.firestore.FieldValue.serverTimestamp(),
        status: 'active',
        isActive: true,
        lastUpdated: admin.firestore.FieldValue.serverTimestamp()
      };

      if (plan.duration) {
        subData.endDate = admin.firestore.Timestamp.fromDate(new Date(Date.now() + plan.duration));
      }

      await subRef.set(subData, { merge: true });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      await txRef.update({
        status: 'completed',
        completedAt: admin.firestore.FieldValue.serverTimestamp()
      });

      await ctx.editMessageText('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!');

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã –∑–≤—ë–∑–¥–∞–º–∏:', error);
      await ctx.reply(`‚ö†Ô∏è –û—à–∏–±–∫–∞: ${error.message}`);
    }
  });
};