
require('dotenv').config({ path: __dirname + '/.env' });

// –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const requiredEnvVars = [
  'TELEGRAM_BOT_TOKEN',
  'ADMIN_ID',
  'WEBAPP_URL',
  'FIREBASE_PROJECT_ID'
];

const missingVars = requiredEnvVars.filter(v => !process.env[v]);
if (missingVars.length > 0) {
  throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${missingVars.join(', ')}`);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
const firebaseAdmin = require('./telegram-bot/firebase/admin');
console.log('[Firebase] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegraf
const { Telegraf, session } = require('telegraf');
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN, {
  telegram: { webhookReply: process.env.NODE_ENV === 'production' }
});
bot.telegram.setMyCommands([
  { command: '/start', description: 'üü¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
  // { command: '/catalog', description: '–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥' },
  // { command: '/profile', description: '–ú–æ—è –∞–Ω–∫–µ—Ç–∞' }
]);
// Middleware
bot.use(session());
bot.use(async (ctx, next) => {
  try {
    // –î–æ–±–∞–≤–ª—è–µ–º db –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    ctx.db = firebaseAdmin.db;
    ctx.storage = firebaseAdmin.storage;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
    ctx.isAdmin = ctx.from?.id.toString() === process.env.ADMIN_ID;
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    console.log(`[Update] ${ctx.updateType} from ${ctx.from?.id || 'unknown'}`);
    
    await next();
  } catch (error) {
    console.error('[Middleware Error]', error);
    await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞').catch(console.error);
  }
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
const loadHandler = (name) => {
  try {
    require(`./telegram-bot/bot/handlers/${name}`)(bot, firebaseAdmin.db);
    console.log(`[Handler] ${name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω`);
  } catch (error) {
    console.error(`[Handler Error] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${name}:`, error);
    process.exit(1);
  }
};

[
  'start',
  'admin',
  'payments',
  'profiles',
  'webapp'
].forEach(loadHandler);

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
const startBot = async () => {
  try {
    if (process.env.NODE_ENV === 'production') {
      const express = require('express');
      const app = express();
      const PORT = process.env.PORT || 3000;
      
      app.use(express.json());
      app.use(bot.webhookCallback('/webhook'));
      
      await bot.telegram.setWebhook(`${process.env.WEBAPP_URL}/webhook`);
      
      app.listen(PORT, () => {
        console.log(`[Production] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      });
    } else {
      //await bot.launch();
      console.log('[Development] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ polling —Ä–µ–∂–∏–º–µ');
    }
  } catch (error) {
    console.error('[Startup Error] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
    process.exit(1);
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
const shutdown = (signal) => {
  console.log(`–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...`);
  bot.stop()
    .then(() => process.exit(0))
    .catch(() => process.exit(1));
};

process.once('SIGINT', () => shutdown('SIGINT'));
process.once('SIGTERM', () => shutdown('SIGTERM'));

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
startBot().catch(console.error);

module.exports = bot;